{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/baidu_verify_SESFQwOIqk.html","path":"baidu_verify_SESFQwOIqk.html","modified":0,"renderable":1},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat-qcode.jpg","path":"images/wechat-qcode.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1503731472130},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1503731472130},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1503731472131},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1503731472134},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1503731472135},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1503731472135},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1503731472137},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1503731472137},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1503731472136},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1503731472138},{"_id":"themes/next/README.md","hash":"52bad95ac4c88371d3ae9d9ea6e0e14b8c723edf","modified":1503731472140},{"_id":"themes/next/_config.yml","hash":"48f5005c622fdff2ae230540215a1f2588f89b02","modified":1503838154371},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1503731472139},{"_id":"themes/next/baidu_verify_SESFQwOIqk.html","hash":"9ed506f63830b98f06b382fa4c2a918b2861ec00","modified":1503834140482},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1503731472141},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1503731472142},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1503731472215},{"_id":"source/_posts/2017-03-27-Kettle-handbook-01.md","hash":"35289718e93c01428762b54f46524f835e7c445a","modified":1503761861262},{"_id":"source/_posts/2017-03-27-Kettle-handbook-02.md","hash":"5f28f4a560383f1be6d1f0388e9bb5e43593dc02","modified":1503763343400},{"_id":"source/_posts/2017-03-28-Kettle-handbook-05.md","hash":"9cc038c125feb89a9f148d03fd666dc6a1c79e12","modified":1503839500355},{"_id":"source/_posts/2017-03-28-Kettle-handbook-03.md","hash":"1ef4c737584cc4988bf54c924956aa105a97cc05","modified":1503761996222},{"_id":"source/_posts/2017-03-28-Kettle-handbook-04.md","hash":"545ab8825bab2a342523065218f858e3abeaac8a","modified":1503763317685},{"_id":"source/_posts/2017-03-29-Kettle-handbook-06.md","hash":"50604aeb33d8b5378a1468673fcfa8184f6134c7","modified":1503839427873},{"_id":"source/_posts/2017-03-29-Kettle-handbook-08.md","hash":"fdba51472c9eea27371bde4691319f53c9898f93","modified":1503841624004},{"_id":"source/_posts/2017-03-29-Kettle-handbook-07.md","hash":"c5303bf9336f30636defd04fd6f0ae754e64cfb3","modified":1503840527101},{"_id":"source/_posts/2017-03-30-Kettle-handbook-09.md","hash":"f3c4fd59188cadab5bf3e48f0aaa90154cf66b63","modified":1503842709684},{"_id":"source/_posts/2017-04-11-Kettle-handbook-11.md","hash":"9e7cf4412104398cc9a5e0d46acafb807aadde6c","modified":1503844264826},{"_id":"source/_posts/2017-04-10-Kettle-handbook-10.md","hash":"0fb3787388130371c9baf7e61ab413e916249206","modified":1503843509979},{"_id":"source/_posts/2017-04-14-Kettle-handbook-12.md","hash":"2a061c726f6b1cd5d7b1e7e7c31f3ab0534cf2b8","modified":1503844567845},{"_id":"source/_posts/2017-08-01-cognos-doc-main.md","hash":"11f8e5b5d7f05f29ccbc0fd5d06fd9dbb2e7f926","modified":1503845523630},{"_id":"source/_posts/2017-08-02-numpy-handbook-01.md","hash":"317dc21dbf5f1c962c1d142efdccda4384c7a9c2","modified":1503846871608},{"_id":"source/about/index.md","hash":"f84c1e9065e61350282d6920b9c4e855622822ba","modified":1503831905723},{"_id":"source/categories/index.md","hash":"406ee7642c08ad213e5d25cdc3c4eef95d8c5bf5","modified":1503828916448},{"_id":"source/tags/index.md","hash":"a000a79b9b5b0d4f66fc9d23587da58e6482682b","modified":1503828835884},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1503731472106},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1503731472116},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1503731219735},{"_id":"themes/next/.git/index","hash":"eb5fa1435f366e02e6abc8be0d1123f7cf1c5127","modified":1503731472431},{"_id":"themes/next/.git/packed-refs","hash":"de13237eb4c60665834647634898e8c8219ac582","modified":1503731472097},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1503731472132},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2f788b6ee043237d0fab4987579e2484ebb7a862","modified":1503731472132},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"c2ebf90a9e8da9ecbb2b5284a1cb2c33310c00eb","modified":1503731472133},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1503731472134},{"_id":"themes/next/languages/default.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1503731472144},{"_id":"themes/next/languages/en.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1503731472144},{"_id":"themes/next/languages/de.yml","hash":"ee6262473faa1fa55e3dc7b0bb6542f4f6a275c8","modified":1503731472143},{"_id":"themes/next/languages/fr-FR.yml","hash":"c6f3a38a6c27d0815ef72d66020805408aa24019","modified":1503731472145},{"_id":"themes/next/languages/id.yml","hash":"58c9886ccd224cee3db6f9b9e1a86dcd4ff47995","modified":1503731472145},{"_id":"themes/next/languages/ja.yml","hash":"6ba8858255b4cae5e00f5fabd1cfaea3c98a34c2","modified":1503731472146},{"_id":"themes/next/languages/ko.yml","hash":"fbfad308103fb95c635609419bfa3420cb69d646","modified":1503731472147},{"_id":"themes/next/languages/pt-BR.yml","hash":"5e160fa8c8bd1f16b50db161d5bc8ae2ebd6a0c5","modified":1503731472147},{"_id":"themes/next/languages/pt.yml","hash":"1141a4896986de6e2383c5694c0359eaa22fb9b4","modified":1503731472148},{"_id":"themes/next/languages/ru.yml","hash":"43a8fb18dbfeaeed71268d75eb4c542061766419","modified":1503731472149},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0b9ce7d62e7d55235a2770817a40e84577ce38c1","modified":1503731472149},{"_id":"themes/next/languages/zh-hk.yml","hash":"13b2808d632c27748a38a752457d4538c37b8ebb","modified":1503731472150},{"_id":"themes/next/languages/zh-tw.yml","hash":"a91f6c8fa19044afac162a1c73e03836e9460bc5","modified":1503731472151},{"_id":"themes/next/layout/archive.swig","hash":"a6e4008cdfa37fdbeecb15debc0fc676cffb1782","modified":1503731472211},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1503731472212},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1503731472213},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1503731472214},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1503731472213},{"_id":"themes/next/layout/_layout.swig","hash":"cf01118f94e9e3258940f2aecc67bb3351a09a49","modified":1503731472153},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1503731472214},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1503731472215},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1503731472217},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1503731472218},{"_id":"themes/next/source/404.html","hash":"b58c244e68d44eb7ad665a7dd31a6b6a05fa204e","modified":1503736860512},{"_id":"themes/next/source/baidu_verify_SESFQwOIqk.html","hash":"9ed506f63830b98f06b382fa4c2a918b2861ec00","modified":1503834140482},{"_id":"themes/next/source/favicon.ico","hash":"4eda7c0f3a36181f483dd0a14efe9f58c8b29814","modified":1503714273508},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1503731472428},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1503731472430},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1503731472429},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503731472303},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1503731219737},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1503731219737},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1503731219738},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1503731219739},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1503731219739},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1503731219741},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1503731219740},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1503731219740},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1503731219741},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1503731219742},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1503731219743},{"_id":"themes/next/.git/logs/HEAD","hash":"b227746af31787c5b0877f21565633e18f53f038","modified":1503731472110},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1503731472152},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1503731472153},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1503731472155},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1503731472154},{"_id":"themes/next/layout/_macro/post.swig","hash":"9896b34a7edc112c03b393a1602a616710a66ae1","modified":1503731472156},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1503731472157},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b53c392dc46f489790c2ae46d23daa3c2c854ffb","modified":1503731472157},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1503731472158},{"_id":"themes/next/layout/_partials/footer.swig","hash":"dc2a0699152da26de23cf68314d919c7f1b91b77","modified":1503731472160},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fc0ff72b3a8ab25029a070acee066d9eaa0b0493","modified":1503731472159},{"_id":"themes/next/layout/_partials/head.swig","hash":"75b11a3e5441b4fc0b7c631e63926d474c0f9e98","modified":1503835633519},{"_id":"themes/next/layout/_partials/header.swig","hash":"fa4bd511c967b97c829a10eb7d5f87ad7da2aa5d","modified":1503731472163},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1503731472165},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1503731472171},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1503731472171},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1503731472187},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1503731472201},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1503731472202},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1503731472202},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1503731472203},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1503731472204},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1503731472205},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1503731472163},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1503731472164},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1503731472219},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1503731472220},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1503731472220},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1503731472221},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1503731472222},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1503731472222},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1503731472223},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1503731472224},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1503731472224},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1503731472302},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1503731472305},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1503731472305},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1503731472306},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1503731472307},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1503731472308},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1503731472309},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1503731472309},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1503731472310},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1503731472311},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503731472311},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503731472312},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1503731472312},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1503731472313},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1503731472314},{"_id":"themes/next/source/images/wechat-qcode.jpg","hash":"7aec41aa4c72b2ea7f11312a7eb241de3a7df9aa","modified":1503737146647},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503731472174},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503731472175},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503731472280},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503731472278},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503731472279},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503731472301},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503731472299},{"_id":"themes/next/.git/refs/heads/master","hash":"ffebc6ba06132d37c7dc56a484deb4e0d1aa4c1f","modified":1503731472109},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1503731472162},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1503731472166},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1503731472162},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1503731472168},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1503731472168},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1503731472169},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1503731472167},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"8ed117eeeac17d562a54ec6be556988be0ec67ba","modified":1503731472169},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1503731472166},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1503731472172},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1503731472186},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1503731472174},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1503731472188},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1503731472189},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1503731472190},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1503731472190},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1503731472191},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1503731472192},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1503731472192},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1503731472191},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1503731472193},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1503731472194},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1503731472194},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1503731472196},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1503731472195},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1503731472196},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1503731472197},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"92ea45b877b1fec2010c7b409f121c986ee5075b","modified":1503731472198},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1503731472198},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1503731472199},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"602104d7ac47f7888d97e810419e58593a79e8ba","modified":1503731472200},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1503731472200},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1503731472208},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1503731472209},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1503731472208},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1503731472210},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1503731472277},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1503731472278},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1503731472280},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"38a9f43973704afe7e8ca50f35a25940ea96e3cf","modified":1503731472298},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1503731472299},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1503731472279},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1503731472300},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1503731472301},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1503731472315},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1503731472316},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"96c8b5fe1999de1b3a46730d9812787dfcd65884","modified":1503731472316},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1503731472317},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1503731472318},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1503731472318},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1503731472319},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1503731472320},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1503731472321},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1503731472322},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1503731472323},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1503731472340},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1503731472334},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1503731472341},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1503731472342},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1503731472343},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1503731472366},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1503731472366},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1503731472367},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1503731472368},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1503731472368},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1503731472356},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1503731472355},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1503731472357},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1503731472358},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1503731472392},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1503731472394},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1503731472395},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1503731472396},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1503731472396},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1503731472397},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1503731472398},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1503731472409},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1503731472410},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1503731472411},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1503731472399},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1503731472399},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1503731472400},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1503731472401},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1503731472402},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1503731472402},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1503731472403},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1503731472404},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1503731472405},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1503731472405},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1503731472406},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1503731472406},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1503731472407},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1503731472408},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1503731472420},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1503731472421},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1503731472425},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1503731472427},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1503731472426},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1503731472393},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"b227746af31787c5b0877f21565633e18f53f038","modified":1503731472111},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1503731472104},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1503731472206},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1503731472207},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1503731472228},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1503731472227},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1503731472229},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1503731472228},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1503731472230},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1503731472241},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1503731472258},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"c9b6e70e67a0b2c41a03181302379afdc26da5b6","modified":1503731472271},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1503731472275},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"be4e44ab7b407c379cdba56fd5595a273c578598","modified":1503731472272},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1503731472274},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1503731472273},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1503731472275},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1503731472276},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1503731472282},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1503731472283},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1503731472284},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1503731472284},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1503731472285},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1503731472286},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1503731472286},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1503731472287},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1503731472290},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1503731472290},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1503731472292},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1503731472291},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1503731472292},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1503731472294},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d4cf54b33e1bb8746a77ce2446d581d01be5329d","modified":1503731472295},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1503731472295},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1503731472296},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"36026bc6e8d3a631f109d766fdd21857697650a0","modified":1503731472297},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1503731472297},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1503731472321},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1503731472329},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1503731472332},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1503731472333},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1503731472344},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1503731472345},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1503731472346},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1503731472344},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1503731472347},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1503731472346},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1503731472352},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1503731472354},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1503731472353},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1503731472370},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1503731472372},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1503731472371},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1503731472359},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1503731472362},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1503731472418},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1503731472419},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1503731472331},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1503731472389},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1503731472390},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1503731472424},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"b227746af31787c5b0877f21565633e18f53f038","modified":1503731472104},{"_id":"themes/next/.git/objects/pack/pack-1a3828265b99734f77ab0e0cc0c92da3d4c309d0.idx","hash":"88aa5292c0771c47117514e3d279cebe8d9685cb","modified":1503731472045},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1503731472232},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1503731472233},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1503731472232},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1503731472234},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1503731472234},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1503731472231},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1503731472236},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1503731472235},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1503731472237},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1503731472238},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1503731472239},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1503731472240},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1503731472240},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1503731472239},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1503731472242},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1503731472244},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1503731472245},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1503731472243},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1503731472244},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1503731472245},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1503731472246},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1503731472246},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1503731472247},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1503731472247},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1503731472248},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1503731472249},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1503731472249},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"23c7a129452f7708fe7e29ce7ef2df969de9951d","modified":1503731472250},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1503731472250},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1503731472251},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1503731472252},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1503731472253},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1503731472254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1503731472253},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1503731472254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1503731472255},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1503731472256},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1503731472257},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1503731472258},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1503731472259},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1503731472260},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1503731472261},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1503731472261},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1503731472262},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1503731472262},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1503731472263},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1503731472264},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1503731472266},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1503731472266},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1503731472264},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1503731472267},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1503731472267},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1503731472268},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1503731472269},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1503731472269},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1503731472270},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1503731472288},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1503731472293},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1503731472289},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1503731472326},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1503731472327},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1503731472326},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1503731472328},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1503731472348},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1503731472349},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1503731472350},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1503731472350},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1503731472352},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1503731472351},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1503731472375},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1503731472388},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1503731472379},{"_id":"themes/next/source/images/avatar.png","hash":"fd473a3da3b86155770662154278a6e2e44bdee4","modified":1503721809000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1503731472338},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1503731472416},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1503731472384},{"_id":"themes/next/.git/objects/pack/pack-1a3828265b99734f77ab0e0cc0c92da3d4c309d0.pack","hash":"048b53f37dc06c01b218cf14d104fdb0dc64017c","modified":1503731472046},{"_id":"public/baidusitemap.xml","hash":"f7c7132af9e06ac4cc56ff1aeebe14269280fc6e","modified":1503846896530},{"_id":"public/atom.xml","hash":"b040a0d3dd00df8659ee20a89cee7f5ba49f1228","modified":1503846896549},{"_id":"public/search.xml","hash":"6a4ba6f9a3e90133b255f9e13bac27f1a784f16e","modified":1503846896551},{"_id":"public/sitemap.xml","hash":"fd8b8d3d1fde09faef3faf0aebe73be286017a3e","modified":1503846896551},{"_id":"public/about/index.html","hash":"a03fd3b277d03240d88189554b1b53bf57edc711","modified":1503846896833},{"_id":"public/categories/index.html","hash":"5c470babdbdfebc575f4a662197405e3918c8538","modified":1503846896835},{"_id":"public/tags/index.html","hash":"91abfe164f1447906439904d0c106095e9b0751b","modified":1503846896835},{"_id":"public/2017/08/01/cognos-doc-main/index.html","hash":"afb305d3b26d268bfef9c781bf0337b4ebf06cdd","modified":1503846896836},{"_id":"public/2017/04/14/Kettle-handbook-12/index.html","hash":"c918689ab663a0e36f33051c8fcf45ebec93cf81","modified":1503846896836},{"_id":"public/2017/04/11/Kettle-handbook-11/index.html","hash":"88850cee117864770dafe12cf1b2bdd5da5fe5fe","modified":1503846896836},{"_id":"public/2017/03/30/Kettle-handbook-09/index.html","hash":"537b6b42ba9223cee110aadba4664aab96a98532","modified":1503846896836},{"_id":"public/2017/04/10/Kettle-handbook-10/index.html","hash":"7f1ad0158c574bd0fb4d73898703d0fbc1c87d3b","modified":1503846896836},{"_id":"public/2017/03/29/Kettle-handbook-08/index.html","hash":"744f30cf33921ebf5f2ed1b0e7b3f52e93011168","modified":1503846896836},{"_id":"public/2017/03/29/Kettle-handbook-07/index.html","hash":"034cf6606f50c1e02b3dba24be60a723c4e7d56a","modified":1503846896836},{"_id":"public/2017/03/29/Kettle-handbook-06/index.html","hash":"9914346aa92b31cc29d153895fceec1ec5d947b4","modified":1503846896836},{"_id":"public/2017/03/28/Kettle-handbook-05/index.html","hash":"c9fd506e0a93e54710307f2643ca95506ab47139","modified":1503846896836},{"_id":"public/2017/03/28/Kettle-handbook-04/index.html","hash":"7cdea58918f90476b7f22bfa54a2e3564ec99d82","modified":1503846896836},{"_id":"public/2017/03/28/Kettle-handbook-03/index.html","hash":"bd56094a9595dab95ff3802a50e3ef716b3789e7","modified":1503846896836},{"_id":"public/2017/03/27/Kettle-handbook-02/index.html","hash":"2ab8bac7cc8754c7b40bab5a7440d1f1b961b1e4","modified":1503846896836},{"_id":"public/2017/03/27/Kettle-handbook-01/index.html","hash":"ef3a793b24ef1b23d901e9822995588ab3cededf","modified":1503846896836},{"_id":"public/archives/index.html","hash":"e4d1b783dfea637b708fb4d0134abdf32cfbda0e","modified":1503846896836},{"_id":"public/archives/2017/index.html","hash":"e70ceca390825233d6c49d444afe030ed802db4b","modified":1503846896836},{"_id":"public/archives/page/2/index.html","hash":"9c11903300ec5147db3e42eeac064bdf67e3d0e9","modified":1503846896836},{"_id":"public/archives/2017/page/2/index.html","hash":"bbd82dd3470e7089a85ede99bdf59cd71063a4f1","modified":1503846896837},{"_id":"public/archives/2017/03/index.html","hash":"67b8867ac3376390791e348d22ab0bd7a6ff6b02","modified":1503846896837},{"_id":"public/archives/2017/04/index.html","hash":"471260962aa9283783fc1a27eee81ab0cf7fddde","modified":1503846896837},{"_id":"public/archives/2017/08/index.html","hash":"b5f1595ae1a5f40a36a02a8df2b453b2188cafc4","modified":1503846896837},{"_id":"public/categories/ETL-Kettle/index.html","hash":"f5df6d6abc9d957b967822a9bb6f20171cf48874","modified":1503846896837},{"_id":"public/categories/数据可视化-Cognos/index.html","hash":"b9f524e73f73d44822c8610ea3d9598ad83aed4a","modified":1503846896837},{"_id":"public/categories/ETL-Kettle/page/2/index.html","hash":"ec6f9490b3bc45516b5dd44558bf82c82e394bd0","modified":1503846896837},{"_id":"public/page/2/index.html","hash":"d9a73d1720e5ef6b1c1120034e51418767c40a53","modified":1503846896837},{"_id":"public/index.html","hash":"b54e1d38e59a3ba397ba6e594130109208726cbb","modified":1503846896838},{"_id":"public/tags/Kettle/index.html","hash":"e4b71ff16828f106355dacada3bba1f611dd1db9","modified":1503846896838},{"_id":"public/tags/Kettle/page/2/index.html","hash":"012619f923d68682d6c70508fa124e10fccc5ee8","modified":1503846896838},{"_id":"public/tags/Cognos/index.html","hash":"8e1bda11b452fb2e1bcd8099372b2936106840f2","modified":1503846896838},{"_id":"public/tags/数据可视化/index.html","hash":"d0e8e796af707ca58687f8cd66b6a70edb1db51c","modified":1503846896838},{"_id":"public/2017/08/02/numpy-handbook-01/index.html","hash":"29c39e648151037fdc2f18cc1e7f7cb5271aa0c4","modified":1503846896855},{"_id":"public/categories/Python-Numpy/index.html","hash":"0d3493e5e7b083d8486d6d3f72c641f445cca41a","modified":1503846896855},{"_id":"public/tags/Python/index.html","hash":"e97fe1c8beacb8f2e68e3e998901a5804251ca03","modified":1503846896855},{"_id":"public/tags/Numpy/index.html","hash":"7dd886858f369de8343ea7446a14cfd39251b0f4","modified":1503846896856},{"_id":"public/favicon.ico","hash":"4eda7c0f3a36181f483dd0a14efe9f58c8b29814","modified":1503846896861},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1503846896861},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1503846896861},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1503846896861},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1503846896862},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1503846896862},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1503846896862},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1503846896862},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1503846896862},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1503846896862},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503846896862},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503846896862},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1503846896862},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1503846896862},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1503846896862},{"_id":"public/images/wechat-qcode.jpg","hash":"7aec41aa4c72b2ea7f11312a7eb241de3a7df9aa","modified":1503846896862},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1503846896862},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1503846896862},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1503846896862},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1503846896862},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1503846896862},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1503846896862},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1503846896862},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1503846896862},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1503846896862},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1503846896865},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1503846896865},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1503846896866},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1503846896866},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1503846896866},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1503846897906},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1503846897921},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1503846897934},{"_id":"public/baidu_verify_SESFQwOIqk.html","hash":"9ed506f63830b98f06b382fa4c2a918b2861ec00","modified":1503846897934},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1503846897934},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1503846897934},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1503846897934},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1503846897934},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1503846897934},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1503846897934},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1503846897935},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1503846897935},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1503846897935},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1503846897935},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1503846897935},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1503846897935},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1503846897935},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1503846897935},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1503846897935},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1503846897935},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1503846897935},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1503846897935},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1503846897935},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1503846897935},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1503846897935},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1503846897935},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1503846897936},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1503846897936},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1503846897936},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1503846897936},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1503846897936},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1503846897936},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1503846897936},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1503846897936},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1503846897936},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1503846897936},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1503846897937},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1503846897937},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1503846897937},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1503846897937},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1503846897937},{"_id":"public/css/main.css","hash":"882d83e2246ac3052e9550c15561c912ce8d8073","modified":1503846897938},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1503846897938},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1503846897938},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1503846897938},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1503846897938},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1503846897938},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1503846897938},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1503846897938},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1503846897938},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1503846897938},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1503846897938},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1503846897939},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1503846897939},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1503846897939},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1503846897940},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1503846897940},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1503846897940},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1503846897940},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1503846897940},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1503846897940},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1503846897941},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1503846897941},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1503846897972},{"_id":"public/images/avatar.png","hash":"fd473a3da3b86155770662154278a6e2e44bdee4","modified":1503846897987}],"Category":[{"name":"ETL-Kettle","_id":"cj6uvm1ba000488inpm2bo7oi"},{"name":"数据可视化-Cognos","_id":"cj6uvm1cq001488inmifb84av"},{"name":"Python-Numpy","_id":"cj6uvm1cx001c88inzuno8ya3"}],"Data":[],"Page":[{"title":"关于我","date":"2017-08-26T07:35:57.000Z","type":"about","_content":"Hi，你好，欢迎访问我的博客。\n很久很久之前就玩儿过Hexo，结果后来觉得麻烦就放弃了......\n最近，决定重新搞起来。\n以前CSDN上写博客，博客地址：[CSDN博客](http://blog.csdn.net/yuguiyang1990)\n中间差不多有快2年没咋写了，真是荒废了，这次一定要坚持搞下去，多分享些内容。\n\n***\n下面是我的一些经历：\n在大学乃至刚毕业呢，都是搞Java的，在第一家公司搞了半年左右，后来公司有一个BI项目，当时觉得学新的东西很有意思就去了。\n后面就一直在BI的坑里，做过可视化（Cognos，目前在了解Tableau），做过ETL、数据仓库，现在呢，打算做数据分析，在学习Python、R以及相关的一切。\n之前CSDN的博客文章太多，也比较久远，就不会迁移过来了；\n这里会先整理下前段时间记录的博客内容，然后所有的内容都会在这里分享。\n\n***\n哈哈，在丽江，到处都是这首歌，挺好听的呀\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=274859&auto=1&height=66\"></iframe>\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-08-26 15:35:57\ntype: \"about\"\n---\nHi，你好，欢迎访问我的博客。\n很久很久之前就玩儿过Hexo，结果后来觉得麻烦就放弃了......\n最近，决定重新搞起来。\n以前CSDN上写博客，博客地址：[CSDN博客](http://blog.csdn.net/yuguiyang1990)\n中间差不多有快2年没咋写了，真是荒废了，这次一定要坚持搞下去，多分享些内容。\n\n***\n下面是我的一些经历：\n在大学乃至刚毕业呢，都是搞Java的，在第一家公司搞了半年左右，后来公司有一个BI项目，当时觉得学新的东西很有意思就去了。\n后面就一直在BI的坑里，做过可视化（Cognos，目前在了解Tableau），做过ETL、数据仓库，现在呢，打算做数据分析，在学习Python、R以及相关的一切。\n之前CSDN的博客文章太多，也比较久远，就不会迁移过来了；\n这里会先整理下前段时间记录的博客内容，然后所有的内容都会在这里分享。\n\n***\n哈哈，在丽江，到处都是这首歌，挺好听的呀\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=274859&auto=1&height=66\"></iframe>\n\n","updated":"2017-08-27T11:05:05.723Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj6uvm1b1000188inocl9fqrm","content":"<p>Hi，你好，欢迎访问我的博客。<br>很久很久之前就玩儿过Hexo，结果后来觉得麻烦就放弃了……<br>最近，决定重新搞起来。<br>以前CSDN上写博客，博客地址：<a href=\"http://blog.csdn.net/yuguiyang1990\" target=\"_blank\" rel=\"external\">CSDN博客</a><br>中间差不多有快2年没咋写了，真是荒废了，这次一定要坚持搞下去，多分享些内容。</p>\n<hr>\n<p>下面是我的一些经历：<br>在大学乃至刚毕业呢，都是搞Java的，在第一家公司搞了半年左右，后来公司有一个BI项目，当时觉得学新的东西很有意思就去了。<br>后面就一直在BI的坑里，做过可视化（Cognos，目前在了解Tableau），做过ETL、数据仓库，现在呢，打算做数据分析，在学习Python、R以及相关的一切。<br>之前CSDN的博客文章太多，也比较久远，就不会迁移过来了；<br>这里会先整理下前段时间记录的博客内容，然后所有的内容都会在这里分享。</p>\n<hr>\n<p>哈哈，在丽江，到处都是这首歌，挺好听的呀</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=274859&auto=1&height=66\"></iframe>\n\n","site":{"data":{}},"excerpt":"","more":"<p>Hi，你好，欢迎访问我的博客。<br>很久很久之前就玩儿过Hexo，结果后来觉得麻烦就放弃了……<br>最近，决定重新搞起来。<br>以前CSDN上写博客，博客地址：<a href=\"http://blog.csdn.net/yuguiyang1990\" target=\"_blank\" rel=\"external\">CSDN博客</a><br>中间差不多有快2年没咋写了，真是荒废了，这次一定要坚持搞下去，多分享些内容。</p>\n<hr>\n<p>下面是我的一些经历：<br>在大学乃至刚毕业呢，都是搞Java的，在第一家公司搞了半年左右，后来公司有一个BI项目，当时觉得学新的东西很有意思就去了。<br>后面就一直在BI的坑里，做过可视化（Cognos，目前在了解Tableau），做过ETL、数据仓库，现在呢，打算做数据分析，在学习Python、R以及相关的一切。<br>之前CSDN的博客文章太多，也比较久远，就不会迁移过来了；<br>这里会先整理下前段时间记录的博客内容，然后所有的内容都会在这里分享。</p>\n<hr>\n<p>哈哈，在丽江，到处都是这首歌，挺好听的呀</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=274859&auto=1&height=66\"></iframe>\n\n"},{"title":"一川烟草，满城风絮，梅子黄时雨","date":"2017-08-26T07:36:17.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 一川烟草，满城风絮，梅子黄时雨\ndate: 2017-08-26 15:36:17\ntype: \"categories\"\n---\n","updated":"2017-08-27T10:15:16.448Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj6uvm1b6000388ineonp20sw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"我就是我，是颜色不一样的烟火","date":"2017-08-26T07:35:38.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 我就是我，是颜色不一样的烟火\ndate: 2017-08-26 15:35:38\ntype: \"tags\"\n---\n","updated":"2017-08-27T10:13:55.884Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj6uvm1bk000788in2sy5l4js","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Kettle手册（一）- 序及Kettle简介","date":"2017-03-27T13:59:00.000Z","_content":"\n{% note primary %} \n# 1. 序 \n{% endnote %}\n\n好久没有写博客了，新的一年总得留下点儿什么。目前主要负责数据仓库这一块任务，平时用用Kettle、SSIS这类ETL工具，而且工具的使用整理起来会方便些。所以先从Kettle开始，一点点整理下最近BI开发中掌握的知识。\n以前有做过BI报表Cognos开发还有些入门级的Java，都在CSDN博客上，感兴趣的同学可以去看看：[于贵洋的博客](http://blog.csdn.net/yuguiyang1990)\n![Kettle-handbook-01Kettle-handbook-01-01](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-01-01.png-blog.photo)\n好了，下面就根据自己的经验和理解，整理下Kettle的知识。\n\n<!-- more -->\n\n{% note primary %}\n# 2. Kettle简介 \n{% endnote %}\n\nKettle这东西是干嘛的呢？\nKettle是一个开源的ETL工具，所以基本的数据抽取、转换、加载，他都可以。\n比如：我要把一个mysql数据库的数据同步到一个Postgres数据库，我们有哪些办法呢?\n大概会有:\n1. 将数据导出为文本文件，使用PG的copy命令直接加载\n2. 数据量少的话，直接拼接成insert脚本，批量插入\n3. 一些开源的小工具，提供2种数据库直接的同步\n4. Kettle\n\n等等方法\n再比如：\n我每天需要统计一些系统中的异常数据，导出为Excel，用邮件发送给指定的开发人员处理，该怎样做呢？\n1. Java或者其他开发语言做定时任务\n2. Kettle   \n\n和其他的ETL工具相比，他有什么优势呢？\n> Kettle是基于Java开发的，是开源免费的，大家可以直接在网上下载；\n跨平台，Windows，Linux都可以使用；使用起来简单快捷。\n\n> 既然开源，相比于其他收费产品，劣势也就很显然了，比如稳定性啊，BUG修复处理啊，而且基于Java，性能上会差些。\n当然都是相对来说，一般数据量使用或者逻辑不复杂的话，使用起来是很适合的。\n\n刚刚也在社区上，发现了Kettle的视频，kettle视频，大家可以看看，应该用的到。\nKettle的基本介绍就这些，后面会根据实际的例子，来介绍下Kettle的使用。","source":"_posts/2017-03-27-Kettle-handbook-01.md","raw":"---\ntitle: Kettle手册（一）- 序及Kettle简介\ndate: 2017-03-27 21:59:00\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n\n{% note primary %} \n# 1. 序 \n{% endnote %}\n\n好久没有写博客了，新的一年总得留下点儿什么。目前主要负责数据仓库这一块任务，平时用用Kettle、SSIS这类ETL工具，而且工具的使用整理起来会方便些。所以先从Kettle开始，一点点整理下最近BI开发中掌握的知识。\n以前有做过BI报表Cognos开发还有些入门级的Java，都在CSDN博客上，感兴趣的同学可以去看看：[于贵洋的博客](http://blog.csdn.net/yuguiyang1990)\n![Kettle-handbook-01Kettle-handbook-01-01](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-01-01.png-blog.photo)\n好了，下面就根据自己的经验和理解，整理下Kettle的知识。\n\n<!-- more -->\n\n{% note primary %}\n# 2. Kettle简介 \n{% endnote %}\n\nKettle这东西是干嘛的呢？\nKettle是一个开源的ETL工具，所以基本的数据抽取、转换、加载，他都可以。\n比如：我要把一个mysql数据库的数据同步到一个Postgres数据库，我们有哪些办法呢?\n大概会有:\n1. 将数据导出为文本文件，使用PG的copy命令直接加载\n2. 数据量少的话，直接拼接成insert脚本，批量插入\n3. 一些开源的小工具，提供2种数据库直接的同步\n4. Kettle\n\n等等方法\n再比如：\n我每天需要统计一些系统中的异常数据，导出为Excel，用邮件发送给指定的开发人员处理，该怎样做呢？\n1. Java或者其他开发语言做定时任务\n2. Kettle   \n\n和其他的ETL工具相比，他有什么优势呢？\n> Kettle是基于Java开发的，是开源免费的，大家可以直接在网上下载；\n跨平台，Windows，Linux都可以使用；使用起来简单快捷。\n\n> 既然开源，相比于其他收费产品，劣势也就很显然了，比如稳定性啊，BUG修复处理啊，而且基于Java，性能上会差些。\n当然都是相对来说，一般数据量使用或者逻辑不复杂的话，使用起来是很适合的。\n\n刚刚也在社区上，发现了Kettle的视频，kettle视频，大家可以看看，应该用的到。\nKettle的基本介绍就这些，后面会根据实际的例子，来介绍下Kettle的使用。","slug":"Kettle-handbook-01","published":1,"updated":"2017-08-26T15:37:41.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1an000088innv4v0rdg","content":"<div class=\"note primary\"><h1 id=\"1-序\"><a href=\"#1-序\" class=\"headerlink\" title=\"1. 序\"></a>1. 序</h1></div>\n<p>好久没有写博客了，新的一年总得留下点儿什么。目前主要负责数据仓库这一块任务，平时用用Kettle、SSIS这类ETL工具，而且工具的使用整理起来会方便些。所以先从Kettle开始，一点点整理下最近BI开发中掌握的知识。<br>以前有做过BI报表Cognos开发还有些入门级的Java，都在CSDN博客上，感兴趣的同学可以去看看：<a href=\"http://blog.csdn.net/yuguiyang1990\" target=\"_blank\" rel=\"external\">于贵洋的博客</a><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-01-01.png-blog.photo\" alt=\"Kettle-handbook-01Kettle-handbook-01-01\"><br>好了，下面就根据自己的经验和理解，整理下Kettle的知识。</p>\n<a id=\"more\"></a>\n<div class=\"note primary\"><h1 id=\"2-Kettle简介\"><a href=\"#2-Kettle简介\" class=\"headerlink\" title=\"2. Kettle简介\"></a>2. Kettle简介</h1></div>\n<p>Kettle这东西是干嘛的呢？<br>Kettle是一个开源的ETL工具，所以基本的数据抽取、转换、加载，他都可以。<br>比如：我要把一个mysql数据库的数据同步到一个Postgres数据库，我们有哪些办法呢?<br>大概会有:</p>\n<ol>\n<li>将数据导出为文本文件，使用PG的copy命令直接加载</li>\n<li>数据量少的话，直接拼接成insert脚本，批量插入</li>\n<li>一些开源的小工具，提供2种数据库直接的同步</li>\n<li>Kettle</li>\n</ol>\n<p>等等方法<br>再比如：<br>我每天需要统计一些系统中的异常数据，导出为Excel，用邮件发送给指定的开发人员处理，该怎样做呢？</p>\n<ol>\n<li>Java或者其他开发语言做定时任务</li>\n<li>Kettle   </li>\n</ol>\n<p>和其他的ETL工具相比，他有什么优势呢？</p>\n<blockquote>\n<p>Kettle是基于Java开发的，是开源免费的，大家可以直接在网上下载；<br>跨平台，Windows，Linux都可以使用；使用起来简单快捷。</p>\n<p>既然开源，相比于其他收费产品，劣势也就很显然了，比如稳定性啊，BUG修复处理啊，而且基于Java，性能上会差些。<br>当然都是相对来说，一般数据量使用或者逻辑不复杂的话，使用起来是很适合的。</p>\n</blockquote>\n<p>刚刚也在社区上，发现了Kettle的视频，kettle视频，大家可以看看，应该用的到。<br>Kettle的基本介绍就这些，后面会根据实际的例子，来介绍下Kettle的使用。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><h1 id=\"1-序\"><a href=\"#1-序\" class=\"headerlink\" title=\"1. 序\"></a>1. 序</h1></div>\n<p>好久没有写博客了，新的一年总得留下点儿什么。目前主要负责数据仓库这一块任务，平时用用Kettle、SSIS这类ETL工具，而且工具的使用整理起来会方便些。所以先从Kettle开始，一点点整理下最近BI开发中掌握的知识。<br>以前有做过BI报表Cognos开发还有些入门级的Java，都在CSDN博客上，感兴趣的同学可以去看看：<a href=\"http://blog.csdn.net/yuguiyang1990\" target=\"_blank\" rel=\"external\">于贵洋的博客</a><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-01-01.png-blog.photo\" alt=\"Kettle-handbook-01Kettle-handbook-01-01\"><br>好了，下面就根据自己的经验和理解，整理下Kettle的知识。</p>","more":"<div class=\"note primary\"><h1 id=\"2-Kettle简介\"><a href=\"#2-Kettle简介\" class=\"headerlink\" title=\"2. Kettle简介\"></a>2. Kettle简介</h1></div>\n<p>Kettle这东西是干嘛的呢？<br>Kettle是一个开源的ETL工具，所以基本的数据抽取、转换、加载，他都可以。<br>比如：我要把一个mysql数据库的数据同步到一个Postgres数据库，我们有哪些办法呢?<br>大概会有:</p>\n<ol>\n<li>将数据导出为文本文件，使用PG的copy命令直接加载</li>\n<li>数据量少的话，直接拼接成insert脚本，批量插入</li>\n<li>一些开源的小工具，提供2种数据库直接的同步</li>\n<li>Kettle</li>\n</ol>\n<p>等等方法<br>再比如：<br>我每天需要统计一些系统中的异常数据，导出为Excel，用邮件发送给指定的开发人员处理，该怎样做呢？</p>\n<ol>\n<li>Java或者其他开发语言做定时任务</li>\n<li>Kettle   </li>\n</ol>\n<p>和其他的ETL工具相比，他有什么优势呢？</p>\n<blockquote>\n<p>Kettle是基于Java开发的，是开源免费的，大家可以直接在网上下载；<br>跨平台，Windows，Linux都可以使用；使用起来简单快捷。</p>\n<p>既然开源，相比于其他收费产品，劣势也就很显然了，比如稳定性啊，BUG修复处理啊，而且基于Java，性能上会差些。<br>当然都是相对来说，一般数据量使用或者逻辑不复杂的话，使用起来是很适合的。</p>\n</blockquote>\n<p>刚刚也在社区上，发现了Kettle的视频，kettle视频，大家可以看看，应该用的到。<br>Kettle的基本介绍就这些，后面会根据实际的例子，来介绍下Kettle的使用。</p>"},{"title":"Kettle手册（五）- 实例-增量同步数据","date":"2017-03-28T15:30:44.000Z","_content":"综合前面的几个例子，我们这里来是实现下增量数据的同步。\n这里只是分享一种方法，实际工作中，还会有其他更好的方案。\n增量同步的整体思路一般就是：首先拿到这张表的增量数据，怎么拿增量呢，源表需要有一个时间字段，代表该条记录的最新更新时间（及只要该条记录变化，该时间字段就会更新），当然有时间字段最好了，没有的话，可能需要做全表对比之类的操作；正常情况下，业务系统的表中都是有主键的，我们拿到增量数据之后，需要判断该记录的新插入的，还是更新的记录，如果是更新记录，我们需要先将数据加载到中间表，然后，根据主键将目标表中已存在的数据删除，最后再将本次的增量数据插入到目标表。\n\n## 1.配置表的设计（元数据表）\n首先我们需要一张配置表，来保存我们要增量同步的表的基本信息\n``` sql\n--元数据表\ncreate table tm_etl_table(\n\ttable_name varchar(50), --表名\n\tis_run int , --调度状态\n\tupdate_time timestamp,--表数据更新时间\n\tetl_insert_time timestamp --记录更新时间\n);\n```\n我们初始化一条记录，我们就以这张ods_tm_book表\n![Kettle-handbook-05-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-01.png-blog.photo)\n一些基础表准备\n\n<!-- more -->\n\n``` sql\n-- 源表\ncreate table tm_book(id int,book_name varchar(10),latest_time timestamp);\n\n-- 源表数据初始化\ninsert into tm_book(id,book_name,latest_time)\nselect x,x||'_name',clock_timestamp() from generate_series(1,10) x;\n\n-- 目标表和中间表\ncreate table ods_tm_book(id int,book_name varchar(10),latest_time timestamp,etl_insert_time timestamp);\ncreate table staging_tm_book(id int,book_name varchar(10),latest_time timestamp);\n```\n\n源表中的数据\n![Kettle-handbook-05-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-02.png-blog.photo)\n\n## 2.同步数据的流程开发\n整体流程是这样的，注意下，这个只是为了简单演示了这个增量的例子，实际应用的话得修改，这是有漏洞的。\n![Kettle-handbook-05-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-03.png-blog.photo)\n\n### 2.1更新元数据表的状态并获取表更新时间\n就是我们第一个状态，我们更新tm_etl_table表，更新is_run=0，表示我们开始同步数据了，update_time，初始化为 ‘1970-01-01’，表示我们要拉取所有的数据\n![Kettle-handbook-05-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-04.png-blog.photo)\n![Kettle-handbook-05-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-05.png-blog.photo)\n这里，我们将该表的更新时间作为变量，我们会在后面的转换中使用\n![Kettle-handbook-05-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-06.png-blog.photo)\n\n### 2.2 加载数据到中间表\n我们这里，直接表对表，将数据插入到staging\n![Kettle-handbook-05-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-07.png-blog.photo)\n其中，表输入中，我们需要根据前面的更新时间变量，获取增量数据，注意，需要勾选上“替换SQL语句中的变量”\n![Kettle-handbook-05-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-08.png-blog.photo)\n这里，我们直接就表输出到中间表，每次都需将清空表数据\n![Kettle-handbook-05-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-09.png-blog.photo)\n\n### 2.3 加载数据到目标表\n![Kettle-handbook-05-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-10.png-blog.photo)\n这里，主要有3段脚本（为了方便，就这样吧），根据主键ID，清空目标表数据，然后，将数据插入到目标表，最后，更新tm_etl_table表中的记录状态\n![Kettle-handbook-05-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-11.png-blog.photo)\n好了，用Kettle实现一个增量的逻辑大概就是这样了，\n\n## 3.小结\n\n这里整理几个问题\n\n### 3.1 中间表\n这里的话，使用了中间表，Kettle中是有一个控件的，应该叫那个“插入/更新”，可以根据主键将数据更新掉，这个控件之前使用时，发现很慢，就一直没用，后面的话，可能会写个例子，简单测试看看。使用中间表，缓存下数据，也是不错的方法。\n\n### 3.2 增量流程\n目前公司中，增量抽取，是这样的，首先各个业务系统的数据导出到文本文件，然后批量将文件加载到数据仓库中（这里使用循环加载的）。因为每天的数据量比较大，如果知己到表的话，会很慢，使用文件，一些数据库都有批量加载的命令，很快很方便，比如：PostgreSQL中的copy命令，Greenplum中的外部表，还有Mysql中的load data等等。\n\n\n\n","source":"_posts/2017-03-28-Kettle-handbook-05.md","raw":"---\ntitle: Kettle手册（五）- 实例-增量同步数据\ndate: 2017-03-28 23:30:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n综合前面的几个例子，我们这里来是实现下增量数据的同步。\n这里只是分享一种方法，实际工作中，还会有其他更好的方案。\n增量同步的整体思路一般就是：首先拿到这张表的增量数据，怎么拿增量呢，源表需要有一个时间字段，代表该条记录的最新更新时间（及只要该条记录变化，该时间字段就会更新），当然有时间字段最好了，没有的话，可能需要做全表对比之类的操作；正常情况下，业务系统的表中都是有主键的，我们拿到增量数据之后，需要判断该记录的新插入的，还是更新的记录，如果是更新记录，我们需要先将数据加载到中间表，然后，根据主键将目标表中已存在的数据删除，最后再将本次的增量数据插入到目标表。\n\n## 1.配置表的设计（元数据表）\n首先我们需要一张配置表，来保存我们要增量同步的表的基本信息\n``` sql\n--元数据表\ncreate table tm_etl_table(\n\ttable_name varchar(50), --表名\n\tis_run int , --调度状态\n\tupdate_time timestamp,--表数据更新时间\n\tetl_insert_time timestamp --记录更新时间\n);\n```\n我们初始化一条记录，我们就以这张ods_tm_book表\n![Kettle-handbook-05-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-01.png-blog.photo)\n一些基础表准备\n\n<!-- more -->\n\n``` sql\n-- 源表\ncreate table tm_book(id int,book_name varchar(10),latest_time timestamp);\n\n-- 源表数据初始化\ninsert into tm_book(id,book_name,latest_time)\nselect x,x||'_name',clock_timestamp() from generate_series(1,10) x;\n\n-- 目标表和中间表\ncreate table ods_tm_book(id int,book_name varchar(10),latest_time timestamp,etl_insert_time timestamp);\ncreate table staging_tm_book(id int,book_name varchar(10),latest_time timestamp);\n```\n\n源表中的数据\n![Kettle-handbook-05-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-02.png-blog.photo)\n\n## 2.同步数据的流程开发\n整体流程是这样的，注意下，这个只是为了简单演示了这个增量的例子，实际应用的话得修改，这是有漏洞的。\n![Kettle-handbook-05-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-03.png-blog.photo)\n\n### 2.1更新元数据表的状态并获取表更新时间\n就是我们第一个状态，我们更新tm_etl_table表，更新is_run=0，表示我们开始同步数据了，update_time，初始化为 ‘1970-01-01’，表示我们要拉取所有的数据\n![Kettle-handbook-05-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-04.png-blog.photo)\n![Kettle-handbook-05-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-05.png-blog.photo)\n这里，我们将该表的更新时间作为变量，我们会在后面的转换中使用\n![Kettle-handbook-05-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-06.png-blog.photo)\n\n### 2.2 加载数据到中间表\n我们这里，直接表对表，将数据插入到staging\n![Kettle-handbook-05-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-07.png-blog.photo)\n其中，表输入中，我们需要根据前面的更新时间变量，获取增量数据，注意，需要勾选上“替换SQL语句中的变量”\n![Kettle-handbook-05-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-08.png-blog.photo)\n这里，我们直接就表输出到中间表，每次都需将清空表数据\n![Kettle-handbook-05-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-09.png-blog.photo)\n\n### 2.3 加载数据到目标表\n![Kettle-handbook-05-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-10.png-blog.photo)\n这里，主要有3段脚本（为了方便，就这样吧），根据主键ID，清空目标表数据，然后，将数据插入到目标表，最后，更新tm_etl_table表中的记录状态\n![Kettle-handbook-05-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-11.png-blog.photo)\n好了，用Kettle实现一个增量的逻辑大概就是这样了，\n\n## 3.小结\n\n这里整理几个问题\n\n### 3.1 中间表\n这里的话，使用了中间表，Kettle中是有一个控件的，应该叫那个“插入/更新”，可以根据主键将数据更新掉，这个控件之前使用时，发现很慢，就一直没用，后面的话，可能会写个例子，简单测试看看。使用中间表，缓存下数据，也是不错的方法。\n\n### 3.2 增量流程\n目前公司中，增量抽取，是这样的，首先各个业务系统的数据导出到文本文件，然后批量将文件加载到数据仓库中（这里使用循环加载的）。因为每天的数据量比较大，如果知己到表的话，会很慢，使用文件，一些数据库都有批量加载的命令，很快很方便，比如：PostgreSQL中的copy命令，Greenplum中的外部表，还有Mysql中的load data等等。\n\n\n\n","slug":"Kettle-handbook-05","published":1,"updated":"2017-08-27T13:11:40.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1b3000288inl3t8xbxw","content":"<p>综合前面的几个例子，我们这里来是实现下增量数据的同步。<br>这里只是分享一种方法，实际工作中，还会有其他更好的方案。<br>增量同步的整体思路一般就是：首先拿到这张表的增量数据，怎么拿增量呢，源表需要有一个时间字段，代表该条记录的最新更新时间（及只要该条记录变化，该时间字段就会更新），当然有时间字段最好了，没有的话，可能需要做全表对比之类的操作；正常情况下，业务系统的表中都是有主键的，我们拿到增量数据之后，需要判断该记录的新插入的，还是更新的记录，如果是更新记录，我们需要先将数据加载到中间表，然后，根据主键将目标表中已存在的数据删除，最后再将本次的增量数据插入到目标表。</p>\n<h2 id=\"1-配置表的设计（元数据表）\"><a href=\"#1-配置表的设计（元数据表）\" class=\"headerlink\" title=\"1.配置表的设计（元数据表）\"></a>1.配置表的设计（元数据表）</h2><p>首先我们需要一张配置表，来保存我们要增量同步的表的基本信息<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">--元数据表</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tm_etl_table(</div><div class=\"line\">\ttable_name <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>), <span class=\"comment\">--表名</span></div><div class=\"line\">\tis_run <span class=\"built_in\">int</span> , <span class=\"comment\">--调度状态</span></div><div class=\"line\">\tupdate_time <span class=\"keyword\">timestamp</span>,<span class=\"comment\">--表数据更新时间</span></div><div class=\"line\">\tetl_insert_time <span class=\"keyword\">timestamp</span> <span class=\"comment\">--记录更新时间</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>我们初始化一条记录，我们就以这张ods_tm_book表<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-01.png-blog.photo\" alt=\"Kettle-handbook-05-01.png\"><br>一些基础表准备</p>\n<a id=\"more\"></a>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 源表</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tm_book(<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,book_name <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>),latest_time <span class=\"keyword\">timestamp</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">-- 源表数据初始化</span></div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tm_book(<span class=\"keyword\">id</span>,book_name,latest_time)</div><div class=\"line\"><span class=\"keyword\">select</span> x,x||<span class=\"string\">'_name'</span>,clock_timestamp() <span class=\"keyword\">from</span> generate_series(<span class=\"number\">1</span>,<span class=\"number\">10</span>) x;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">-- 目标表和中间表</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> ods_tm_book(<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,book_name <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>),latest_time <span class=\"keyword\">timestamp</span>,etl_insert_time <span class=\"keyword\">timestamp</span>);</div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> staging_tm_book(<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,book_name <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>),latest_time <span class=\"keyword\">timestamp</span>);</div></pre></td></tr></table></figure>\n<p>源表中的数据<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-02.png-blog.photo\" alt=\"Kettle-handbook-05-02.png\"></p>\n<h2 id=\"2-同步数据的流程开发\"><a href=\"#2-同步数据的流程开发\" class=\"headerlink\" title=\"2.同步数据的流程开发\"></a>2.同步数据的流程开发</h2><p>整体流程是这样的，注意下，这个只是为了简单演示了这个增量的例子，实际应用的话得修改，这是有漏洞的。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-03.png-blog.photo\" alt=\"Kettle-handbook-05-03.png\"></p>\n<h3 id=\"2-1更新元数据表的状态并获取表更新时间\"><a href=\"#2-1更新元数据表的状态并获取表更新时间\" class=\"headerlink\" title=\"2.1更新元数据表的状态并获取表更新时间\"></a>2.1更新元数据表的状态并获取表更新时间</h3><p>就是我们第一个状态，我们更新tm_etl_table表，更新is_run=0，表示我们开始同步数据了，update_time，初始化为 ‘1970-01-01’，表示我们要拉取所有的数据<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-04.png-blog.photo\" alt=\"Kettle-handbook-05-04.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-05.png-blog.photo\" alt=\"Kettle-handbook-05-05.png\"><br>这里，我们将该表的更新时间作为变量，我们会在后面的转换中使用<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-06.png-blog.photo\" alt=\"Kettle-handbook-05-06.png\"></p>\n<h3 id=\"2-2-加载数据到中间表\"><a href=\"#2-2-加载数据到中间表\" class=\"headerlink\" title=\"2.2 加载数据到中间表\"></a>2.2 加载数据到中间表</h3><p>我们这里，直接表对表，将数据插入到staging<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-07.png-blog.photo\" alt=\"Kettle-handbook-05-07.png\"><br>其中，表输入中，我们需要根据前面的更新时间变量，获取增量数据，注意，需要勾选上“替换SQL语句中的变量”<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-08.png-blog.photo\" alt=\"Kettle-handbook-05-08.png\"><br>这里，我们直接就表输出到中间表，每次都需将清空表数据<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-09.png-blog.photo\" alt=\"Kettle-handbook-05-09.png\"></p>\n<h3 id=\"2-3-加载数据到目标表\"><a href=\"#2-3-加载数据到目标表\" class=\"headerlink\" title=\"2.3 加载数据到目标表\"></a>2.3 加载数据到目标表</h3><p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-10.png-blog.photo\" alt=\"Kettle-handbook-05-10.png\"><br>这里，主要有3段脚本（为了方便，就这样吧），根据主键ID，清空目标表数据，然后，将数据插入到目标表，最后，更新tm_etl_table表中的记录状态<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-11.png-blog.photo\" alt=\"Kettle-handbook-05-11.png\"><br>好了，用Kettle实现一个增量的逻辑大概就是这样了，</p>\n<h2 id=\"3-小结\"><a href=\"#3-小结\" class=\"headerlink\" title=\"3.小结\"></a>3.小结</h2><p>这里整理几个问题</p>\n<h3 id=\"3-1-中间表\"><a href=\"#3-1-中间表\" class=\"headerlink\" title=\"3.1 中间表\"></a>3.1 中间表</h3><p>这里的话，使用了中间表，Kettle中是有一个控件的，应该叫那个“插入/更新”，可以根据主键将数据更新掉，这个控件之前使用时，发现很慢，就一直没用，后面的话，可能会写个例子，简单测试看看。使用中间表，缓存下数据，也是不错的方法。</p>\n<h3 id=\"3-2-增量流程\"><a href=\"#3-2-增量流程\" class=\"headerlink\" title=\"3.2 增量流程\"></a>3.2 增量流程</h3><p>目前公司中，增量抽取，是这样的，首先各个业务系统的数据导出到文本文件，然后批量将文件加载到数据仓库中（这里使用循环加载的）。因为每天的数据量比较大，如果知己到表的话，会很慢，使用文件，一些数据库都有批量加载的命令，很快很方便，比如：PostgreSQL中的copy命令，Greenplum中的外部表，还有Mysql中的load data等等。</p>\n","site":{"data":{}},"excerpt":"<p>综合前面的几个例子，我们这里来是实现下增量数据的同步。<br>这里只是分享一种方法，实际工作中，还会有其他更好的方案。<br>增量同步的整体思路一般就是：首先拿到这张表的增量数据，怎么拿增量呢，源表需要有一个时间字段，代表该条记录的最新更新时间（及只要该条记录变化，该时间字段就会更新），当然有时间字段最好了，没有的话，可能需要做全表对比之类的操作；正常情况下，业务系统的表中都是有主键的，我们拿到增量数据之后，需要判断该记录的新插入的，还是更新的记录，如果是更新记录，我们需要先将数据加载到中间表，然后，根据主键将目标表中已存在的数据删除，最后再将本次的增量数据插入到目标表。</p>\n<h2 id=\"1-配置表的设计（元数据表）\"><a href=\"#1-配置表的设计（元数据表）\" class=\"headerlink\" title=\"1.配置表的设计（元数据表）\"></a>1.配置表的设计（元数据表）</h2><p>首先我们需要一张配置表，来保存我们要增量同步的表的基本信息<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">--元数据表</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tm_etl_table(</div><div class=\"line\">\ttable_name <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>), <span class=\"comment\">--表名</span></div><div class=\"line\">\tis_run <span class=\"built_in\">int</span> , <span class=\"comment\">--调度状态</span></div><div class=\"line\">\tupdate_time <span class=\"keyword\">timestamp</span>,<span class=\"comment\">--表数据更新时间</span></div><div class=\"line\">\tetl_insert_time <span class=\"keyword\">timestamp</span> <span class=\"comment\">--记录更新时间</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>我们初始化一条记录，我们就以这张ods_tm_book表<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-01.png-blog.photo\" alt=\"Kettle-handbook-05-01.png\"><br>一些基础表准备</p>","more":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 源表</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tm_book(<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,book_name <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>),latest_time <span class=\"keyword\">timestamp</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">-- 源表数据初始化</span></div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tm_book(<span class=\"keyword\">id</span>,book_name,latest_time)</div><div class=\"line\"><span class=\"keyword\">select</span> x,x||<span class=\"string\">'_name'</span>,clock_timestamp() <span class=\"keyword\">from</span> generate_series(<span class=\"number\">1</span>,<span class=\"number\">10</span>) x;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">-- 目标表和中间表</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> ods_tm_book(<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,book_name <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>),latest_time <span class=\"keyword\">timestamp</span>,etl_insert_time <span class=\"keyword\">timestamp</span>);</div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> staging_tm_book(<span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,book_name <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>),latest_time <span class=\"keyword\">timestamp</span>);</div></pre></td></tr></table></figure>\n<p>源表中的数据<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-02.png-blog.photo\" alt=\"Kettle-handbook-05-02.png\"></p>\n<h2 id=\"2-同步数据的流程开发\"><a href=\"#2-同步数据的流程开发\" class=\"headerlink\" title=\"2.同步数据的流程开发\"></a>2.同步数据的流程开发</h2><p>整体流程是这样的，注意下，这个只是为了简单演示了这个增量的例子，实际应用的话得修改，这是有漏洞的。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-03.png-blog.photo\" alt=\"Kettle-handbook-05-03.png\"></p>\n<h3 id=\"2-1更新元数据表的状态并获取表更新时间\"><a href=\"#2-1更新元数据表的状态并获取表更新时间\" class=\"headerlink\" title=\"2.1更新元数据表的状态并获取表更新时间\"></a>2.1更新元数据表的状态并获取表更新时间</h3><p>就是我们第一个状态，我们更新tm_etl_table表，更新is_run=0，表示我们开始同步数据了，update_time，初始化为 ‘1970-01-01’，表示我们要拉取所有的数据<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-04.png-blog.photo\" alt=\"Kettle-handbook-05-04.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-05.png-blog.photo\" alt=\"Kettle-handbook-05-05.png\"><br>这里，我们将该表的更新时间作为变量，我们会在后面的转换中使用<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-06.png-blog.photo\" alt=\"Kettle-handbook-05-06.png\"></p>\n<h3 id=\"2-2-加载数据到中间表\"><a href=\"#2-2-加载数据到中间表\" class=\"headerlink\" title=\"2.2 加载数据到中间表\"></a>2.2 加载数据到中间表</h3><p>我们这里，直接表对表，将数据插入到staging<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-07.png-blog.photo\" alt=\"Kettle-handbook-05-07.png\"><br>其中，表输入中，我们需要根据前面的更新时间变量，获取增量数据，注意，需要勾选上“替换SQL语句中的变量”<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-08.png-blog.photo\" alt=\"Kettle-handbook-05-08.png\"><br>这里，我们直接就表输出到中间表，每次都需将清空表数据<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-09.png-blog.photo\" alt=\"Kettle-handbook-05-09.png\"></p>\n<h3 id=\"2-3-加载数据到目标表\"><a href=\"#2-3-加载数据到目标表\" class=\"headerlink\" title=\"2.3 加载数据到目标表\"></a>2.3 加载数据到目标表</h3><p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-10.png-blog.photo\" alt=\"Kettle-handbook-05-10.png\"><br>这里，主要有3段脚本（为了方便，就这样吧），根据主键ID，清空目标表数据，然后，将数据插入到目标表，最后，更新tm_etl_table表中的记录状态<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-05-11.png-blog.photo\" alt=\"Kettle-handbook-05-11.png\"><br>好了，用Kettle实现一个增量的逻辑大概就是这样了，</p>\n<h2 id=\"3-小结\"><a href=\"#3-小结\" class=\"headerlink\" title=\"3.小结\"></a>3.小结</h2><p>这里整理几个问题</p>\n<h3 id=\"3-1-中间表\"><a href=\"#3-1-中间表\" class=\"headerlink\" title=\"3.1 中间表\"></a>3.1 中间表</h3><p>这里的话，使用了中间表，Kettle中是有一个控件的，应该叫那个“插入/更新”，可以根据主键将数据更新掉，这个控件之前使用时，发现很慢，就一直没用，后面的话，可能会写个例子，简单测试看看。使用中间表，缓存下数据，也是不错的方法。</p>\n<h3 id=\"3-2-增量流程\"><a href=\"#3-2-增量流程\" class=\"headerlink\" title=\"3.2 增量流程\"></a>3.2 增量流程</h3><p>目前公司中，增量抽取，是这样的，首先各个业务系统的数据导出到文本文件，然后批量将文件加载到数据仓库中（这里使用循环加载的）。因为每天的数据量比较大，如果知己到表的话，会很慢，使用文件，一些数据库都有批量加载的命令，很快很方便，比如：PostgreSQL中的copy命令，Greenplum中的外部表，还有Mysql中的load data等等。</p>"},{"title":"Kettle手册（三）- 配置文件的使用及密码加密","date":"2017-03-28T14:24:44.000Z","_content":"好了，我们上一回，练习了一个从数据库导出数据到Excel的例子，我们想一下，如果有很多个转换，我们没链接一次数据库，是不是都需要重复的输入那些数据库地址啊，数据库啊，用户名啊之类的。其实是不用的，我们可以使用变量的方式，写在配置文件中，下面，我们来看看。而且，我们平时开发，都有开发环境、UAT环境、生产环境，连接的地址都不一样，也不可能手动的去修改。\n\n{% note primary %} \n## 1. Kettle的配置文件\n{% endnote %}\n\n配置文件在哪呢？Windows下，是再当前用户的目录下，一般再C盘，Users下面，有一个当前用户的文件夹，下面有.kettle文件夹\n![Kettle-handbook-03-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-01.png-blog.photo)\n进入之后，我们会看到一个kettle.properties的文件，我们的数据库配置信息，就可以放在这里，\n![Kettle-handbook-03-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-02.png-blog.photo)\n\n<!-- more -->\n\n我们打开之后，编辑一下\n![Kettle-handbook-03-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-03.png-blog.photo)\n保存后，我们要重新启动下Kettle，因为这个配置文件是启动时加载的\n重启后，我们将上一次，配置的转换打开，使用变量替换下之前的配置，Kettle中，我们使用${xxx}，表示引用一个变量，执行时，会自动替换\n![Kettle-handbook-03-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-07.png-blog.photo)\n我们测试下，同样时可以成功的。\n![Kettle-handbook-03-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-08.png-blog.photo)\n好了，这样，以后，不管是，数据库地址变化，还是部署生产，我们只需要修改配置文件就可以了。\n\n{% note primary %} \n## 2. 密码加密\n{% endnote %}\n\n这里，顺便说下，加密的问题，比如，我们上面的数据库密码，是明文的，这样是不太安全的，而实际上，我们都是需要对密码进行加密的\n我们进到Kettle的安装目录\n![Kettle-handbook-03-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-04.png-blog.photo)\n我们会看到，这里有一个Encr.bat，这就是可以加密的脚本\n使用方法\n![Kettle-handbook-03-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-06.png-blog.photo)\n我们输入\n``` bash\nEncr.bat -kettle postgres\n```\n执行后，会生成，这样一个加密后的密码，然后，我们可以使用这个加密后的字符串，替换我们的密码\n![Kettle-handbook-03-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-05.png-blog.photo)\n``` bash\npg_password = Encrypted 2be98afc86aa7f2e4cb79ff228dc6fa8c\n```\n大家可以试下，这样也是可以的，好了，这个例子就到这。\n\n\n\n\n\n\n\n\n\n","source":"_posts/2017-03-28-Kettle-handbook-03.md","raw":"---\ntitle: Kettle手册（三）- 配置文件的使用及密码加密\ndate: 2017-03-28 22:24:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n好了，我们上一回，练习了一个从数据库导出数据到Excel的例子，我们想一下，如果有很多个转换，我们没链接一次数据库，是不是都需要重复的输入那些数据库地址啊，数据库啊，用户名啊之类的。其实是不用的，我们可以使用变量的方式，写在配置文件中，下面，我们来看看。而且，我们平时开发，都有开发环境、UAT环境、生产环境，连接的地址都不一样，也不可能手动的去修改。\n\n{% note primary %} \n## 1. Kettle的配置文件\n{% endnote %}\n\n配置文件在哪呢？Windows下，是再当前用户的目录下，一般再C盘，Users下面，有一个当前用户的文件夹，下面有.kettle文件夹\n![Kettle-handbook-03-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-01.png-blog.photo)\n进入之后，我们会看到一个kettle.properties的文件，我们的数据库配置信息，就可以放在这里，\n![Kettle-handbook-03-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-02.png-blog.photo)\n\n<!-- more -->\n\n我们打开之后，编辑一下\n![Kettle-handbook-03-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-03.png-blog.photo)\n保存后，我们要重新启动下Kettle，因为这个配置文件是启动时加载的\n重启后，我们将上一次，配置的转换打开，使用变量替换下之前的配置，Kettle中，我们使用${xxx}，表示引用一个变量，执行时，会自动替换\n![Kettle-handbook-03-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-07.png-blog.photo)\n我们测试下，同样时可以成功的。\n![Kettle-handbook-03-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-08.png-blog.photo)\n好了，这样，以后，不管是，数据库地址变化，还是部署生产，我们只需要修改配置文件就可以了。\n\n{% note primary %} \n## 2. 密码加密\n{% endnote %}\n\n这里，顺便说下，加密的问题，比如，我们上面的数据库密码，是明文的，这样是不太安全的，而实际上，我们都是需要对密码进行加密的\n我们进到Kettle的安装目录\n![Kettle-handbook-03-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-04.png-blog.photo)\n我们会看到，这里有一个Encr.bat，这就是可以加密的脚本\n使用方法\n![Kettle-handbook-03-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-06.png-blog.photo)\n我们输入\n``` bash\nEncr.bat -kettle postgres\n```\n执行后，会生成，这样一个加密后的密码，然后，我们可以使用这个加密后的字符串，替换我们的密码\n![Kettle-handbook-03-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-05.png-blog.photo)\n``` bash\npg_password = Encrypted 2be98afc86aa7f2e4cb79ff228dc6fa8c\n```\n大家可以试下，这样也是可以的，好了，这个例子就到这。\n\n\n\n\n\n\n\n\n\n","slug":"Kettle-handbook-03","published":1,"updated":"2017-08-26T15:39:56.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1bh000688indzeqzsav","content":"<p>好了，我们上一回，练习了一个从数据库导出数据到Excel的例子，我们想一下，如果有很多个转换，我们没链接一次数据库，是不是都需要重复的输入那些数据库地址啊，数据库啊，用户名啊之类的。其实是不用的，我们可以使用变量的方式，写在配置文件中，下面，我们来看看。而且，我们平时开发，都有开发环境、UAT环境、生产环境，连接的地址都不一样，也不可能手动的去修改。</p>\n<div class=\"note primary\"><h2 id=\"1-Kettle的配置文件\"><a href=\"#1-Kettle的配置文件\" class=\"headerlink\" title=\"1. Kettle的配置文件\"></a>1. Kettle的配置文件</h2></div>\n<p>配置文件在哪呢？Windows下，是再当前用户的目录下，一般再C盘，Users下面，有一个当前用户的文件夹，下面有.kettle文件夹<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-01.png-blog.photo\" alt=\"Kettle-handbook-03-01.png\"><br>进入之后，我们会看到一个kettle.properties的文件，我们的数据库配置信息，就可以放在这里，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-02.png-blog.photo\" alt=\"Kettle-handbook-03-02.png\"></p>\n<a id=\"more\"></a>\n<p>我们打开之后，编辑一下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-03.png-blog.photo\" alt=\"Kettle-handbook-03-03.png\"><br>保存后，我们要重新启动下Kettle，因为这个配置文件是启动时加载的<br>重启后，我们将上一次，配置的转换打开，使用变量替换下之前的配置，Kettle中，我们使用${xxx}，表示引用一个变量，执行时，会自动替换<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-07.png-blog.photo\" alt=\"Kettle-handbook-03-07.png\"><br>我们测试下，同样时可以成功的。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-08.png-blog.photo\" alt=\"Kettle-handbook-03-08.png\"><br>好了，这样，以后，不管是，数据库地址变化，还是部署生产，我们只需要修改配置文件就可以了。</p>\n<div class=\"note primary\"><h2 id=\"2-密码加密\"><a href=\"#2-密码加密\" class=\"headerlink\" title=\"2. 密码加密\"></a>2. 密码加密</h2></div>\n<p>这里，顺便说下，加密的问题，比如，我们上面的数据库密码，是明文的，这样是不太安全的，而实际上，我们都是需要对密码进行加密的<br>我们进到Kettle的安装目录<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-04.png-blog.photo\" alt=\"Kettle-handbook-03-04.png\"><br>我们会看到，这里有一个Encr.bat，这就是可以加密的脚本<br>使用方法<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-06.png-blog.photo\" alt=\"Kettle-handbook-03-06.png\"><br>我们输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Encr.bat -kettle postgres</div></pre></td></tr></table></figure></p>\n<p>执行后，会生成，这样一个加密后的密码，然后，我们可以使用这个加密后的字符串，替换我们的密码<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-05.png-blog.photo\" alt=\"Kettle-handbook-03-05.png\"><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pg_password = Encrypted 2be98afc86aa7f2e4cb79ff228dc6fa8c</div></pre></td></tr></table></figure></p>\n<p>大家可以试下，这样也是可以的，好了，这个例子就到这。</p>\n","site":{"data":{}},"excerpt":"<p>好了，我们上一回，练习了一个从数据库导出数据到Excel的例子，我们想一下，如果有很多个转换，我们没链接一次数据库，是不是都需要重复的输入那些数据库地址啊，数据库啊，用户名啊之类的。其实是不用的，我们可以使用变量的方式，写在配置文件中，下面，我们来看看。而且，我们平时开发，都有开发环境、UAT环境、生产环境，连接的地址都不一样，也不可能手动的去修改。</p>\n<div class=\"note primary\"><h2 id=\"1-Kettle的配置文件\"><a href=\"#1-Kettle的配置文件\" class=\"headerlink\" title=\"1. Kettle的配置文件\"></a>1. Kettle的配置文件</h2></div>\n<p>配置文件在哪呢？Windows下，是再当前用户的目录下，一般再C盘，Users下面，有一个当前用户的文件夹，下面有.kettle文件夹<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-01.png-blog.photo\" alt=\"Kettle-handbook-03-01.png\"><br>进入之后，我们会看到一个kettle.properties的文件，我们的数据库配置信息，就可以放在这里，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-02.png-blog.photo\" alt=\"Kettle-handbook-03-02.png\"></p>","more":"<p>我们打开之后，编辑一下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-03.png-blog.photo\" alt=\"Kettle-handbook-03-03.png\"><br>保存后，我们要重新启动下Kettle，因为这个配置文件是启动时加载的<br>重启后，我们将上一次，配置的转换打开，使用变量替换下之前的配置，Kettle中，我们使用${xxx}，表示引用一个变量，执行时，会自动替换<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-07.png-blog.photo\" alt=\"Kettle-handbook-03-07.png\"><br>我们测试下，同样时可以成功的。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-08.png-blog.photo\" alt=\"Kettle-handbook-03-08.png\"><br>好了，这样，以后，不管是，数据库地址变化，还是部署生产，我们只需要修改配置文件就可以了。</p>\n<div class=\"note primary\"><h2 id=\"2-密码加密\"><a href=\"#2-密码加密\" class=\"headerlink\" title=\"2. 密码加密\"></a>2. 密码加密</h2></div>\n<p>这里，顺便说下，加密的问题，比如，我们上面的数据库密码，是明文的，这样是不太安全的，而实际上，我们都是需要对密码进行加密的<br>我们进到Kettle的安装目录<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-04.png-blog.photo\" alt=\"Kettle-handbook-03-04.png\"><br>我们会看到，这里有一个Encr.bat，这就是可以加密的脚本<br>使用方法<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-06.png-blog.photo\" alt=\"Kettle-handbook-03-06.png\"><br>我们输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Encr.bat -kettle postgres</div></pre></td></tr></table></figure></p>\n<p>执行后，会生成，这样一个加密后的密码，然后，我们可以使用这个加密后的字符串，替换我们的密码<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-03-05.png-blog.photo\" alt=\"Kettle-handbook-03-05.png\"><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pg_password = Encrypted 2be98afc86aa7f2e4cb79ff228dc6fa8c</div></pre></td></tr></table></figure></p>\n<p>大家可以试下，这样也是可以的，好了，这个例子就到这。</p>"},{"title":"Kettle手册（二）- 将数据导出为Excel","date":"2017-03-27T15:24:44.000Z","_content":"好了，我们先来看第一个例子，就是怎样将数据库中的数据，导出为Excel。\n平时，如果我们需要将数据导出Excel的话，我们可能会直接复制，然后粘贴出来，但是数据量大的话，就不好用了；\n或者使用Java等开发语言，写代码，导出Excel；或者一些数据库连接工具自带的导出功能。\n其实，我们用Kettle的话，还是很方便的，但是平时用下来，Kettle的这个功能还是有些缺陷的，比如导出Excel2007+的时候，经常会报错，我一直也没有解决，这次记录博客顺便研究看看。\n\n{% note primary %} \n# 1. Kettle的下载及使用\n{% endnote %}\n\n正式开始之前，我们简单说下Kettle的安装配置啥的，Kettle是绿色的，下载之后，直接运行就可以了\n刚刚在网上下了个最新版的，后面，我们就是用这个7.0版本介绍官网地址：[Kettle官网](http://community.pentaho.com/projects/data-integration/)\n\t\n![Kettle-handbook-02-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-01.png-blog.photo)\n\n<!-- more -->\n\n他这个网站，应该是不太好访问，有VPN的话，可以用起来，下载的话，大概800M左右，后面看看上传一份，昨天为了下载，现冲了个蓝灯的会员\n解压以后，\n![Kettle-handbook-02-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-02.png-blog.photo)\n目录大概是这样的，我们会看到，这里有.bat文件和.sh文件，.bat就是我们在windows下使用的，.sh就是在Linux下使用的，我们找到 Spoon.bat这个文件，就可以启动Kettle了，奥，对了，得先安装下Java\n![Kettle-handbook-02-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-03.png-blog.photo)\n打开后，就是这样了，都是图形界面的，很好用\n![Kettle-handbook-02-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-04.png-blog.photo)\nKettle中，主要有2中任务，一个是作业，一个是转换。一般来说，转换是一系列具体的操作，比如：调度SP，导出Excel等等；作业的话，就是按照一定流程来调度一系列转换。大概是这样，实际上，他们也是可以嵌套调用的，我们后面可以再讨论。\n\n{% note primary %} \n# 2. 第一个转换-将数据导出为Excel\n{% endnote %}\n\n为了实现这个功能，我们需要：\n1. 连接到数据库\n2. 导出为Excel\n\n首先，我们新建一个转换，\n![Kettle-handbook-02-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-05.png-blog.photo)\n新建，之后，我们可以看到，工具箱中，有很多的控件，我们都可以使用，\n![Kettle-handbook-02-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-06.png-blog.photo)\n很多我也没有用过，大家可以自行去尝试使用\n好了，下面，我们就开始介绍我们这次的主题，导出数据到Excel\n既然，是导出数据，说明我们肯定有一个源头，一个目标，源头是我们的一个数据库，我们得先连接到这个数据库\n## 新建数据库连接\n我们在主对象库中，DB连接上，右键单击，新建\n![Kettle-handbook-02-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-07.png-blog.photo)\n在这里呢，我们可以看到，有很多的数据库可以选择，我们只需要填写基本的连接信息就可以了\n![Kettle-handbook-02-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-08.png-blog.photo)\n我们这里连接的是Postgresql，配置好后，测试下，（坑，刚刚在windows上装的数据库，一直连不上，白名单都加好了，就是不行，结果是防火墙忘关了。。）\n![Kettle-handbook-02-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-09.png-blog.photo)\n好了，可以连接到数据库了，下面，我们得把数据导出啊，我们需要使用输入这个控件\n输入下面，有很多的控件，我们这次只使用表输入，因为我们是直接从数据库中拿数据\n![Kettle-handbook-02-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-10.png-blog.photo)\n这里直接就是拖拽的，拖过去就行了，双击之后，可以编辑，这里我们就使用刚才的数据源连接，然后查询一张表，\n![Kettle-handbook-02-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-11.png-blog.photo)\n表的话，随便create一张就可以了，我们还可以预览数据\n![Kettle-handbook-02-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-12.png-blog.photo)\n源头好了，同样的思路，我们需要一个目标，就是输出了，输出到Excel\n![Kettle-handbook-02-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-13.png-blog.photo)\n同样的，我们托好之后，双击就可以编辑了，这里，我们主要关注2个配置，一个是excel保存地址，和字段\n![Kettle-handbook-02-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-14.png-blog.photo)\n我们选择一个地址，然后得，看下字段那个tab，\n我们单击，获取字段，就可以从源头获取表中的字段了，当然，我们可以只导出，我们需要的字段，\n![Kettle-handbook-02-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-15.png-blog.photo)\n一步一步来的话，上面获取，可能会获取不到，因为，有一步，需要将2个控件，连起来，源头有了，目标也有了，得让他们关联起来啊，再Kettle中，这个连线叫做Hop（跳），就像一个管道一样，将数据流从一个点，指向另一个点。\n![Kettle-handbook-02-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-16.png-blog.photo)\n都好了，以后，我们就运行下\n![Kettle-handbook-02-17.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-17.png-blog.photo)\n和Java里面，一样，绿色的话，就代表成功了\n![Kettle-handbook-02-19.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-19.png-blog.photo)\n我们看下文件\n![Kettle-handbook-02-18.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-18.png-blog.photo)\n好了，我们的第一个例子，就成功了，还是很简单的，主要就是Kettle中控件的熟悉。\n\n\n\n\n\n\n\n\n\n","source":"_posts/2017-03-27-Kettle-handbook-02.md","raw":"---\ntitle: Kettle手册（二）- 将数据导出为Excel\ndate: 2017-03-27 23:24:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n好了，我们先来看第一个例子，就是怎样将数据库中的数据，导出为Excel。\n平时，如果我们需要将数据导出Excel的话，我们可能会直接复制，然后粘贴出来，但是数据量大的话，就不好用了；\n或者使用Java等开发语言，写代码，导出Excel；或者一些数据库连接工具自带的导出功能。\n其实，我们用Kettle的话，还是很方便的，但是平时用下来，Kettle的这个功能还是有些缺陷的，比如导出Excel2007+的时候，经常会报错，我一直也没有解决，这次记录博客顺便研究看看。\n\n{% note primary %} \n# 1. Kettle的下载及使用\n{% endnote %}\n\n正式开始之前，我们简单说下Kettle的安装配置啥的，Kettle是绿色的，下载之后，直接运行就可以了\n刚刚在网上下了个最新版的，后面，我们就是用这个7.0版本介绍官网地址：[Kettle官网](http://community.pentaho.com/projects/data-integration/)\n\t\n![Kettle-handbook-02-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-01.png-blog.photo)\n\n<!-- more -->\n\n他这个网站，应该是不太好访问，有VPN的话，可以用起来，下载的话，大概800M左右，后面看看上传一份，昨天为了下载，现冲了个蓝灯的会员\n解压以后，\n![Kettle-handbook-02-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-02.png-blog.photo)\n目录大概是这样的，我们会看到，这里有.bat文件和.sh文件，.bat就是我们在windows下使用的，.sh就是在Linux下使用的，我们找到 Spoon.bat这个文件，就可以启动Kettle了，奥，对了，得先安装下Java\n![Kettle-handbook-02-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-03.png-blog.photo)\n打开后，就是这样了，都是图形界面的，很好用\n![Kettle-handbook-02-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-04.png-blog.photo)\nKettle中，主要有2中任务，一个是作业，一个是转换。一般来说，转换是一系列具体的操作，比如：调度SP，导出Excel等等；作业的话，就是按照一定流程来调度一系列转换。大概是这样，实际上，他们也是可以嵌套调用的，我们后面可以再讨论。\n\n{% note primary %} \n# 2. 第一个转换-将数据导出为Excel\n{% endnote %}\n\n为了实现这个功能，我们需要：\n1. 连接到数据库\n2. 导出为Excel\n\n首先，我们新建一个转换，\n![Kettle-handbook-02-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-05.png-blog.photo)\n新建，之后，我们可以看到，工具箱中，有很多的控件，我们都可以使用，\n![Kettle-handbook-02-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-06.png-blog.photo)\n很多我也没有用过，大家可以自行去尝试使用\n好了，下面，我们就开始介绍我们这次的主题，导出数据到Excel\n既然，是导出数据，说明我们肯定有一个源头，一个目标，源头是我们的一个数据库，我们得先连接到这个数据库\n## 新建数据库连接\n我们在主对象库中，DB连接上，右键单击，新建\n![Kettle-handbook-02-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-07.png-blog.photo)\n在这里呢，我们可以看到，有很多的数据库可以选择，我们只需要填写基本的连接信息就可以了\n![Kettle-handbook-02-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-08.png-blog.photo)\n我们这里连接的是Postgresql，配置好后，测试下，（坑，刚刚在windows上装的数据库，一直连不上，白名单都加好了，就是不行，结果是防火墙忘关了。。）\n![Kettle-handbook-02-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-09.png-blog.photo)\n好了，可以连接到数据库了，下面，我们得把数据导出啊，我们需要使用输入这个控件\n输入下面，有很多的控件，我们这次只使用表输入，因为我们是直接从数据库中拿数据\n![Kettle-handbook-02-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-10.png-blog.photo)\n这里直接就是拖拽的，拖过去就行了，双击之后，可以编辑，这里我们就使用刚才的数据源连接，然后查询一张表，\n![Kettle-handbook-02-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-11.png-blog.photo)\n表的话，随便create一张就可以了，我们还可以预览数据\n![Kettle-handbook-02-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-12.png-blog.photo)\n源头好了，同样的思路，我们需要一个目标，就是输出了，输出到Excel\n![Kettle-handbook-02-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-13.png-blog.photo)\n同样的，我们托好之后，双击就可以编辑了，这里，我们主要关注2个配置，一个是excel保存地址，和字段\n![Kettle-handbook-02-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-14.png-blog.photo)\n我们选择一个地址，然后得，看下字段那个tab，\n我们单击，获取字段，就可以从源头获取表中的字段了，当然，我们可以只导出，我们需要的字段，\n![Kettle-handbook-02-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-15.png-blog.photo)\n一步一步来的话，上面获取，可能会获取不到，因为，有一步，需要将2个控件，连起来，源头有了，目标也有了，得让他们关联起来啊，再Kettle中，这个连线叫做Hop（跳），就像一个管道一样，将数据流从一个点，指向另一个点。\n![Kettle-handbook-02-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-16.png-blog.photo)\n都好了，以后，我们就运行下\n![Kettle-handbook-02-17.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-17.png-blog.photo)\n和Java里面，一样，绿色的话，就代表成功了\n![Kettle-handbook-02-19.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-19.png-blog.photo)\n我们看下文件\n![Kettle-handbook-02-18.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-18.png-blog.photo)\n好了，我们的第一个例子，就成功了，还是很简单的，主要就是Kettle中控件的熟悉。\n\n\n\n\n\n\n\n\n\n","slug":"Kettle-handbook-02","published":1,"updated":"2017-08-26T16:02:23.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1bn000888inz6ozztz6","content":"<p>好了，我们先来看第一个例子，就是怎样将数据库中的数据，导出为Excel。<br>平时，如果我们需要将数据导出Excel的话，我们可能会直接复制，然后粘贴出来，但是数据量大的话，就不好用了；<br>或者使用Java等开发语言，写代码，导出Excel；或者一些数据库连接工具自带的导出功能。<br>其实，我们用Kettle的话，还是很方便的，但是平时用下来，Kettle的这个功能还是有些缺陷的，比如导出Excel2007+的时候，经常会报错，我一直也没有解决，这次记录博客顺便研究看看。</p>\n<div class=\"note primary\"><h1 id=\"1-Kettle的下载及使用\"><a href=\"#1-Kettle的下载及使用\" class=\"headerlink\" title=\"1. Kettle的下载及使用\"></a>1. Kettle的下载及使用</h1></div>\n<p>正式开始之前，我们简单说下Kettle的安装配置啥的，Kettle是绿色的，下载之后，直接运行就可以了<br>刚刚在网上下了个最新版的，后面，我们就是用这个7.0版本介绍官网地址：<a href=\"http://community.pentaho.com/projects/data-integration/\" target=\"_blank\" rel=\"external\">Kettle官网</a></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-01.png-blog.photo\" alt=\"Kettle-handbook-02-01.png\"></p>\n<a id=\"more\"></a>\n<p>他这个网站，应该是不太好访问，有VPN的话，可以用起来，下载的话，大概800M左右，后面看看上传一份，昨天为了下载，现冲了个蓝灯的会员<br>解压以后，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-02.png-blog.photo\" alt=\"Kettle-handbook-02-02.png\"><br>目录大概是这样的，我们会看到，这里有.bat文件和.sh文件，.bat就是我们在windows下使用的，.sh就是在Linux下使用的，我们找到 Spoon.bat这个文件，就可以启动Kettle了，奥，对了，得先安装下Java<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-03.png-blog.photo\" alt=\"Kettle-handbook-02-03.png\"><br>打开后，就是这样了，都是图形界面的，很好用<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-04.png-blog.photo\" alt=\"Kettle-handbook-02-04.png\"><br>Kettle中，主要有2中任务，一个是作业，一个是转换。一般来说，转换是一系列具体的操作，比如：调度SP，导出Excel等等；作业的话，就是按照一定流程来调度一系列转换。大概是这样，实际上，他们也是可以嵌套调用的，我们后面可以再讨论。</p>\n<div class=\"note primary\"><h1 id=\"2-第一个转换-将数据导出为Excel\"><a href=\"#2-第一个转换-将数据导出为Excel\" class=\"headerlink\" title=\"2. 第一个转换-将数据导出为Excel\"></a>2. 第一个转换-将数据导出为Excel</h1></div>\n<p>为了实现这个功能，我们需要：</p>\n<ol>\n<li>连接到数据库</li>\n<li>导出为Excel</li>\n</ol>\n<p>首先，我们新建一个转换，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-05.png-blog.photo\" alt=\"Kettle-handbook-02-05.png\"><br>新建，之后，我们可以看到，工具箱中，有很多的控件，我们都可以使用，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-06.png-blog.photo\" alt=\"Kettle-handbook-02-06.png\"><br>很多我也没有用过，大家可以自行去尝试使用<br>好了，下面，我们就开始介绍我们这次的主题，导出数据到Excel<br>既然，是导出数据，说明我们肯定有一个源头，一个目标，源头是我们的一个数据库，我们得先连接到这个数据库</p>\n<h2 id=\"新建数据库连接\"><a href=\"#新建数据库连接\" class=\"headerlink\" title=\"新建数据库连接\"></a>新建数据库连接</h2><p>我们在主对象库中，DB连接上，右键单击，新建<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-07.png-blog.photo\" alt=\"Kettle-handbook-02-07.png\"><br>在这里呢，我们可以看到，有很多的数据库可以选择，我们只需要填写基本的连接信息就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-08.png-blog.photo\" alt=\"Kettle-handbook-02-08.png\"><br>我们这里连接的是Postgresql，配置好后，测试下，（坑，刚刚在windows上装的数据库，一直连不上，白名单都加好了，就是不行，结果是防火墙忘关了。。）<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-09.png-blog.photo\" alt=\"Kettle-handbook-02-09.png\"><br>好了，可以连接到数据库了，下面，我们得把数据导出啊，我们需要使用输入这个控件<br>输入下面，有很多的控件，我们这次只使用表输入，因为我们是直接从数据库中拿数据<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-10.png-blog.photo\" alt=\"Kettle-handbook-02-10.png\"><br>这里直接就是拖拽的，拖过去就行了，双击之后，可以编辑，这里我们就使用刚才的数据源连接，然后查询一张表，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-11.png-blog.photo\" alt=\"Kettle-handbook-02-11.png\"><br>表的话，随便create一张就可以了，我们还可以预览数据<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-12.png-blog.photo\" alt=\"Kettle-handbook-02-12.png\"><br>源头好了，同样的思路，我们需要一个目标，就是输出了，输出到Excel<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-13.png-blog.photo\" alt=\"Kettle-handbook-02-13.png\"><br>同样的，我们托好之后，双击就可以编辑了，这里，我们主要关注2个配置，一个是excel保存地址，和字段<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-14.png-blog.photo\" alt=\"Kettle-handbook-02-14.png\"><br>我们选择一个地址，然后得，看下字段那个tab，<br>我们单击，获取字段，就可以从源头获取表中的字段了，当然，我们可以只导出，我们需要的字段，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-15.png-blog.photo\" alt=\"Kettle-handbook-02-15.png\"><br>一步一步来的话，上面获取，可能会获取不到，因为，有一步，需要将2个控件，连起来，源头有了，目标也有了，得让他们关联起来啊，再Kettle中，这个连线叫做Hop（跳），就像一个管道一样，将数据流从一个点，指向另一个点。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-16.png-blog.photo\" alt=\"Kettle-handbook-02-16.png\"><br>都好了，以后，我们就运行下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-17.png-blog.photo\" alt=\"Kettle-handbook-02-17.png\"><br>和Java里面，一样，绿色的话，就代表成功了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-19.png-blog.photo\" alt=\"Kettle-handbook-02-19.png\"><br>我们看下文件<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-18.png-blog.photo\" alt=\"Kettle-handbook-02-18.png\"><br>好了，我们的第一个例子，就成功了，还是很简单的，主要就是Kettle中控件的熟悉。</p>\n","site":{"data":{}},"excerpt":"<p>好了，我们先来看第一个例子，就是怎样将数据库中的数据，导出为Excel。<br>平时，如果我们需要将数据导出Excel的话，我们可能会直接复制，然后粘贴出来，但是数据量大的话，就不好用了；<br>或者使用Java等开发语言，写代码，导出Excel；或者一些数据库连接工具自带的导出功能。<br>其实，我们用Kettle的话，还是很方便的，但是平时用下来，Kettle的这个功能还是有些缺陷的，比如导出Excel2007+的时候，经常会报错，我一直也没有解决，这次记录博客顺便研究看看。</p>\n<div class=\"note primary\"><h1 id=\"1-Kettle的下载及使用\"><a href=\"#1-Kettle的下载及使用\" class=\"headerlink\" title=\"1. Kettle的下载及使用\"></a>1. Kettle的下载及使用</h1></div>\n<p>正式开始之前，我们简单说下Kettle的安装配置啥的，Kettle是绿色的，下载之后，直接运行就可以了<br>刚刚在网上下了个最新版的，后面，我们就是用这个7.0版本介绍官网地址：<a href=\"http://community.pentaho.com/projects/data-integration/\" target=\"_blank\" rel=\"external\">Kettle官网</a></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-01.png-blog.photo\" alt=\"Kettle-handbook-02-01.png\"></p>","more":"<p>他这个网站，应该是不太好访问，有VPN的话，可以用起来，下载的话，大概800M左右，后面看看上传一份，昨天为了下载，现冲了个蓝灯的会员<br>解压以后，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-02.png-blog.photo\" alt=\"Kettle-handbook-02-02.png\"><br>目录大概是这样的，我们会看到，这里有.bat文件和.sh文件，.bat就是我们在windows下使用的，.sh就是在Linux下使用的，我们找到 Spoon.bat这个文件，就可以启动Kettle了，奥，对了，得先安装下Java<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-03.png-blog.photo\" alt=\"Kettle-handbook-02-03.png\"><br>打开后，就是这样了，都是图形界面的，很好用<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-04.png-blog.photo\" alt=\"Kettle-handbook-02-04.png\"><br>Kettle中，主要有2中任务，一个是作业，一个是转换。一般来说，转换是一系列具体的操作，比如：调度SP，导出Excel等等；作业的话，就是按照一定流程来调度一系列转换。大概是这样，实际上，他们也是可以嵌套调用的，我们后面可以再讨论。</p>\n<div class=\"note primary\"><h1 id=\"2-第一个转换-将数据导出为Excel\"><a href=\"#2-第一个转换-将数据导出为Excel\" class=\"headerlink\" title=\"2. 第一个转换-将数据导出为Excel\"></a>2. 第一个转换-将数据导出为Excel</h1></div>\n<p>为了实现这个功能，我们需要：</p>\n<ol>\n<li>连接到数据库</li>\n<li>导出为Excel</li>\n</ol>\n<p>首先，我们新建一个转换，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-05.png-blog.photo\" alt=\"Kettle-handbook-02-05.png\"><br>新建，之后，我们可以看到，工具箱中，有很多的控件，我们都可以使用，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-06.png-blog.photo\" alt=\"Kettle-handbook-02-06.png\"><br>很多我也没有用过，大家可以自行去尝试使用<br>好了，下面，我们就开始介绍我们这次的主题，导出数据到Excel<br>既然，是导出数据，说明我们肯定有一个源头，一个目标，源头是我们的一个数据库，我们得先连接到这个数据库</p>\n<h2 id=\"新建数据库连接\"><a href=\"#新建数据库连接\" class=\"headerlink\" title=\"新建数据库连接\"></a>新建数据库连接</h2><p>我们在主对象库中，DB连接上，右键单击，新建<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-07.png-blog.photo\" alt=\"Kettle-handbook-02-07.png\"><br>在这里呢，我们可以看到，有很多的数据库可以选择，我们只需要填写基本的连接信息就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-08.png-blog.photo\" alt=\"Kettle-handbook-02-08.png\"><br>我们这里连接的是Postgresql，配置好后，测试下，（坑，刚刚在windows上装的数据库，一直连不上，白名单都加好了，就是不行，结果是防火墙忘关了。。）<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-09.png-blog.photo\" alt=\"Kettle-handbook-02-09.png\"><br>好了，可以连接到数据库了，下面，我们得把数据导出啊，我们需要使用输入这个控件<br>输入下面，有很多的控件，我们这次只使用表输入，因为我们是直接从数据库中拿数据<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-10.png-blog.photo\" alt=\"Kettle-handbook-02-10.png\"><br>这里直接就是拖拽的，拖过去就行了，双击之后，可以编辑，这里我们就使用刚才的数据源连接，然后查询一张表，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-11.png-blog.photo\" alt=\"Kettle-handbook-02-11.png\"><br>表的话，随便create一张就可以了，我们还可以预览数据<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-12.png-blog.photo\" alt=\"Kettle-handbook-02-12.png\"><br>源头好了，同样的思路，我们需要一个目标，就是输出了，输出到Excel<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-13.png-blog.photo\" alt=\"Kettle-handbook-02-13.png\"><br>同样的，我们托好之后，双击就可以编辑了，这里，我们主要关注2个配置，一个是excel保存地址，和字段<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-14.png-blog.photo\" alt=\"Kettle-handbook-02-14.png\"><br>我们选择一个地址，然后得，看下字段那个tab，<br>我们单击，获取字段，就可以从源头获取表中的字段了，当然，我们可以只导出，我们需要的字段，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-15.png-blog.photo\" alt=\"Kettle-handbook-02-15.png\"><br>一步一步来的话，上面获取，可能会获取不到，因为，有一步，需要将2个控件，连起来，源头有了，目标也有了，得让他们关联起来啊，再Kettle中，这个连线叫做Hop（跳），就像一个管道一样，将数据流从一个点，指向另一个点。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-16.png-blog.photo\" alt=\"Kettle-handbook-02-16.png\"><br>都好了，以后，我们就运行下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-17.png-blog.photo\" alt=\"Kettle-handbook-02-17.png\"><br>和Java里面，一样，绿色的话，就代表成功了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-19.png-blog.photo\" alt=\"Kettle-handbook-02-19.png\"><br>我们看下文件<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-02-18.png-blog.photo\" alt=\"Kettle-handbook-02-18.png\"><br>好了，我们的第一个例子，就成功了，还是很简单的，主要就是Kettle中控件的熟悉。</p>"},{"title":"Kettle手册（四）- 变量的使用","date":"2017-03-28T15:24:44.000Z","_content":"我们在这一回，介绍下，Kettle中全局变量的使用，我们前面说过的配置文件，其实就是配置全局变量的地方\n[Kettle手册（三）- 配置文件的使用及密码加密 ](2017/03/27/Kettle-handbook-03/)\n\n\n{% note primary %} \n## 1. 全局变量\n{% endnote %}\n\n就是我们上面说的kettle.properties文件，我们在里面定义的变量，我们可以在所有的转换或者作业中获得到，比如，我们前面，说的数据库参数\n![Kettle-handbook-04-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-01.png-blog.photo)\n之前，我们已经在数据库连接中测试过，是可以，这里，我们输出下这个变量，看看\n\n<!-- more -->\n\n### 1.1 输出变量的值\n我们这里，用到了“获取变量\"这个控件\n![Kettle-handbook-04-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-02.png-blog.photo)\n我们单击，\"Get Variables\",就可以获取到当前的全局变量信息\n![Kettle-handbook-04-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-03.png-blog.photo)\n我们选择几个输出试试\n![Kettle-handbook-04-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-04.png-blog.photo)\n还有一个，”日志“控件，\n![Kettle-handbook-04-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-05.png-blog.photo)\n拖好之后，我们直接执行，\n![Kettle-handbook-04-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-06.png-blog.photo)\n日志中，我们会看到，我们定义在文件中的参数（加密的参数，我没有重启，所以显示的还是原来的）\n那我们，可不可以，动态的增加变量呢？\n\n### 1.2 动态增加变量\n刚刚也在网上找了些资料，尝试了下，这里简单分享下（貌似，这得算是对局部变量的操作，暂时就放在这里吧）\n我们先试下在转换中设置变量，作业中也是可以使用的，我们后面再说\n测试流程是这样的， 我们再表输入中，有2个时间参数，然后作为变量\n![Kettle-handbook-04-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-07.png-blog.photo)\n比如，有这样一个场景，我们每天需要定时调度一些SP，SP都有开始时间，结束时间，调用时，需要传参数进去，\n这个时候，我们在使用Kettle的时候，就可以通过这样的方式，去设置变量，然后再调用SP\n![Kettle-handbook-04-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-08.png-blog.photo)\n我们单击获取字段后，就可以了，这里可以修改变量存在的范围\n![Kettle-handbook-04-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-09.png-blog.photo)\n![Kettle-handbook-04-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-10.png-blog.photo)\n执行后，输出，后面，我们就可以使用这2个时间变量了\n![Kettle-handbook-04-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-11.png-blog.photo)\n这里使用的时候，也遇到一个问题，就是变量的默认值，一直都没有生效，不知道为什么，不管是，静态值，还是变量值，都没有办法，待研究。\n\n\n{% note primary %} \n## 2. 局部变量（命名参数）\n{% endnote %}\n\n在kettle中，相对于全局变量，我们还可以使用局部变量。感觉，这个全局变量，局部变量，都是相对而言的，\n就网上大部分资料来说，Kettle中的局部变量就是“命名参数”\n我们再转换中，右键单击，选择，转换设置\n\n![Kettle-handbook-04-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-12.png-blog.photo)\n我们选择，“命名参数”，定义一个变量，我们给一个默认值\n![Kettle-handbook-04-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-13.png-blog.photo)\n然后，在日志中，将变量输出\n![Kettle-handbook-04-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-14.png-blog.photo)\n我们执行下，这个转换，运行时的界面，我们可以看到，这个参数是可以动态改变的，或者，我们再命令行调这个转换的时候，同样可以给他赋值\n![Kettle-handbook-04-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-15.png-blog.photo)\n运行结果，这个就是简单的局部变量了\n![Kettle-handbook-04-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-16.png-blog.photo)\n\n\n\n\n\n\n\n\n","source":"_posts/2017-03-28-Kettle-handbook-04.md","raw":"---\ntitle: Kettle手册（四）- 变量的使用\ndate: 2017-03-28 23:24:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n我们在这一回，介绍下，Kettle中全局变量的使用，我们前面说过的配置文件，其实就是配置全局变量的地方\n[Kettle手册（三）- 配置文件的使用及密码加密 ](2017/03/27/Kettle-handbook-03/)\n\n\n{% note primary %} \n## 1. 全局变量\n{% endnote %}\n\n就是我们上面说的kettle.properties文件，我们在里面定义的变量，我们可以在所有的转换或者作业中获得到，比如，我们前面，说的数据库参数\n![Kettle-handbook-04-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-01.png-blog.photo)\n之前，我们已经在数据库连接中测试过，是可以，这里，我们输出下这个变量，看看\n\n<!-- more -->\n\n### 1.1 输出变量的值\n我们这里，用到了“获取变量\"这个控件\n![Kettle-handbook-04-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-02.png-blog.photo)\n我们单击，\"Get Variables\",就可以获取到当前的全局变量信息\n![Kettle-handbook-04-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-03.png-blog.photo)\n我们选择几个输出试试\n![Kettle-handbook-04-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-04.png-blog.photo)\n还有一个，”日志“控件，\n![Kettle-handbook-04-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-05.png-blog.photo)\n拖好之后，我们直接执行，\n![Kettle-handbook-04-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-06.png-blog.photo)\n日志中，我们会看到，我们定义在文件中的参数（加密的参数，我没有重启，所以显示的还是原来的）\n那我们，可不可以，动态的增加变量呢？\n\n### 1.2 动态增加变量\n刚刚也在网上找了些资料，尝试了下，这里简单分享下（貌似，这得算是对局部变量的操作，暂时就放在这里吧）\n我们先试下在转换中设置变量，作业中也是可以使用的，我们后面再说\n测试流程是这样的， 我们再表输入中，有2个时间参数，然后作为变量\n![Kettle-handbook-04-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-07.png-blog.photo)\n比如，有这样一个场景，我们每天需要定时调度一些SP，SP都有开始时间，结束时间，调用时，需要传参数进去，\n这个时候，我们在使用Kettle的时候，就可以通过这样的方式，去设置变量，然后再调用SP\n![Kettle-handbook-04-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-08.png-blog.photo)\n我们单击获取字段后，就可以了，这里可以修改变量存在的范围\n![Kettle-handbook-04-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-09.png-blog.photo)\n![Kettle-handbook-04-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-10.png-blog.photo)\n执行后，输出，后面，我们就可以使用这2个时间变量了\n![Kettle-handbook-04-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-11.png-blog.photo)\n这里使用的时候，也遇到一个问题，就是变量的默认值，一直都没有生效，不知道为什么，不管是，静态值，还是变量值，都没有办法，待研究。\n\n\n{% note primary %} \n## 2. 局部变量（命名参数）\n{% endnote %}\n\n在kettle中，相对于全局变量，我们还可以使用局部变量。感觉，这个全局变量，局部变量，都是相对而言的，\n就网上大部分资料来说，Kettle中的局部变量就是“命名参数”\n我们再转换中，右键单击，选择，转换设置\n\n![Kettle-handbook-04-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-12.png-blog.photo)\n我们选择，“命名参数”，定义一个变量，我们给一个默认值\n![Kettle-handbook-04-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-13.png-blog.photo)\n然后，在日志中，将变量输出\n![Kettle-handbook-04-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-14.png-blog.photo)\n我们执行下，这个转换，运行时的界面，我们可以看到，这个参数是可以动态改变的，或者，我们再命令行调这个转换的时候，同样可以给他赋值\n![Kettle-handbook-04-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-15.png-blog.photo)\n运行结果，这个就是简单的局部变量了\n![Kettle-handbook-04-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-16.png-blog.photo)\n\n\n\n\n\n\n\n\n","slug":"Kettle-handbook-04","published":1,"updated":"2017-08-26T16:01:57.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1br000988in662o5vce","content":"<p>我们在这一回，介绍下，Kettle中全局变量的使用，我们前面说过的配置文件，其实就是配置全局变量的地方<br><a href=\"2017/03/27/Kettle-handbook-03/\">Kettle手册（三）- 配置文件的使用及密码加密 </a></p>\n<div class=\"note primary\"><h2 id=\"1-全局变量\"><a href=\"#1-全局变量\" class=\"headerlink\" title=\"1. 全局变量\"></a>1. 全局变量</h2></div>\n<p>就是我们上面说的kettle.properties文件，我们在里面定义的变量，我们可以在所有的转换或者作业中获得到，比如，我们前面，说的数据库参数<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-01.png-blog.photo\" alt=\"Kettle-handbook-04-01.png\"><br>之前，我们已经在数据库连接中测试过，是可以，这里，我们输出下这个变量，看看</p>\n<a id=\"more\"></a>\n<h3 id=\"1-1-输出变量的值\"><a href=\"#1-1-输出变量的值\" class=\"headerlink\" title=\"1.1 输出变量的值\"></a>1.1 输出变量的值</h3><p>我们这里，用到了“获取变量”这个控件<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-02.png-blog.photo\" alt=\"Kettle-handbook-04-02.png\"><br>我们单击，”Get Variables”,就可以获取到当前的全局变量信息<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-03.png-blog.photo\" alt=\"Kettle-handbook-04-03.png\"><br>我们选择几个输出试试<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-04.png-blog.photo\" alt=\"Kettle-handbook-04-04.png\"><br>还有一个，”日志“控件，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-05.png-blog.photo\" alt=\"Kettle-handbook-04-05.png\"><br>拖好之后，我们直接执行，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-06.png-blog.photo\" alt=\"Kettle-handbook-04-06.png\"><br>日志中，我们会看到，我们定义在文件中的参数（加密的参数，我没有重启，所以显示的还是原来的）<br>那我们，可不可以，动态的增加变量呢？</p>\n<h3 id=\"1-2-动态增加变量\"><a href=\"#1-2-动态增加变量\" class=\"headerlink\" title=\"1.2 动态增加变量\"></a>1.2 动态增加变量</h3><p>刚刚也在网上找了些资料，尝试了下，这里简单分享下（貌似，这得算是对局部变量的操作，暂时就放在这里吧）<br>我们先试下在转换中设置变量，作业中也是可以使用的，我们后面再说<br>测试流程是这样的， 我们再表输入中，有2个时间参数，然后作为变量<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-07.png-blog.photo\" alt=\"Kettle-handbook-04-07.png\"><br>比如，有这样一个场景，我们每天需要定时调度一些SP，SP都有开始时间，结束时间，调用时，需要传参数进去，<br>这个时候，我们在使用Kettle的时候，就可以通过这样的方式，去设置变量，然后再调用SP<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-08.png-blog.photo\" alt=\"Kettle-handbook-04-08.png\"><br>我们单击获取字段后，就可以了，这里可以修改变量存在的范围<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-09.png-blog.photo\" alt=\"Kettle-handbook-04-09.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-10.png-blog.photo\" alt=\"Kettle-handbook-04-10.png\"><br>执行后，输出，后面，我们就可以使用这2个时间变量了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-11.png-blog.photo\" alt=\"Kettle-handbook-04-11.png\"><br>这里使用的时候，也遇到一个问题，就是变量的默认值，一直都没有生效，不知道为什么，不管是，静态值，还是变量值，都没有办法，待研究。</p>\n<div class=\"note primary\"><h2 id=\"2-局部变量（命名参数）\"><a href=\"#2-局部变量（命名参数）\" class=\"headerlink\" title=\"2. 局部变量（命名参数）\"></a>2. 局部变量（命名参数）</h2></div>\n<p>在kettle中，相对于全局变量，我们还可以使用局部变量。感觉，这个全局变量，局部变量，都是相对而言的，<br>就网上大部分资料来说，Kettle中的局部变量就是“命名参数”<br>我们再转换中，右键单击，选择，转换设置</p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-12.png-blog.photo\" alt=\"Kettle-handbook-04-12.png\"><br>我们选择，“命名参数”，定义一个变量，我们给一个默认值<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-13.png-blog.photo\" alt=\"Kettle-handbook-04-13.png\"><br>然后，在日志中，将变量输出<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-14.png-blog.photo\" alt=\"Kettle-handbook-04-14.png\"><br>我们执行下，这个转换，运行时的界面，我们可以看到，这个参数是可以动态改变的，或者，我们再命令行调这个转换的时候，同样可以给他赋值<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-15.png-blog.photo\" alt=\"Kettle-handbook-04-15.png\"><br>运行结果，这个就是简单的局部变量了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-16.png-blog.photo\" alt=\"Kettle-handbook-04-16.png\"></p>\n","site":{"data":{}},"excerpt":"<p>我们在这一回，介绍下，Kettle中全局变量的使用，我们前面说过的配置文件，其实就是配置全局变量的地方<br><a href=\"2017/03/27/Kettle-handbook-03/\">Kettle手册（三）- 配置文件的使用及密码加密 </a></p>\n<div class=\"note primary\"><h2 id=\"1-全局变量\"><a href=\"#1-全局变量\" class=\"headerlink\" title=\"1. 全局变量\"></a>1. 全局变量</h2></div>\n<p>就是我们上面说的kettle.properties文件，我们在里面定义的变量，我们可以在所有的转换或者作业中获得到，比如，我们前面，说的数据库参数<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-01.png-blog.photo\" alt=\"Kettle-handbook-04-01.png\"><br>之前，我们已经在数据库连接中测试过，是可以，这里，我们输出下这个变量，看看</p>","more":"<h3 id=\"1-1-输出变量的值\"><a href=\"#1-1-输出变量的值\" class=\"headerlink\" title=\"1.1 输出变量的值\"></a>1.1 输出变量的值</h3><p>我们这里，用到了“获取变量”这个控件<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-02.png-blog.photo\" alt=\"Kettle-handbook-04-02.png\"><br>我们单击，”Get Variables”,就可以获取到当前的全局变量信息<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-03.png-blog.photo\" alt=\"Kettle-handbook-04-03.png\"><br>我们选择几个输出试试<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-04.png-blog.photo\" alt=\"Kettle-handbook-04-04.png\"><br>还有一个，”日志“控件，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-05.png-blog.photo\" alt=\"Kettle-handbook-04-05.png\"><br>拖好之后，我们直接执行，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-06.png-blog.photo\" alt=\"Kettle-handbook-04-06.png\"><br>日志中，我们会看到，我们定义在文件中的参数（加密的参数，我没有重启，所以显示的还是原来的）<br>那我们，可不可以，动态的增加变量呢？</p>\n<h3 id=\"1-2-动态增加变量\"><a href=\"#1-2-动态增加变量\" class=\"headerlink\" title=\"1.2 动态增加变量\"></a>1.2 动态增加变量</h3><p>刚刚也在网上找了些资料，尝试了下，这里简单分享下（貌似，这得算是对局部变量的操作，暂时就放在这里吧）<br>我们先试下在转换中设置变量，作业中也是可以使用的，我们后面再说<br>测试流程是这样的， 我们再表输入中，有2个时间参数，然后作为变量<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-07.png-blog.photo\" alt=\"Kettle-handbook-04-07.png\"><br>比如，有这样一个场景，我们每天需要定时调度一些SP，SP都有开始时间，结束时间，调用时，需要传参数进去，<br>这个时候，我们在使用Kettle的时候，就可以通过这样的方式，去设置变量，然后再调用SP<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-08.png-blog.photo\" alt=\"Kettle-handbook-04-08.png\"><br>我们单击获取字段后，就可以了，这里可以修改变量存在的范围<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-09.png-blog.photo\" alt=\"Kettle-handbook-04-09.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-10.png-blog.photo\" alt=\"Kettle-handbook-04-10.png\"><br>执行后，输出，后面，我们就可以使用这2个时间变量了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-11.png-blog.photo\" alt=\"Kettle-handbook-04-11.png\"><br>这里使用的时候，也遇到一个问题，就是变量的默认值，一直都没有生效，不知道为什么，不管是，静态值，还是变量值，都没有办法，待研究。</p>\n<div class=\"note primary\"><h2 id=\"2-局部变量（命名参数）\"><a href=\"#2-局部变量（命名参数）\" class=\"headerlink\" title=\"2. 局部变量（命名参数）\"></a>2. 局部变量（命名参数）</h2></div>\n<p>在kettle中，相对于全局变量，我们还可以使用局部变量。感觉，这个全局变量，局部变量，都是相对而言的，<br>就网上大部分资料来说，Kettle中的局部变量就是“命名参数”<br>我们再转换中，右键单击，选择，转换设置</p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-12.png-blog.photo\" alt=\"Kettle-handbook-04-12.png\"><br>我们选择，“命名参数”，定义一个变量，我们给一个默认值<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-13.png-blog.photo\" alt=\"Kettle-handbook-04-13.png\"><br>然后，在日志中，将变量输出<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-14.png-blog.photo\" alt=\"Kettle-handbook-04-14.png\"><br>我们执行下，这个转换，运行时的界面，我们可以看到，这个参数是可以动态改变的，或者，我们再命令行调这个转换的时候，同样可以给他赋值<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-15.png-blog.photo\" alt=\"Kettle-handbook-04-15.png\"><br>运行结果，这个就是简单的局部变量了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-04-16.png-blog.photo\" alt=\"Kettle-handbook-04-16.png\"></p>"},{"title":"Kettle手册（六）- Hop小记","date":"2017-03-29T14:24:44.000Z","_content":"# 1. 什么是Hop\n在我们前面，使用Kettle过程中，控件与控件之间的连线，这里，我们详细介绍下它，它在Kettle中叫Hop（跳）。\n![Kettle-handbook-06-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-01.png-blog.photo)\n![Kettle-handbook-06-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-02.png-blog.photo)\n\n<!-- more -->\n\n# 2. Hop的发送方式（转换）\n在转换中，一般情况，控件和控件之间只有一个Hop，当然，如果需要的话，我们拖了2个控件出来，像这样：\n![Kettle-handbook-06-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-03.png-blog.photo)\nKettle会提示你，下面的信息，让你选择，数据发送的方式\n![Kettle-handbook-06-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-04.png-blog.photo)\n\n## 2.1 分发记录\n目标步骤轮流接收记录，其实就是你一条，我一条，轮着接收数据，这个我们试一下就知道了，\n![Kettle-handbook-06-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-05.png-blog.photo)\n![Kettle-handbook-06-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-06.png-blog.photo)\n我们执行下，看看这个结果试试，我们再步骤度量中，可以看到，a.txt和b.txt分别写入的数量\n![Kettle-handbook-06-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-07.png-blog.photo)\n看看结果文件，就是这样的\n![Kettle-handbook-06-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-08.png-blog.photo)\n\n## 2.2 复制记录\n所有记录同时发送到所有的目标步骤，这个看起来就简单多了，比如上面的例子，2个文本文件会接收到同样的所有的数据，我们也试一下\n![Kettle-handbook-06-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-09.png-blog.photo)\n结果文件的话，就是2个节点，接收到的数据都是一样的\n![Kettle-handbook-06-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-10.png-blog.photo)\n\n# 3.Hop的状态（作业）\n在作业中，Hop主要用来控制流程\n![Kettle-handbook-06-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-11.png-blog.photo)\n有3种状态，一个锁，一个绿色的对号，一个红色的叉号\n![Kettle-handbook-06-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-12.png-blog.photo)\n![Kettle-handbook-06-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-13.png-blog.photo)\n![Kettle-handbook-06-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-14.png-blog.photo)\n简单来说，\n![Kettle-handbook-06-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-15.png-blog.photo)：表示无论上一步执行成功还是失败，都一定会执行下一步\n![Kettle-handbook-06-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-16.png-blog.photo)：表示上一步执行成功才会执行下一步\n![Kettle-handbook-06-17.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-17.png-blog.photo)：表示上一步执行失败执行下一步\n比如我们上面的例子，我们的转换执行成功后，就结束了，如果转换执行失败了，我们就发送邮件。","source":"_posts/2017-03-29-Kettle-handbook-06.md","raw":"---\ntitle: Kettle手册（六）- Hop小记\ndate: 2017-03-29 22:24:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n# 1. 什么是Hop\n在我们前面，使用Kettle过程中，控件与控件之间的连线，这里，我们详细介绍下它，它在Kettle中叫Hop（跳）。\n![Kettle-handbook-06-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-01.png-blog.photo)\n![Kettle-handbook-06-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-02.png-blog.photo)\n\n<!-- more -->\n\n# 2. Hop的发送方式（转换）\n在转换中，一般情况，控件和控件之间只有一个Hop，当然，如果需要的话，我们拖了2个控件出来，像这样：\n![Kettle-handbook-06-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-03.png-blog.photo)\nKettle会提示你，下面的信息，让你选择，数据发送的方式\n![Kettle-handbook-06-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-04.png-blog.photo)\n\n## 2.1 分发记录\n目标步骤轮流接收记录，其实就是你一条，我一条，轮着接收数据，这个我们试一下就知道了，\n![Kettle-handbook-06-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-05.png-blog.photo)\n![Kettle-handbook-06-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-06.png-blog.photo)\n我们执行下，看看这个结果试试，我们再步骤度量中，可以看到，a.txt和b.txt分别写入的数量\n![Kettle-handbook-06-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-07.png-blog.photo)\n看看结果文件，就是这样的\n![Kettle-handbook-06-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-08.png-blog.photo)\n\n## 2.2 复制记录\n所有记录同时发送到所有的目标步骤，这个看起来就简单多了，比如上面的例子，2个文本文件会接收到同样的所有的数据，我们也试一下\n![Kettle-handbook-06-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-09.png-blog.photo)\n结果文件的话，就是2个节点，接收到的数据都是一样的\n![Kettle-handbook-06-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-10.png-blog.photo)\n\n# 3.Hop的状态（作业）\n在作业中，Hop主要用来控制流程\n![Kettle-handbook-06-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-11.png-blog.photo)\n有3种状态，一个锁，一个绿色的对号，一个红色的叉号\n![Kettle-handbook-06-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-12.png-blog.photo)\n![Kettle-handbook-06-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-13.png-blog.photo)\n![Kettle-handbook-06-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-14.png-blog.photo)\n简单来说，\n![Kettle-handbook-06-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-15.png-blog.photo)：表示无论上一步执行成功还是失败，都一定会执行下一步\n![Kettle-handbook-06-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-16.png-blog.photo)：表示上一步执行成功才会执行下一步\n![Kettle-handbook-06-17.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-17.png-blog.photo)：表示上一步执行失败执行下一步\n比如我们上面的例子，我们的转换执行成功后，就结束了，如果转换执行失败了，我们就发送邮件。","slug":"Kettle-handbook-06","published":1,"updated":"2017-08-27T13:10:27.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1bw000d88inrxts21ra","content":"<h1 id=\"1-什么是Hop\"><a href=\"#1-什么是Hop\" class=\"headerlink\" title=\"1. 什么是Hop\"></a>1. 什么是Hop</h1><p>在我们前面，使用Kettle过程中，控件与控件之间的连线，这里，我们详细介绍下它，它在Kettle中叫Hop（跳）。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-01.png-blog.photo\" alt=\"Kettle-handbook-06-01.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-02.png-blog.photo\" alt=\"Kettle-handbook-06-02.png\"></p>\n<a id=\"more\"></a>\n<h1 id=\"2-Hop的发送方式（转换）\"><a href=\"#2-Hop的发送方式（转换）\" class=\"headerlink\" title=\"2. Hop的发送方式（转换）\"></a>2. Hop的发送方式（转换）</h1><p>在转换中，一般情况，控件和控件之间只有一个Hop，当然，如果需要的话，我们拖了2个控件出来，像这样：<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-03.png-blog.photo\" alt=\"Kettle-handbook-06-03.png\"><br>Kettle会提示你，下面的信息，让你选择，数据发送的方式<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-04.png-blog.photo\" alt=\"Kettle-handbook-06-04.png\"></p>\n<h2 id=\"2-1-分发记录\"><a href=\"#2-1-分发记录\" class=\"headerlink\" title=\"2.1 分发记录\"></a>2.1 分发记录</h2><p>目标步骤轮流接收记录，其实就是你一条，我一条，轮着接收数据，这个我们试一下就知道了，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-05.png-blog.photo\" alt=\"Kettle-handbook-06-05.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-06.png-blog.photo\" alt=\"Kettle-handbook-06-06.png\"><br>我们执行下，看看这个结果试试，我们再步骤度量中，可以看到，a.txt和b.txt分别写入的数量<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-07.png-blog.photo\" alt=\"Kettle-handbook-06-07.png\"><br>看看结果文件，就是这样的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-08.png-blog.photo\" alt=\"Kettle-handbook-06-08.png\"></p>\n<h2 id=\"2-2-复制记录\"><a href=\"#2-2-复制记录\" class=\"headerlink\" title=\"2.2 复制记录\"></a>2.2 复制记录</h2><p>所有记录同时发送到所有的目标步骤，这个看起来就简单多了，比如上面的例子，2个文本文件会接收到同样的所有的数据，我们也试一下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-09.png-blog.photo\" alt=\"Kettle-handbook-06-09.png\"><br>结果文件的话，就是2个节点，接收到的数据都是一样的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-10.png-blog.photo\" alt=\"Kettle-handbook-06-10.png\"></p>\n<h1 id=\"3-Hop的状态（作业）\"><a href=\"#3-Hop的状态（作业）\" class=\"headerlink\" title=\"3.Hop的状态（作业）\"></a>3.Hop的状态（作业）</h1><p>在作业中，Hop主要用来控制流程<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-11.png-blog.photo\" alt=\"Kettle-handbook-06-11.png\"><br>有3种状态，一个锁，一个绿色的对号，一个红色的叉号<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-12.png-blog.photo\" alt=\"Kettle-handbook-06-12.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-13.png-blog.photo\" alt=\"Kettle-handbook-06-13.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-14.png-blog.photo\" alt=\"Kettle-handbook-06-14.png\"><br>简单来说，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-15.png-blog.photo\" alt=\"Kettle-handbook-06-15.png\">：表示无论上一步执行成功还是失败，都一定会执行下一步<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-16.png-blog.photo\" alt=\"Kettle-handbook-06-16.png\">：表示上一步执行成功才会执行下一步<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-17.png-blog.photo\" alt=\"Kettle-handbook-06-17.png\">：表示上一步执行失败执行下一步<br>比如我们上面的例子，我们的转换执行成功后，就结束了，如果转换执行失败了，我们就发送邮件。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-什么是Hop\"><a href=\"#1-什么是Hop\" class=\"headerlink\" title=\"1. 什么是Hop\"></a>1. 什么是Hop</h1><p>在我们前面，使用Kettle过程中，控件与控件之间的连线，这里，我们详细介绍下它，它在Kettle中叫Hop（跳）。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-01.png-blog.photo\" alt=\"Kettle-handbook-06-01.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-02.png-blog.photo\" alt=\"Kettle-handbook-06-02.png\"></p>","more":"<h1 id=\"2-Hop的发送方式（转换）\"><a href=\"#2-Hop的发送方式（转换）\" class=\"headerlink\" title=\"2. Hop的发送方式（转换）\"></a>2. Hop的发送方式（转换）</h1><p>在转换中，一般情况，控件和控件之间只有一个Hop，当然，如果需要的话，我们拖了2个控件出来，像这样：<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-03.png-blog.photo\" alt=\"Kettle-handbook-06-03.png\"><br>Kettle会提示你，下面的信息，让你选择，数据发送的方式<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-04.png-blog.photo\" alt=\"Kettle-handbook-06-04.png\"></p>\n<h2 id=\"2-1-分发记录\"><a href=\"#2-1-分发记录\" class=\"headerlink\" title=\"2.1 分发记录\"></a>2.1 分发记录</h2><p>目标步骤轮流接收记录，其实就是你一条，我一条，轮着接收数据，这个我们试一下就知道了，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-05.png-blog.photo\" alt=\"Kettle-handbook-06-05.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-06.png-blog.photo\" alt=\"Kettle-handbook-06-06.png\"><br>我们执行下，看看这个结果试试，我们再步骤度量中，可以看到，a.txt和b.txt分别写入的数量<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-07.png-blog.photo\" alt=\"Kettle-handbook-06-07.png\"><br>看看结果文件，就是这样的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-08.png-blog.photo\" alt=\"Kettle-handbook-06-08.png\"></p>\n<h2 id=\"2-2-复制记录\"><a href=\"#2-2-复制记录\" class=\"headerlink\" title=\"2.2 复制记录\"></a>2.2 复制记录</h2><p>所有记录同时发送到所有的目标步骤，这个看起来就简单多了，比如上面的例子，2个文本文件会接收到同样的所有的数据，我们也试一下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-09.png-blog.photo\" alt=\"Kettle-handbook-06-09.png\"><br>结果文件的话，就是2个节点，接收到的数据都是一样的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-10.png-blog.photo\" alt=\"Kettle-handbook-06-10.png\"></p>\n<h1 id=\"3-Hop的状态（作业）\"><a href=\"#3-Hop的状态（作业）\" class=\"headerlink\" title=\"3.Hop的状态（作业）\"></a>3.Hop的状态（作业）</h1><p>在作业中，Hop主要用来控制流程<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-11.png-blog.photo\" alt=\"Kettle-handbook-06-11.png\"><br>有3种状态，一个锁，一个绿色的对号，一个红色的叉号<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-12.png-blog.photo\" alt=\"Kettle-handbook-06-12.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-13.png-blog.photo\" alt=\"Kettle-handbook-06-13.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-14.png-blog.photo\" alt=\"Kettle-handbook-06-14.png\"><br>简单来说，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-15.png-blog.photo\" alt=\"Kettle-handbook-06-15.png\">：表示无论上一步执行成功还是失败，都一定会执行下一步<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-16.png-blog.photo\" alt=\"Kettle-handbook-06-16.png\">：表示上一步执行成功才会执行下一步<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-06-17.png-blog.photo\" alt=\"Kettle-handbook-06-17.png\">：表示上一步执行失败执行下一步<br>比如我们上面的例子，我们的转换执行成功后，就结束了，如果转换执行失败了，我们就发送邮件。</p>"},{"title":"Kettle手册（八）- 循环","date":"2017-03-29T15:40:44.000Z","_content":"有的时候，我们想要在Kettle中实现这个循环的功能，比如，批量加载数据的时候，我们要对10张表执行同样的操作，只有表名和一些信息不一样，这时，写个循环就省事儿多了\n\n# 1. 遍历结果集实现\n![Kettle-handbook-08-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-01.png-blog.photo)\n这里的话，我们主要是通过一个将结果集返回，然后通过转换的设置来实现的\n\n<!-- more -->\n\n## 1.1 query_the_result\n这个转换，只要是将我们要遍历的结果集返回，\n![Kettle-handbook-08-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-02.png-blog.photo)\n表输入，我们就是返回了5条记录，来做遍历\n![Kettle-handbook-08-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-03.png-blog.photo)\n复制记录到结果，这个控件的作用，就是我们可以在后面的转换继续使用这个结果集。\n\n##1.2 traverse_the_result\n这里呢，我们就是需要遍历的转换了，这里，我们只是获取结果集，然后将结果集输出\n![Kettle-handbook-08-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-04.png-blog.photo)\n![Kettle-handbook-08-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-05.png-blog.photo)\n还有一个很重要的一步，怎样让这个转换可以根据结果集的条数，去循环执行呢？\n就是这个“执行每一个输入行”\n![Kettle-handbook-08-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-06.png-blog.photo)\n我们执行下看看\n![Kettle-handbook-08-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-07.png-blog.photo)\n\n# 2. 使用JS实现\n网上有很多的例子，介绍怎样用JS来控制循环，这里我们也简单的测试下\n![Kettle-handbook-08-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-08.png-blog.photo)\n\n## 2.1 query_the_result\n这一步，和上面的一样，就是将结果集返回\n![Kettle-handbook-08-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-09.png-blog.photo)\n\n## 2.2 travers_the_result\n这里主要是使用JS将结果集进行遍历，通过JS，将一些结果存放到变量里面，在后面的操作中就可以使用了，通过${xxx}的方式使用\n这个其实和Java、JS里面循环思路一样，通过结果集的总数“total_num”和下标“LoopCounter”进行判断\n![Kettle-handbook-08-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-10.png-blog.photo)\n\n## 2.3 evaluate_the_loop_count\n这一步，就是判断下标的值和结果集的总数，进行对比，\n![Kettle-handbook-08-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-11.png-blog.photo)\n\n## 2.4 print_the_log\n输出下，我们想要使用的变量\n![Kettle-handbook-08-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-12.png-blog.photo)\n\n## 2.5 manage_the_loop_index\n这一步，给下标加一，然后获取下一条记录\n![Kettle-handbook-08-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-13.png-blog.photo)\n好了，执行下，我们看看\n![Kettle-handbook-08-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-14.png-blog.photo)\n好了，循环的使用先介绍到这里\n","source":"_posts/2017-03-29-Kettle-handbook-08.md","raw":"---\ntitle: Kettle手册（八）- 循环 \ndate: 2017-03-29 23:40:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n有的时候，我们想要在Kettle中实现这个循环的功能，比如，批量加载数据的时候，我们要对10张表执行同样的操作，只有表名和一些信息不一样，这时，写个循环就省事儿多了\n\n# 1. 遍历结果集实现\n![Kettle-handbook-08-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-01.png-blog.photo)\n这里的话，我们主要是通过一个将结果集返回，然后通过转换的设置来实现的\n\n<!-- more -->\n\n## 1.1 query_the_result\n这个转换，只要是将我们要遍历的结果集返回，\n![Kettle-handbook-08-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-02.png-blog.photo)\n表输入，我们就是返回了5条记录，来做遍历\n![Kettle-handbook-08-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-03.png-blog.photo)\n复制记录到结果，这个控件的作用，就是我们可以在后面的转换继续使用这个结果集。\n\n##1.2 traverse_the_result\n这里呢，我们就是需要遍历的转换了，这里，我们只是获取结果集，然后将结果集输出\n![Kettle-handbook-08-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-04.png-blog.photo)\n![Kettle-handbook-08-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-05.png-blog.photo)\n还有一个很重要的一步，怎样让这个转换可以根据结果集的条数，去循环执行呢？\n就是这个“执行每一个输入行”\n![Kettle-handbook-08-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-06.png-blog.photo)\n我们执行下看看\n![Kettle-handbook-08-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-07.png-blog.photo)\n\n# 2. 使用JS实现\n网上有很多的例子，介绍怎样用JS来控制循环，这里我们也简单的测试下\n![Kettle-handbook-08-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-08.png-blog.photo)\n\n## 2.1 query_the_result\n这一步，和上面的一样，就是将结果集返回\n![Kettle-handbook-08-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-09.png-blog.photo)\n\n## 2.2 travers_the_result\n这里主要是使用JS将结果集进行遍历，通过JS，将一些结果存放到变量里面，在后面的操作中就可以使用了，通过${xxx}的方式使用\n这个其实和Java、JS里面循环思路一样，通过结果集的总数“total_num”和下标“LoopCounter”进行判断\n![Kettle-handbook-08-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-10.png-blog.photo)\n\n## 2.3 evaluate_the_loop_count\n这一步，就是判断下标的值和结果集的总数，进行对比，\n![Kettle-handbook-08-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-11.png-blog.photo)\n\n## 2.4 print_the_log\n输出下，我们想要使用的变量\n![Kettle-handbook-08-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-12.png-blog.photo)\n\n## 2.5 manage_the_loop_index\n这一步，给下标加一，然后获取下一条记录\n![Kettle-handbook-08-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-13.png-blog.photo)\n好了，执行下，我们看看\n![Kettle-handbook-08-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-14.png-blog.photo)\n好了，循环的使用先介绍到这里\n","slug":"Kettle-handbook-08","published":1,"updated":"2017-08-27T13:47:04.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1by000g88inbte9jc1m","content":"<p>有的时候，我们想要在Kettle中实现这个循环的功能，比如，批量加载数据的时候，我们要对10张表执行同样的操作，只有表名和一些信息不一样，这时，写个循环就省事儿多了</p>\n<h1 id=\"1-遍历结果集实现\"><a href=\"#1-遍历结果集实现\" class=\"headerlink\" title=\"1. 遍历结果集实现\"></a>1. 遍历结果集实现</h1><p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-01.png-blog.photo\" alt=\"Kettle-handbook-08-01.png\"><br>这里的话，我们主要是通过一个将结果集返回，然后通过转换的设置来实现的</p>\n<a id=\"more\"></a>\n<h2 id=\"1-1-query-the-result\"><a href=\"#1-1-query-the-result\" class=\"headerlink\" title=\"1.1 query_the_result\"></a>1.1 query_the_result</h2><p>这个转换，只要是将我们要遍历的结果集返回，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-02.png-blog.photo\" alt=\"Kettle-handbook-08-02.png\"><br>表输入，我们就是返回了5条记录，来做遍历<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-03.png-blog.photo\" alt=\"Kettle-handbook-08-03.png\"><br>复制记录到结果，这个控件的作用，就是我们可以在后面的转换继续使用这个结果集。</p>\n<p>##1.2 traverse_the_result<br>这里呢，我们就是需要遍历的转换了，这里，我们只是获取结果集，然后将结果集输出<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-04.png-blog.photo\" alt=\"Kettle-handbook-08-04.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-05.png-blog.photo\" alt=\"Kettle-handbook-08-05.png\"><br>还有一个很重要的一步，怎样让这个转换可以根据结果集的条数，去循环执行呢？<br>就是这个“执行每一个输入行”<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-06.png-blog.photo\" alt=\"Kettle-handbook-08-06.png\"><br>我们执行下看看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-07.png-blog.photo\" alt=\"Kettle-handbook-08-07.png\"></p>\n<h1 id=\"2-使用JS实现\"><a href=\"#2-使用JS实现\" class=\"headerlink\" title=\"2. 使用JS实现\"></a>2. 使用JS实现</h1><p>网上有很多的例子，介绍怎样用JS来控制循环，这里我们也简单的测试下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-08.png-blog.photo\" alt=\"Kettle-handbook-08-08.png\"></p>\n<h2 id=\"2-1-query-the-result\"><a href=\"#2-1-query-the-result\" class=\"headerlink\" title=\"2.1 query_the_result\"></a>2.1 query_the_result</h2><p>这一步，和上面的一样，就是将结果集返回<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-09.png-blog.photo\" alt=\"Kettle-handbook-08-09.png\"></p>\n<h2 id=\"2-2-travers-the-result\"><a href=\"#2-2-travers-the-result\" class=\"headerlink\" title=\"2.2 travers_the_result\"></a>2.2 travers_the_result</h2><p>这里主要是使用JS将结果集进行遍历，通过JS，将一些结果存放到变量里面，在后面的操作中就可以使用了，通过${xxx}的方式使用<br>这个其实和Java、JS里面循环思路一样，通过结果集的总数“total_num”和下标“LoopCounter”进行判断<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-10.png-blog.photo\" alt=\"Kettle-handbook-08-10.png\"></p>\n<h2 id=\"2-3-evaluate-the-loop-count\"><a href=\"#2-3-evaluate-the-loop-count\" class=\"headerlink\" title=\"2.3 evaluate_the_loop_count\"></a>2.3 evaluate_the_loop_count</h2><p>这一步，就是判断下标的值和结果集的总数，进行对比，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-11.png-blog.photo\" alt=\"Kettle-handbook-08-11.png\"></p>\n<h2 id=\"2-4-print-the-log\"><a href=\"#2-4-print-the-log\" class=\"headerlink\" title=\"2.4 print_the_log\"></a>2.4 print_the_log</h2><p>输出下，我们想要使用的变量<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-12.png-blog.photo\" alt=\"Kettle-handbook-08-12.png\"></p>\n<h2 id=\"2-5-manage-the-loop-index\"><a href=\"#2-5-manage-the-loop-index\" class=\"headerlink\" title=\"2.5 manage_the_loop_index\"></a>2.5 manage_the_loop_index</h2><p>这一步，给下标加一，然后获取下一条记录<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-13.png-blog.photo\" alt=\"Kettle-handbook-08-13.png\"><br>好了，执行下，我们看看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-14.png-blog.photo\" alt=\"Kettle-handbook-08-14.png\"><br>好了，循环的使用先介绍到这里</p>\n","site":{"data":{}},"excerpt":"<p>有的时候，我们想要在Kettle中实现这个循环的功能，比如，批量加载数据的时候，我们要对10张表执行同样的操作，只有表名和一些信息不一样，这时，写个循环就省事儿多了</p>\n<h1 id=\"1-遍历结果集实现\"><a href=\"#1-遍历结果集实现\" class=\"headerlink\" title=\"1. 遍历结果集实现\"></a>1. 遍历结果集实现</h1><p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-01.png-blog.photo\" alt=\"Kettle-handbook-08-01.png\"><br>这里的话，我们主要是通过一个将结果集返回，然后通过转换的设置来实现的</p>","more":"<h2 id=\"1-1-query-the-result\"><a href=\"#1-1-query-the-result\" class=\"headerlink\" title=\"1.1 query_the_result\"></a>1.1 query_the_result</h2><p>这个转换，只要是将我们要遍历的结果集返回，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-02.png-blog.photo\" alt=\"Kettle-handbook-08-02.png\"><br>表输入，我们就是返回了5条记录，来做遍历<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-03.png-blog.photo\" alt=\"Kettle-handbook-08-03.png\"><br>复制记录到结果，这个控件的作用，就是我们可以在后面的转换继续使用这个结果集。</p>\n<p>##1.2 traverse_the_result<br>这里呢，我们就是需要遍历的转换了，这里，我们只是获取结果集，然后将结果集输出<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-04.png-blog.photo\" alt=\"Kettle-handbook-08-04.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-05.png-blog.photo\" alt=\"Kettle-handbook-08-05.png\"><br>还有一个很重要的一步，怎样让这个转换可以根据结果集的条数，去循环执行呢？<br>就是这个“执行每一个输入行”<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-06.png-blog.photo\" alt=\"Kettle-handbook-08-06.png\"><br>我们执行下看看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-07.png-blog.photo\" alt=\"Kettle-handbook-08-07.png\"></p>\n<h1 id=\"2-使用JS实现\"><a href=\"#2-使用JS实现\" class=\"headerlink\" title=\"2. 使用JS实现\"></a>2. 使用JS实现</h1><p>网上有很多的例子，介绍怎样用JS来控制循环，这里我们也简单的测试下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-08.png-blog.photo\" alt=\"Kettle-handbook-08-08.png\"></p>\n<h2 id=\"2-1-query-the-result\"><a href=\"#2-1-query-the-result\" class=\"headerlink\" title=\"2.1 query_the_result\"></a>2.1 query_the_result</h2><p>这一步，和上面的一样，就是将结果集返回<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-09.png-blog.photo\" alt=\"Kettle-handbook-08-09.png\"></p>\n<h2 id=\"2-2-travers-the-result\"><a href=\"#2-2-travers-the-result\" class=\"headerlink\" title=\"2.2 travers_the_result\"></a>2.2 travers_the_result</h2><p>这里主要是使用JS将结果集进行遍历，通过JS，将一些结果存放到变量里面，在后面的操作中就可以使用了，通过${xxx}的方式使用<br>这个其实和Java、JS里面循环思路一样，通过结果集的总数“total_num”和下标“LoopCounter”进行判断<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-10.png-blog.photo\" alt=\"Kettle-handbook-08-10.png\"></p>\n<h2 id=\"2-3-evaluate-the-loop-count\"><a href=\"#2-3-evaluate-the-loop-count\" class=\"headerlink\" title=\"2.3 evaluate_the_loop_count\"></a>2.3 evaluate_the_loop_count</h2><p>这一步，就是判断下标的值和结果集的总数，进行对比，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-11.png-blog.photo\" alt=\"Kettle-handbook-08-11.png\"></p>\n<h2 id=\"2-4-print-the-log\"><a href=\"#2-4-print-the-log\" class=\"headerlink\" title=\"2.4 print_the_log\"></a>2.4 print_the_log</h2><p>输出下，我们想要使用的变量<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-12.png-blog.photo\" alt=\"Kettle-handbook-08-12.png\"></p>\n<h2 id=\"2-5-manage-the-loop-index\"><a href=\"#2-5-manage-the-loop-index\" class=\"headerlink\" title=\"2.5 manage_the_loop_index\"></a>2.5 manage_the_loop_index</h2><p>这一步，给下标加一，然后获取下一条记录<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-13.png-blog.photo\" alt=\"Kettle-handbook-08-13.png\"><br>好了，执行下，我们看看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-08-14.png-blog.photo\" alt=\"Kettle-handbook-08-14.png\"><br>好了，循环的使用先介绍到这里</p>"},{"title":"Kettle手册（七）- 资源库的使用","date":"2017-03-29T15:24:44.000Z","_content":"# 1. 为什么使用资源库\n之前，我们新建转换或者作业的时候，都是直接保存在本地，而如果我们是多人开发的话，除了使用SVN等版本控制软件，还可以使用Kettle的资源库，他会将转换、作业直接保存在数据库中，而且，连接资源库的话，我们就不需要每一次都新建数据库连接了，用起来还是蛮方便的。\n\n# 2. 新建资源库\nKettle7.0里面，是在右上角这个Connect来连接的\n![Kettle-handbook-07-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-01.png-blog.photo)\n\n<!-- more -->\n\n## 2.1 资源库的类型\n资源库有3中类型\nPentaho Repository\nDatabase Repository（使用数据库存储）\nFile Repository（使用文件存储）\n![Kettle-handbook-07-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-02.png-blog.photo)\n![Kettle-handbook-07-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-03.png-blog.photo)\n\n## 2.2 新建Pentaho Repository\n我们单击上面的get started 之后，就会进入新建界面\n![Kettle-handbook-07-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-04.png-blog.photo)\n[http://localhost:8080/pentaho](http://localhost:8080/pentaho)\n一开始还没搞懂这个Server到底怎么启动，后来google了半天发现\n![Kettle-handbook-07-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-05.png-blog.photo)\n后来又找到了这个，应该是要安装其他的组件才行，这个类型的库就放弃吧。。\n![Kettle-handbook-07-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-06.png-blog.photo)\n\n## 2.3 Database Repository\n好了，这回，我们选择哪个database的资源库\n![Kettle-handbook-07-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-07.png-blog.photo)\n我们填一个connection的名字，然后配置一个资源库的连接就可以了，最好给kettle新建一个数据库使用\n![Kettle-handbook-07-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-08.png-blog.photo)\n至于数据库连接的话，和转换里面是一样的，大家可以自行新建一个\n![Kettle-handbook-07-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-09.png-blog.photo)\n配置好，以后，大家选择Finish就可以了，然后，我们可以连接下这个库，注意下，这里的用户名和密码，\n默认是admin/admin，大家直接登录就好了，这是Kettle自己初始化的\n这个怎么改呢，暂时还没有发现，待研究，等我再google看看，估计官网上会有。\n（找了下，发现了在哪改密码，就是刚刚的搜索资源库\n![Kettle-handbook-07-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-10.png-blog.photo)\n)\n![Kettle-handbook-07-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-11.png-blog.photo)\n连接后，我们正常使用就好了，没啥两样，会多一些功能，比如，探索资源库这里\n![Kettle-handbook-07-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-12.png-blog.photo)\n我们再保存作业和转换的话，会直接保存在数据库中，\n![Kettle-handbook-07-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-13.png-blog.photo)\n而且，很好的一个功能，个人感觉，就是数据库连接只需要创建一次，在哪里都可以用了，不需要再次创建。\n\n## 2.4 File Repository\n这个和database的资源库，就差不多了，只不过是基于文件的，保存在本地就可以了\n![Kettle-handbook-07-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-14.png-blog.photo)\n这个就和Eclipse一个工作区差不多，转换、作业都保存在这个目录下\n![Kettle-handbook-07-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-15.png-blog.photo)\n好了，关于资源库，就简单的说这些了，大家可以自行连接，试试。\n","source":"_posts/2017-03-29-Kettle-handbook-07.md","raw":"---\ntitle: Kettle手册（七）- 资源库的使用\ndate: 2017-03-29 23:24:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n# 1. 为什么使用资源库\n之前，我们新建转换或者作业的时候，都是直接保存在本地，而如果我们是多人开发的话，除了使用SVN等版本控制软件，还可以使用Kettle的资源库，他会将转换、作业直接保存在数据库中，而且，连接资源库的话，我们就不需要每一次都新建数据库连接了，用起来还是蛮方便的。\n\n# 2. 新建资源库\nKettle7.0里面，是在右上角这个Connect来连接的\n![Kettle-handbook-07-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-01.png-blog.photo)\n\n<!-- more -->\n\n## 2.1 资源库的类型\n资源库有3中类型\nPentaho Repository\nDatabase Repository（使用数据库存储）\nFile Repository（使用文件存储）\n![Kettle-handbook-07-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-02.png-blog.photo)\n![Kettle-handbook-07-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-03.png-blog.photo)\n\n## 2.2 新建Pentaho Repository\n我们单击上面的get started 之后，就会进入新建界面\n![Kettle-handbook-07-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-04.png-blog.photo)\n[http://localhost:8080/pentaho](http://localhost:8080/pentaho)\n一开始还没搞懂这个Server到底怎么启动，后来google了半天发现\n![Kettle-handbook-07-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-05.png-blog.photo)\n后来又找到了这个，应该是要安装其他的组件才行，这个类型的库就放弃吧。。\n![Kettle-handbook-07-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-06.png-blog.photo)\n\n## 2.3 Database Repository\n好了，这回，我们选择哪个database的资源库\n![Kettle-handbook-07-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-07.png-blog.photo)\n我们填一个connection的名字，然后配置一个资源库的连接就可以了，最好给kettle新建一个数据库使用\n![Kettle-handbook-07-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-08.png-blog.photo)\n至于数据库连接的话，和转换里面是一样的，大家可以自行新建一个\n![Kettle-handbook-07-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-09.png-blog.photo)\n配置好，以后，大家选择Finish就可以了，然后，我们可以连接下这个库，注意下，这里的用户名和密码，\n默认是admin/admin，大家直接登录就好了，这是Kettle自己初始化的\n这个怎么改呢，暂时还没有发现，待研究，等我再google看看，估计官网上会有。\n（找了下，发现了在哪改密码，就是刚刚的搜索资源库\n![Kettle-handbook-07-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-10.png-blog.photo)\n)\n![Kettle-handbook-07-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-11.png-blog.photo)\n连接后，我们正常使用就好了，没啥两样，会多一些功能，比如，探索资源库这里\n![Kettle-handbook-07-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-12.png-blog.photo)\n我们再保存作业和转换的话，会直接保存在数据库中，\n![Kettle-handbook-07-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-13.png-blog.photo)\n而且，很好的一个功能，个人感觉，就是数据库连接只需要创建一次，在哪里都可以用了，不需要再次创建。\n\n## 2.4 File Repository\n这个和database的资源库，就差不多了，只不过是基于文件的，保存在本地就可以了\n![Kettle-handbook-07-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-14.png-blog.photo)\n这个就和Eclipse一个工作区差不多，转换、作业都保存在这个目录下\n![Kettle-handbook-07-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-15.png-blog.photo)\n好了，关于资源库，就简单的说这些了，大家可以自行连接，试试。\n","slug":"Kettle-handbook-07","published":1,"updated":"2017-08-27T13:28:47.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1c3000l88inpkhizn88","content":"<h1 id=\"1-为什么使用资源库\"><a href=\"#1-为什么使用资源库\" class=\"headerlink\" title=\"1. 为什么使用资源库\"></a>1. 为什么使用资源库</h1><p>之前，我们新建转换或者作业的时候，都是直接保存在本地，而如果我们是多人开发的话，除了使用SVN等版本控制软件，还可以使用Kettle的资源库，他会将转换、作业直接保存在数据库中，而且，连接资源库的话，我们就不需要每一次都新建数据库连接了，用起来还是蛮方便的。</p>\n<h1 id=\"2-新建资源库\"><a href=\"#2-新建资源库\" class=\"headerlink\" title=\"2. 新建资源库\"></a>2. 新建资源库</h1><p>Kettle7.0里面，是在右上角这个Connect来连接的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-01.png-blog.photo\" alt=\"Kettle-handbook-07-01.png\"></p>\n<a id=\"more\"></a>\n<h2 id=\"2-1-资源库的类型\"><a href=\"#2-1-资源库的类型\" class=\"headerlink\" title=\"2.1 资源库的类型\"></a>2.1 资源库的类型</h2><p>资源库有3中类型<br>Pentaho Repository<br>Database Repository（使用数据库存储）<br>File Repository（使用文件存储）<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-02.png-blog.photo\" alt=\"Kettle-handbook-07-02.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-03.png-blog.photo\" alt=\"Kettle-handbook-07-03.png\"></p>\n<h2 id=\"2-2-新建Pentaho-Repository\"><a href=\"#2-2-新建Pentaho-Repository\" class=\"headerlink\" title=\"2.2 新建Pentaho Repository\"></a>2.2 新建Pentaho Repository</h2><p>我们单击上面的get started 之后，就会进入新建界面<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-04.png-blog.photo\" alt=\"Kettle-handbook-07-04.png\"><br><a href=\"http://localhost:8080/pentaho\" target=\"_blank\" rel=\"external\">http://localhost:8080/pentaho</a><br>一开始还没搞懂这个Server到底怎么启动，后来google了半天发现<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-05.png-blog.photo\" alt=\"Kettle-handbook-07-05.png\"><br>后来又找到了这个，应该是要安装其他的组件才行，这个类型的库就放弃吧。。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-06.png-blog.photo\" alt=\"Kettle-handbook-07-06.png\"></p>\n<h2 id=\"2-3-Database-Repository\"><a href=\"#2-3-Database-Repository\" class=\"headerlink\" title=\"2.3 Database Repository\"></a>2.3 Database Repository</h2><p>好了，这回，我们选择哪个database的资源库<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-07.png-blog.photo\" alt=\"Kettle-handbook-07-07.png\"><br>我们填一个connection的名字，然后配置一个资源库的连接就可以了，最好给kettle新建一个数据库使用<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-08.png-blog.photo\" alt=\"Kettle-handbook-07-08.png\"><br>至于数据库连接的话，和转换里面是一样的，大家可以自行新建一个<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-09.png-blog.photo\" alt=\"Kettle-handbook-07-09.png\"><br>配置好，以后，大家选择Finish就可以了，然后，我们可以连接下这个库，注意下，这里的用户名和密码，<br>默认是admin/admin，大家直接登录就好了，这是Kettle自己初始化的<br>这个怎么改呢，暂时还没有发现，待研究，等我再google看看，估计官网上会有。<br>（找了下，发现了在哪改密码，就是刚刚的搜索资源库<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-10.png-blog.photo\" alt=\"Kettle-handbook-07-10.png\"><br>)<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-11.png-blog.photo\" alt=\"Kettle-handbook-07-11.png\"><br>连接后，我们正常使用就好了，没啥两样，会多一些功能，比如，探索资源库这里<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-12.png-blog.photo\" alt=\"Kettle-handbook-07-12.png\"><br>我们再保存作业和转换的话，会直接保存在数据库中，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-13.png-blog.photo\" alt=\"Kettle-handbook-07-13.png\"><br>而且，很好的一个功能，个人感觉，就是数据库连接只需要创建一次，在哪里都可以用了，不需要再次创建。</p>\n<h2 id=\"2-4-File-Repository\"><a href=\"#2-4-File-Repository\" class=\"headerlink\" title=\"2.4 File Repository\"></a>2.4 File Repository</h2><p>这个和database的资源库，就差不多了，只不过是基于文件的，保存在本地就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-14.png-blog.photo\" alt=\"Kettle-handbook-07-14.png\"><br>这个就和Eclipse一个工作区差不多，转换、作业都保存在这个目录下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-15.png-blog.photo\" alt=\"Kettle-handbook-07-15.png\"><br>好了，关于资源库，就简单的说这些了，大家可以自行连接，试试。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-为什么使用资源库\"><a href=\"#1-为什么使用资源库\" class=\"headerlink\" title=\"1. 为什么使用资源库\"></a>1. 为什么使用资源库</h1><p>之前，我们新建转换或者作业的时候，都是直接保存在本地，而如果我们是多人开发的话，除了使用SVN等版本控制软件，还可以使用Kettle的资源库，他会将转换、作业直接保存在数据库中，而且，连接资源库的话，我们就不需要每一次都新建数据库连接了，用起来还是蛮方便的。</p>\n<h1 id=\"2-新建资源库\"><a href=\"#2-新建资源库\" class=\"headerlink\" title=\"2. 新建资源库\"></a>2. 新建资源库</h1><p>Kettle7.0里面，是在右上角这个Connect来连接的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-01.png-blog.photo\" alt=\"Kettle-handbook-07-01.png\"></p>","more":"<h2 id=\"2-1-资源库的类型\"><a href=\"#2-1-资源库的类型\" class=\"headerlink\" title=\"2.1 资源库的类型\"></a>2.1 资源库的类型</h2><p>资源库有3中类型<br>Pentaho Repository<br>Database Repository（使用数据库存储）<br>File Repository（使用文件存储）<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-02.png-blog.photo\" alt=\"Kettle-handbook-07-02.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-03.png-blog.photo\" alt=\"Kettle-handbook-07-03.png\"></p>\n<h2 id=\"2-2-新建Pentaho-Repository\"><a href=\"#2-2-新建Pentaho-Repository\" class=\"headerlink\" title=\"2.2 新建Pentaho Repository\"></a>2.2 新建Pentaho Repository</h2><p>我们单击上面的get started 之后，就会进入新建界面<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-04.png-blog.photo\" alt=\"Kettle-handbook-07-04.png\"><br><a href=\"http://localhost:8080/pentaho\" target=\"_blank\" rel=\"external\">http://localhost:8080/pentaho</a><br>一开始还没搞懂这个Server到底怎么启动，后来google了半天发现<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-05.png-blog.photo\" alt=\"Kettle-handbook-07-05.png\"><br>后来又找到了这个，应该是要安装其他的组件才行，这个类型的库就放弃吧。。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-06.png-blog.photo\" alt=\"Kettle-handbook-07-06.png\"></p>\n<h2 id=\"2-3-Database-Repository\"><a href=\"#2-3-Database-Repository\" class=\"headerlink\" title=\"2.3 Database Repository\"></a>2.3 Database Repository</h2><p>好了，这回，我们选择哪个database的资源库<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-07.png-blog.photo\" alt=\"Kettle-handbook-07-07.png\"><br>我们填一个connection的名字，然后配置一个资源库的连接就可以了，最好给kettle新建一个数据库使用<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-08.png-blog.photo\" alt=\"Kettle-handbook-07-08.png\"><br>至于数据库连接的话，和转换里面是一样的，大家可以自行新建一个<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-09.png-blog.photo\" alt=\"Kettle-handbook-07-09.png\"><br>配置好，以后，大家选择Finish就可以了，然后，我们可以连接下这个库，注意下，这里的用户名和密码，<br>默认是admin/admin，大家直接登录就好了，这是Kettle自己初始化的<br>这个怎么改呢，暂时还没有发现，待研究，等我再google看看，估计官网上会有。<br>（找了下，发现了在哪改密码，就是刚刚的搜索资源库<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-10.png-blog.photo\" alt=\"Kettle-handbook-07-10.png\"><br>)<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-11.png-blog.photo\" alt=\"Kettle-handbook-07-11.png\"><br>连接后，我们正常使用就好了，没啥两样，会多一些功能，比如，探索资源库这里<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-12.png-blog.photo\" alt=\"Kettle-handbook-07-12.png\"><br>我们再保存作业和转换的话，会直接保存在数据库中，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-13.png-blog.photo\" alt=\"Kettle-handbook-07-13.png\"><br>而且，很好的一个功能，个人感觉，就是数据库连接只需要创建一次，在哪里都可以用了，不需要再次创建。</p>\n<h2 id=\"2-4-File-Repository\"><a href=\"#2-4-File-Repository\" class=\"headerlink\" title=\"2.4 File Repository\"></a>2.4 File Repository</h2><p>这个和database的资源库，就差不多了，只不过是基于文件的，保存在本地就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-14.png-blog.photo\" alt=\"Kettle-handbook-07-14.png\"><br>这个就和Eclipse一个工作区差不多，转换、作业都保存在这个目录下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-07-15.png-blog.photo\" alt=\"Kettle-handbook-07-15.png\"><br>好了，关于资源库，就简单的说这些了，大家可以自行连接，试试。</p>"},{"title":"Kettle手册（九）- 发送邮件","date":"2017-03-30T03:24:44.000Z","_content":"\n在Kettle里面，我们每天执行完调度之后，想要监控下JOB的执行状态，通常我们可以会发送邮件，可以的话，还可以发送短信。\n\n在Kettle里面，发送邮件很方便，这里，我们就简单的测试下。\n\n# 1. 在作业中发送简单邮件\n我们只需要使用到这个控件就可以了，\n![Kettle-handbook-09-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-01.png-blog.photo)\n这样，一个简单的发送邮件流程就好了\n![Kettle-handbook-09-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-02.png-blog.photo)\n\n<!-- more -->\n\n控件的配置：\n收件人，抄送啊，信息，自行填写就行，多个收件人，使用“空格”分隔\n![Kettle-handbook-09-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-03.png-blog.photo)\n在服务器这里，我们填上服务器的信息就可以了\n![Kettle-handbook-09-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-04.png-blog.photo)\n这里是邮件消息的一些配置，\n![Kettle-handbook-09-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-05.png-blog.photo)\n暂时先到这里，我们测试下结果\n![Kettle-handbook-09-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-06.png-blog.photo)\n然后，查看邮箱，我们会接收到这个邮件，刚刚简单测了下这个“回复名称”，就是\n![Kettle-handbook-09-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-07.png-blog.photo)\n![Kettle-handbook-09-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-08.png-blog.photo)\n这里试过中文，会有问题，有乱码，可能是Windows下的原因，没有再去测试验证\n![Kettle-handbook-09-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-09.png-blog.photo)\n就是收到邮件时的一个发件人的名称，不同邮箱显示的不一样\n\n# 2. 增加附件\n附件的话，也很简单，上面的面板中直接配置就可以了\n![Kettle-handbook-09-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-10.png-blog.photo)\n然后，我们需要将待发送的邮件，添加到结果集中\n![Kettle-handbook-09-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-11.png-blog.photo)\n在控件中，我们添加好文件就行了。\n![Kettle-handbook-09-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-12.png-blog.photo)\n![Kettle-handbook-09-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-13.png-blog.photo)\n我们再次发送，验证下\n![Kettle-handbook-09-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-14.png-blog.photo)\n好了，附件也可以了，思路就是这样的，实际应用时，可能还有些问题得注意下\n\n# 3. 自定义邮件内容\n\n到这里，我们会看到，邮件的正文内容，可能并不是我们想要的， 我们想要的可能是这样的信息\n![Kettle-handbook-09-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-15.png-blog.photo)\n这就需要自定义正文内容，我们需要勾选下面这个选项\n![Kettle-handbook-09-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-16.png-blog.photo)\n这里是可以使用变量的，我们可以拼接HTML来实现\n![Kettle-handbook-09-17.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-17.png-blog.photo)\n![Kettle-handbook-09-18.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-18.png-blog.photo)\n好了，邮件的介绍，大概就这些，在转换中，也是可以使用的，大同小异\n\n","source":"_posts/2017-03-30-Kettle-handbook-09.md","raw":"---\ntitle: Kettle手册（九）- 发送邮件 \ndate: 2017-03-30 11:24:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n\n在Kettle里面，我们每天执行完调度之后，想要监控下JOB的执行状态，通常我们可以会发送邮件，可以的话，还可以发送短信。\n\n在Kettle里面，发送邮件很方便，这里，我们就简单的测试下。\n\n# 1. 在作业中发送简单邮件\n我们只需要使用到这个控件就可以了，\n![Kettle-handbook-09-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-01.png-blog.photo)\n这样，一个简单的发送邮件流程就好了\n![Kettle-handbook-09-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-02.png-blog.photo)\n\n<!-- more -->\n\n控件的配置：\n收件人，抄送啊，信息，自行填写就行，多个收件人，使用“空格”分隔\n![Kettle-handbook-09-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-03.png-blog.photo)\n在服务器这里，我们填上服务器的信息就可以了\n![Kettle-handbook-09-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-04.png-blog.photo)\n这里是邮件消息的一些配置，\n![Kettle-handbook-09-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-05.png-blog.photo)\n暂时先到这里，我们测试下结果\n![Kettle-handbook-09-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-06.png-blog.photo)\n然后，查看邮箱，我们会接收到这个邮件，刚刚简单测了下这个“回复名称”，就是\n![Kettle-handbook-09-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-07.png-blog.photo)\n![Kettle-handbook-09-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-08.png-blog.photo)\n这里试过中文，会有问题，有乱码，可能是Windows下的原因，没有再去测试验证\n![Kettle-handbook-09-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-09.png-blog.photo)\n就是收到邮件时的一个发件人的名称，不同邮箱显示的不一样\n\n# 2. 增加附件\n附件的话，也很简单，上面的面板中直接配置就可以了\n![Kettle-handbook-09-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-10.png-blog.photo)\n然后，我们需要将待发送的邮件，添加到结果集中\n![Kettle-handbook-09-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-11.png-blog.photo)\n在控件中，我们添加好文件就行了。\n![Kettle-handbook-09-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-12.png-blog.photo)\n![Kettle-handbook-09-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-13.png-blog.photo)\n我们再次发送，验证下\n![Kettle-handbook-09-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-14.png-blog.photo)\n好了，附件也可以了，思路就是这样的，实际应用时，可能还有些问题得注意下\n\n# 3. 自定义邮件内容\n\n到这里，我们会看到，邮件的正文内容，可能并不是我们想要的， 我们想要的可能是这样的信息\n![Kettle-handbook-09-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-15.png-blog.photo)\n这就需要自定义正文内容，我们需要勾选下面这个选项\n![Kettle-handbook-09-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-16.png-blog.photo)\n这里是可以使用变量的，我们可以拼接HTML来实现\n![Kettle-handbook-09-17.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-17.png-blog.photo)\n![Kettle-handbook-09-18.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-18.png-blog.photo)\n好了，邮件的介绍，大概就这些，在转换中，也是可以使用的，大同小异\n\n","slug":"Kettle-handbook-09","published":1,"updated":"2017-08-27T14:05:09.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1c6000o88inr1gqltjd","content":"<p>在Kettle里面，我们每天执行完调度之后，想要监控下JOB的执行状态，通常我们可以会发送邮件，可以的话，还可以发送短信。</p>\n<p>在Kettle里面，发送邮件很方便，这里，我们就简单的测试下。</p>\n<h1 id=\"1-在作业中发送简单邮件\"><a href=\"#1-在作业中发送简单邮件\" class=\"headerlink\" title=\"1. 在作业中发送简单邮件\"></a>1. 在作业中发送简单邮件</h1><p>我们只需要使用到这个控件就可以了，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-01.png-blog.photo\" alt=\"Kettle-handbook-09-01.png\"><br>这样，一个简单的发送邮件流程就好了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-02.png-blog.photo\" alt=\"Kettle-handbook-09-02.png\"></p>\n<a id=\"more\"></a>\n<p>控件的配置：<br>收件人，抄送啊，信息，自行填写就行，多个收件人，使用“空格”分隔<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-03.png-blog.photo\" alt=\"Kettle-handbook-09-03.png\"><br>在服务器这里，我们填上服务器的信息就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-04.png-blog.photo\" alt=\"Kettle-handbook-09-04.png\"><br>这里是邮件消息的一些配置，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-05.png-blog.photo\" alt=\"Kettle-handbook-09-05.png\"><br>暂时先到这里，我们测试下结果<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-06.png-blog.photo\" alt=\"Kettle-handbook-09-06.png\"><br>然后，查看邮箱，我们会接收到这个邮件，刚刚简单测了下这个“回复名称”，就是<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-07.png-blog.photo\" alt=\"Kettle-handbook-09-07.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-08.png-blog.photo\" alt=\"Kettle-handbook-09-08.png\"><br>这里试过中文，会有问题，有乱码，可能是Windows下的原因，没有再去测试验证<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-09.png-blog.photo\" alt=\"Kettle-handbook-09-09.png\"><br>就是收到邮件时的一个发件人的名称，不同邮箱显示的不一样</p>\n<h1 id=\"2-增加附件\"><a href=\"#2-增加附件\" class=\"headerlink\" title=\"2. 增加附件\"></a>2. 增加附件</h1><p>附件的话，也很简单，上面的面板中直接配置就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-10.png-blog.photo\" alt=\"Kettle-handbook-09-10.png\"><br>然后，我们需要将待发送的邮件，添加到结果集中<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-11.png-blog.photo\" alt=\"Kettle-handbook-09-11.png\"><br>在控件中，我们添加好文件就行了。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-12.png-blog.photo\" alt=\"Kettle-handbook-09-12.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-13.png-blog.photo\" alt=\"Kettle-handbook-09-13.png\"><br>我们再次发送，验证下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-14.png-blog.photo\" alt=\"Kettle-handbook-09-14.png\"><br>好了，附件也可以了，思路就是这样的，实际应用时，可能还有些问题得注意下</p>\n<h1 id=\"3-自定义邮件内容\"><a href=\"#3-自定义邮件内容\" class=\"headerlink\" title=\"3. 自定义邮件内容\"></a>3. 自定义邮件内容</h1><p>到这里，我们会看到，邮件的正文内容，可能并不是我们想要的， 我们想要的可能是这样的信息<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-15.png-blog.photo\" alt=\"Kettle-handbook-09-15.png\"><br>这就需要自定义正文内容，我们需要勾选下面这个选项<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-16.png-blog.photo\" alt=\"Kettle-handbook-09-16.png\"><br>这里是可以使用变量的，我们可以拼接HTML来实现<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-17.png-blog.photo\" alt=\"Kettle-handbook-09-17.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-18.png-blog.photo\" alt=\"Kettle-handbook-09-18.png\"><br>好了，邮件的介绍，大概就这些，在转换中，也是可以使用的，大同小异</p>\n","site":{"data":{}},"excerpt":"<p>在Kettle里面，我们每天执行完调度之后，想要监控下JOB的执行状态，通常我们可以会发送邮件，可以的话，还可以发送短信。</p>\n<p>在Kettle里面，发送邮件很方便，这里，我们就简单的测试下。</p>\n<h1 id=\"1-在作业中发送简单邮件\"><a href=\"#1-在作业中发送简单邮件\" class=\"headerlink\" title=\"1. 在作业中发送简单邮件\"></a>1. 在作业中发送简单邮件</h1><p>我们只需要使用到这个控件就可以了，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-01.png-blog.photo\" alt=\"Kettle-handbook-09-01.png\"><br>这样，一个简单的发送邮件流程就好了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-02.png-blog.photo\" alt=\"Kettle-handbook-09-02.png\"></p>","more":"<p>控件的配置：<br>收件人，抄送啊，信息，自行填写就行，多个收件人，使用“空格”分隔<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-03.png-blog.photo\" alt=\"Kettle-handbook-09-03.png\"><br>在服务器这里，我们填上服务器的信息就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-04.png-blog.photo\" alt=\"Kettle-handbook-09-04.png\"><br>这里是邮件消息的一些配置，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-05.png-blog.photo\" alt=\"Kettle-handbook-09-05.png\"><br>暂时先到这里，我们测试下结果<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-06.png-blog.photo\" alt=\"Kettle-handbook-09-06.png\"><br>然后，查看邮箱，我们会接收到这个邮件，刚刚简单测了下这个“回复名称”，就是<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-07.png-blog.photo\" alt=\"Kettle-handbook-09-07.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-08.png-blog.photo\" alt=\"Kettle-handbook-09-08.png\"><br>这里试过中文，会有问题，有乱码，可能是Windows下的原因，没有再去测试验证<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-09.png-blog.photo\" alt=\"Kettle-handbook-09-09.png\"><br>就是收到邮件时的一个发件人的名称，不同邮箱显示的不一样</p>\n<h1 id=\"2-增加附件\"><a href=\"#2-增加附件\" class=\"headerlink\" title=\"2. 增加附件\"></a>2. 增加附件</h1><p>附件的话，也很简单，上面的面板中直接配置就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-10.png-blog.photo\" alt=\"Kettle-handbook-09-10.png\"><br>然后，我们需要将待发送的邮件，添加到结果集中<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-11.png-blog.photo\" alt=\"Kettle-handbook-09-11.png\"><br>在控件中，我们添加好文件就行了。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-12.png-blog.photo\" alt=\"Kettle-handbook-09-12.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-13.png-blog.photo\" alt=\"Kettle-handbook-09-13.png\"><br>我们再次发送，验证下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-14.png-blog.photo\" alt=\"Kettle-handbook-09-14.png\"><br>好了，附件也可以了，思路就是这样的，实际应用时，可能还有些问题得注意下</p>\n<h1 id=\"3-自定义邮件内容\"><a href=\"#3-自定义邮件内容\" class=\"headerlink\" title=\"3. 自定义邮件内容\"></a>3. 自定义邮件内容</h1><p>到这里，我们会看到，邮件的正文内容，可能并不是我们想要的， 我们想要的可能是这样的信息<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-15.png-blog.photo\" alt=\"Kettle-handbook-09-15.png\"><br>这就需要自定义正文内容，我们需要勾选下面这个选项<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-16.png-blog.photo\" alt=\"Kettle-handbook-09-16.png\"><br>这里是可以使用变量的，我们可以拼接HTML来实现<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-17.png-blog.photo\" alt=\"Kettle-handbook-09-17.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-09-18.png-blog.photo\" alt=\"Kettle-handbook-09-18.png\"><br>好了，邮件的介绍，大概就这些，在转换中，也是可以使用的，大同小异</p>"},{"title":"Kettle手册（十一）- 用PGP加密、加密文件","date":"2017-04-11T03:24:44.000Z","_content":"看到有同学提问，以前也没用过，百度了一下，找了些资料，这里记录下。\n\n# 1. 安装gpg4win\n这个gpg4win是干嘛的呢，我们可以去他的官网看看：[gpg4win](https://www.gpg4win.org/index.html)\n目前，只知道他是加密的，这个是对Windows平台使用的\n![Kettle-handbook-11-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-01.png-blog.photo)\n这里可能还有个PGP的概念，看看百度百科\n![Kettle-handbook-11-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-02.png-blog.photo)\n\n<!-- more -->\n\n好了，具体概念，大家可以自行找找，我们下载下来，然后安装一下即可\n![Kettle-handbook-11-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-03.png-blog.photo)\n这个是昨天安装的，就不粘贴步骤了，安装完后，我们要先创建一个证书的东西，我们打开这个管理界面\n![Kettle-handbook-11-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-04.png-blog.photo)\n打开后，是这样一个界面，（网上有这个的安装配置教程，这里也简单介绍下，不清楚的可以再百度看看）\n![Kettle-handbook-11-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-05.png-blog.photo)\n我们新建一个Certificate\n![Kettle-handbook-11-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-06.png-blog.photo)\n我们选择一个加密方式，使用第一个就可以了\n![Kettle-handbook-11-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-07.png-blog.photo)\n我们输入些基本信息然后next就可以\n![Kettle-handbook-11-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-08.png-blog.photo)\n![Kettle-handbook-11-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-09.png-blog.photo)\n然后，我们得输入一段密钥\n![Kettle-handbook-11-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-10.png-blog.photo)\n好了，这里，就配置完成了\n![Kettle-handbook-11-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-11.png-blog.photo)\n![Kettle-handbook-11-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-12.png-blog.photo)\n\n# 2. 用PGP加密文件\n好了，这里，我们新建一个作业，我们主要使用这2个控件\n![Kettle-handbook-11-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-13.png-blog.photo)\n一个很简单的流程，\n![Kettle-handbook-11-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-14.png-blog.photo)\n我们做些简单的配置，\n一个是GPG的目录（就是我们上面安装的那个）\n![Kettle-handbook-11-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-15.png-blog.photo)\n还有就是，我们的要加密的文件和一个目标文件名，注意，这里我们得填写一下“用户ID”，就是我们前面新建的那个用户名就可以了\n![Kettle-handbook-11-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-16.png-blog.photo)\n![Kettle-handbook-11-17.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-17.png-blog.photo)\n这里，可以勾选一下，目标是一个文件\n![Kettle-handbook-11-18.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-18.png-blog.photo)\n好了，然后，我们执行下就可以了\n我们源文件：\n![Kettle-handbook-11-19.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-19.png-blog.photo)\n加密后的文件：\n![Kettle-handbook-11-20.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-20.png-blog.photo)\n下面，我们再看看，怎样解密\n\n# 3. 用PGP解密文件\n知道了加密，解密也是一样的，\n![Kettle-handbook-11-21.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-21.png-blog.photo)\n这里的话，配置和上面差不多，这里，我们要填写一个“密钥”，就是我们上面创建时，输入的一个密码\n![Kettle-handbook-11-22.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-22.png-blog.photo)\n![Kettle-handbook-11-23.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-23.png-blog.photo)\n我们运行一下，解密后，是一样的\n![Kettle-handbook-11-24.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-24.png-blog.photo)\n好了，就简单介绍到这里\n","source":"_posts/2017-04-11-Kettle-handbook-11.md","raw":"---\ntitle: Kettle手册（十一）- 用PGP加密、加密文件\ndate: 2017-04-11 11:24:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n看到有同学提问，以前也没用过，百度了一下，找了些资料，这里记录下。\n\n# 1. 安装gpg4win\n这个gpg4win是干嘛的呢，我们可以去他的官网看看：[gpg4win](https://www.gpg4win.org/index.html)\n目前，只知道他是加密的，这个是对Windows平台使用的\n![Kettle-handbook-11-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-01.png-blog.photo)\n这里可能还有个PGP的概念，看看百度百科\n![Kettle-handbook-11-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-02.png-blog.photo)\n\n<!-- more -->\n\n好了，具体概念，大家可以自行找找，我们下载下来，然后安装一下即可\n![Kettle-handbook-11-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-03.png-blog.photo)\n这个是昨天安装的，就不粘贴步骤了，安装完后，我们要先创建一个证书的东西，我们打开这个管理界面\n![Kettle-handbook-11-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-04.png-blog.photo)\n打开后，是这样一个界面，（网上有这个的安装配置教程，这里也简单介绍下，不清楚的可以再百度看看）\n![Kettle-handbook-11-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-05.png-blog.photo)\n我们新建一个Certificate\n![Kettle-handbook-11-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-06.png-blog.photo)\n我们选择一个加密方式，使用第一个就可以了\n![Kettle-handbook-11-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-07.png-blog.photo)\n我们输入些基本信息然后next就可以\n![Kettle-handbook-11-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-08.png-blog.photo)\n![Kettle-handbook-11-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-09.png-blog.photo)\n然后，我们得输入一段密钥\n![Kettle-handbook-11-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-10.png-blog.photo)\n好了，这里，就配置完成了\n![Kettle-handbook-11-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-11.png-blog.photo)\n![Kettle-handbook-11-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-12.png-blog.photo)\n\n# 2. 用PGP加密文件\n好了，这里，我们新建一个作业，我们主要使用这2个控件\n![Kettle-handbook-11-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-13.png-blog.photo)\n一个很简单的流程，\n![Kettle-handbook-11-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-14.png-blog.photo)\n我们做些简单的配置，\n一个是GPG的目录（就是我们上面安装的那个）\n![Kettle-handbook-11-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-15.png-blog.photo)\n还有就是，我们的要加密的文件和一个目标文件名，注意，这里我们得填写一下“用户ID”，就是我们前面新建的那个用户名就可以了\n![Kettle-handbook-11-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-16.png-blog.photo)\n![Kettle-handbook-11-17.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-17.png-blog.photo)\n这里，可以勾选一下，目标是一个文件\n![Kettle-handbook-11-18.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-18.png-blog.photo)\n好了，然后，我们执行下就可以了\n我们源文件：\n![Kettle-handbook-11-19.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-19.png-blog.photo)\n加密后的文件：\n![Kettle-handbook-11-20.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-20.png-blog.photo)\n下面，我们再看看，怎样解密\n\n# 3. 用PGP解密文件\n知道了加密，解密也是一样的，\n![Kettle-handbook-11-21.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-21.png-blog.photo)\n这里的话，配置和上面差不多，这里，我们要填写一个“密钥”，就是我们上面创建时，输入的一个密码\n![Kettle-handbook-11-22.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-22.png-blog.photo)\n![Kettle-handbook-11-23.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-23.png-blog.photo)\n我们运行一下，解密后，是一样的\n![Kettle-handbook-11-24.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-24.png-blog.photo)\n好了，就简单介绍到这里\n","slug":"Kettle-handbook-11","published":1,"updated":"2017-08-27T14:31:04.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1c9000r88ind8fcqrr2","content":"<p>看到有同学提问，以前也没用过，百度了一下，找了些资料，这里记录下。</p>\n<h1 id=\"1-安装gpg4win\"><a href=\"#1-安装gpg4win\" class=\"headerlink\" title=\"1. 安装gpg4win\"></a>1. 安装gpg4win</h1><p>这个gpg4win是干嘛的呢，我们可以去他的官网看看：<a href=\"https://www.gpg4win.org/index.html\" target=\"_blank\" rel=\"external\">gpg4win</a><br>目前，只知道他是加密的，这个是对Windows平台使用的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-01.png-blog.photo\" alt=\"Kettle-handbook-11-01.png\"><br>这里可能还有个PGP的概念，看看百度百科<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-02.png-blog.photo\" alt=\"Kettle-handbook-11-02.png\"></p>\n<a id=\"more\"></a>\n<p>好了，具体概念，大家可以自行找找，我们下载下来，然后安装一下即可<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-03.png-blog.photo\" alt=\"Kettle-handbook-11-03.png\"><br>这个是昨天安装的，就不粘贴步骤了，安装完后，我们要先创建一个证书的东西，我们打开这个管理界面<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-04.png-blog.photo\" alt=\"Kettle-handbook-11-04.png\"><br>打开后，是这样一个界面，（网上有这个的安装配置教程，这里也简单介绍下，不清楚的可以再百度看看）<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-05.png-blog.photo\" alt=\"Kettle-handbook-11-05.png\"><br>我们新建一个Certificate<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-06.png-blog.photo\" alt=\"Kettle-handbook-11-06.png\"><br>我们选择一个加密方式，使用第一个就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-07.png-blog.photo\" alt=\"Kettle-handbook-11-07.png\"><br>我们输入些基本信息然后next就可以<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-08.png-blog.photo\" alt=\"Kettle-handbook-11-08.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-09.png-blog.photo\" alt=\"Kettle-handbook-11-09.png\"><br>然后，我们得输入一段密钥<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-10.png-blog.photo\" alt=\"Kettle-handbook-11-10.png\"><br>好了，这里，就配置完成了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-11.png-blog.photo\" alt=\"Kettle-handbook-11-11.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-12.png-blog.photo\" alt=\"Kettle-handbook-11-12.png\"></p>\n<h1 id=\"2-用PGP加密文件\"><a href=\"#2-用PGP加密文件\" class=\"headerlink\" title=\"2. 用PGP加密文件\"></a>2. 用PGP加密文件</h1><p>好了，这里，我们新建一个作业，我们主要使用这2个控件<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-13.png-blog.photo\" alt=\"Kettle-handbook-11-13.png\"><br>一个很简单的流程，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-14.png-blog.photo\" alt=\"Kettle-handbook-11-14.png\"><br>我们做些简单的配置，<br>一个是GPG的目录（就是我们上面安装的那个）<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-15.png-blog.photo\" alt=\"Kettle-handbook-11-15.png\"><br>还有就是，我们的要加密的文件和一个目标文件名，注意，这里我们得填写一下“用户ID”，就是我们前面新建的那个用户名就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-16.png-blog.photo\" alt=\"Kettle-handbook-11-16.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-17.png-blog.photo\" alt=\"Kettle-handbook-11-17.png\"><br>这里，可以勾选一下，目标是一个文件<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-18.png-blog.photo\" alt=\"Kettle-handbook-11-18.png\"><br>好了，然后，我们执行下就可以了<br>我们源文件：<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-19.png-blog.photo\" alt=\"Kettle-handbook-11-19.png\"><br>加密后的文件：<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-20.png-blog.photo\" alt=\"Kettle-handbook-11-20.png\"><br>下面，我们再看看，怎样解密</p>\n<h1 id=\"3-用PGP解密文件\"><a href=\"#3-用PGP解密文件\" class=\"headerlink\" title=\"3. 用PGP解密文件\"></a>3. 用PGP解密文件</h1><p>知道了加密，解密也是一样的，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-21.png-blog.photo\" alt=\"Kettle-handbook-11-21.png\"><br>这里的话，配置和上面差不多，这里，我们要填写一个“密钥”，就是我们上面创建时，输入的一个密码<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-22.png-blog.photo\" alt=\"Kettle-handbook-11-22.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-23.png-blog.photo\" alt=\"Kettle-handbook-11-23.png\"><br>我们运行一下，解密后，是一样的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-24.png-blog.photo\" alt=\"Kettle-handbook-11-24.png\"><br>好了，就简单介绍到这里</p>\n","site":{"data":{}},"excerpt":"<p>看到有同学提问，以前也没用过，百度了一下，找了些资料，这里记录下。</p>\n<h1 id=\"1-安装gpg4win\"><a href=\"#1-安装gpg4win\" class=\"headerlink\" title=\"1. 安装gpg4win\"></a>1. 安装gpg4win</h1><p>这个gpg4win是干嘛的呢，我们可以去他的官网看看：<a href=\"https://www.gpg4win.org/index.html\" target=\"_blank\" rel=\"external\">gpg4win</a><br>目前，只知道他是加密的，这个是对Windows平台使用的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-01.png-blog.photo\" alt=\"Kettle-handbook-11-01.png\"><br>这里可能还有个PGP的概念，看看百度百科<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-02.png-blog.photo\" alt=\"Kettle-handbook-11-02.png\"></p>","more":"<p>好了，具体概念，大家可以自行找找，我们下载下来，然后安装一下即可<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-03.png-blog.photo\" alt=\"Kettle-handbook-11-03.png\"><br>这个是昨天安装的，就不粘贴步骤了，安装完后，我们要先创建一个证书的东西，我们打开这个管理界面<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-04.png-blog.photo\" alt=\"Kettle-handbook-11-04.png\"><br>打开后，是这样一个界面，（网上有这个的安装配置教程，这里也简单介绍下，不清楚的可以再百度看看）<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-05.png-blog.photo\" alt=\"Kettle-handbook-11-05.png\"><br>我们新建一个Certificate<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-06.png-blog.photo\" alt=\"Kettle-handbook-11-06.png\"><br>我们选择一个加密方式，使用第一个就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-07.png-blog.photo\" alt=\"Kettle-handbook-11-07.png\"><br>我们输入些基本信息然后next就可以<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-08.png-blog.photo\" alt=\"Kettle-handbook-11-08.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-09.png-blog.photo\" alt=\"Kettle-handbook-11-09.png\"><br>然后，我们得输入一段密钥<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-10.png-blog.photo\" alt=\"Kettle-handbook-11-10.png\"><br>好了，这里，就配置完成了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-11.png-blog.photo\" alt=\"Kettle-handbook-11-11.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-12.png-blog.photo\" alt=\"Kettle-handbook-11-12.png\"></p>\n<h1 id=\"2-用PGP加密文件\"><a href=\"#2-用PGP加密文件\" class=\"headerlink\" title=\"2. 用PGP加密文件\"></a>2. 用PGP加密文件</h1><p>好了，这里，我们新建一个作业，我们主要使用这2个控件<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-13.png-blog.photo\" alt=\"Kettle-handbook-11-13.png\"><br>一个很简单的流程，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-14.png-blog.photo\" alt=\"Kettle-handbook-11-14.png\"><br>我们做些简单的配置，<br>一个是GPG的目录（就是我们上面安装的那个）<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-15.png-blog.photo\" alt=\"Kettle-handbook-11-15.png\"><br>还有就是，我们的要加密的文件和一个目标文件名，注意，这里我们得填写一下“用户ID”，就是我们前面新建的那个用户名就可以了<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-16.png-blog.photo\" alt=\"Kettle-handbook-11-16.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-17.png-blog.photo\" alt=\"Kettle-handbook-11-17.png\"><br>这里，可以勾选一下，目标是一个文件<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-18.png-blog.photo\" alt=\"Kettle-handbook-11-18.png\"><br>好了，然后，我们执行下就可以了<br>我们源文件：<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-19.png-blog.photo\" alt=\"Kettle-handbook-11-19.png\"><br>加密后的文件：<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-20.png-blog.photo\" alt=\"Kettle-handbook-11-20.png\"><br>下面，我们再看看，怎样解密</p>\n<h1 id=\"3-用PGP解密文件\"><a href=\"#3-用PGP解密文件\" class=\"headerlink\" title=\"3. 用PGP解密文件\"></a>3. 用PGP解密文件</h1><p>知道了加密，解密也是一样的，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-21.png-blog.photo\" alt=\"Kettle-handbook-11-21.png\"><br>这里的话，配置和上面差不多，这里，我们要填写一个“密钥”，就是我们上面创建时，输入的一个密码<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-22.png-blog.photo\" alt=\"Kettle-handbook-11-22.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-23.png-blog.photo\" alt=\"Kettle-handbook-11-23.png\"><br>我们运行一下，解密后，是一样的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-11-24.png-blog.photo\" alt=\"Kettle-handbook-11-24.png\"><br>好了，就简单介绍到这里</p>"},{"title":"Kettle手册（十）- 跨库查询","date":"2017-04-10T03:24:44.000Z","_content":"Kettle整体使用起来，还是很方便的，熟悉应用了之后，就是对控件的熟悉和使用了，只要思路有了，就是整合下Kettle中各个控件的使用就行。\n这里，简单介绍下一个“跨库查询”的控件。\n有的时候，我们一个脚本，可能只是临时性的，或者需要实时的去查一下，同步到数仓的话，可能不太方便，我们就可以使用跨库查询的控件\n用到的表信息\n![Kettle-handbook-10-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-01.png-blog.photo)\n![Kettle-handbook-10-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-02.png-blog.photo)\n\n<!-- more -->\n\n# 1. 数据库连接(Database Join)\n我们先用这个控件来实现一下\n![Kettle-handbook-10-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-03.png-blog.photo)\n用起来也很简单\n![Kettle-handbook-10-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-04.png-blog.photo)\n表输入：是我们第一个库中的SQL\n数据库连接：是我们另一个库的SQL\n![Kettle-handbook-10-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-05.png-blog.photo)\n我们用关联的字段放在where条件后，使用“?”来占位，并在下面，选择要传入的参数\n默认的话，是JOIN，我们也可以勾选Outer Join，\n然后，我们看下，输出就行\n![Kettle-handbook-10-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-06.png-blog.photo)\n这是后面导出的文件，\n![Kettle-handbook-10-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-07.png-blog.photo)\n这里，我们就简单实现了跨库的查询\n\n# 2. 数据库查询\n我们再来看另一个控件，“数据库查询”，这个控件同样可以实现跨库，但是有一个小问题\n首先，我们使用上一次的数据来看\n![Kettle-handbook-10-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-08.png-blog.photo)\n![Kettle-handbook-10-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-09.png-blog.photo)\n我们执行下，结果看上去是一样的\n![Kettle-handbook-10-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-10.png-blog.photo)\n这其实有个隐藏的问题，我们再增加几条记录看看\n![Kettle-handbook-10-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-11.png-blog.photo)\n比如：现在1号有2条记录，正常的话，我们导出也是要有2条的\n我们执行下看看\n![Kettle-handbook-10-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-12.png-blog.photo)\n我们会看到，数据并没有增加，这是控件导致的，\n先获取左边的结果集，然后一条一条去右边匹配；匹配到第一条记录后，就会跳出，直接去匹配下一个，所以，我们有2条记录，也只会找到第一个。\n这并不是我们想要的，我们再试下第一个控件\n![Kettle-handbook-10-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-13.png-blog.photo)\n使用这个“数据库查询”控件的话，可以通过将1-N关系汇总，将N的一方，放在前面\n![Kettle-handbook-10-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-14.png-blog.photo)\n![Kettle-handbook-10-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-15.png-blog.photo)\n最后的结果也是可以的\n![Kettle-handbook-10-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-16.png-blog.photo)\n\n","source":"_posts/2017-04-10-Kettle-handbook-10.md","raw":"---\ntitle: Kettle手册（十）- 跨库查询\ndate: 2017-04-10 11:24:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\nKettle整体使用起来，还是很方便的，熟悉应用了之后，就是对控件的熟悉和使用了，只要思路有了，就是整合下Kettle中各个控件的使用就行。\n这里，简单介绍下一个“跨库查询”的控件。\n有的时候，我们一个脚本，可能只是临时性的，或者需要实时的去查一下，同步到数仓的话，可能不太方便，我们就可以使用跨库查询的控件\n用到的表信息\n![Kettle-handbook-10-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-01.png-blog.photo)\n![Kettle-handbook-10-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-02.png-blog.photo)\n\n<!-- more -->\n\n# 1. 数据库连接(Database Join)\n我们先用这个控件来实现一下\n![Kettle-handbook-10-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-03.png-blog.photo)\n用起来也很简单\n![Kettle-handbook-10-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-04.png-blog.photo)\n表输入：是我们第一个库中的SQL\n数据库连接：是我们另一个库的SQL\n![Kettle-handbook-10-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-05.png-blog.photo)\n我们用关联的字段放在where条件后，使用“?”来占位，并在下面，选择要传入的参数\n默认的话，是JOIN，我们也可以勾选Outer Join，\n然后，我们看下，输出就行\n![Kettle-handbook-10-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-06.png-blog.photo)\n这是后面导出的文件，\n![Kettle-handbook-10-07.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-07.png-blog.photo)\n这里，我们就简单实现了跨库的查询\n\n# 2. 数据库查询\n我们再来看另一个控件，“数据库查询”，这个控件同样可以实现跨库，但是有一个小问题\n首先，我们使用上一次的数据来看\n![Kettle-handbook-10-08.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-08.png-blog.photo)\n![Kettle-handbook-10-09.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-09.png-blog.photo)\n我们执行下，结果看上去是一样的\n![Kettle-handbook-10-10.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-10.png-blog.photo)\n这其实有个隐藏的问题，我们再增加几条记录看看\n![Kettle-handbook-10-11.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-11.png-blog.photo)\n比如：现在1号有2条记录，正常的话，我们导出也是要有2条的\n我们执行下看看\n![Kettle-handbook-10-12.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-12.png-blog.photo)\n我们会看到，数据并没有增加，这是控件导致的，\n先获取左边的结果集，然后一条一条去右边匹配；匹配到第一条记录后，就会跳出，直接去匹配下一个，所以，我们有2条记录，也只会找到第一个。\n这并不是我们想要的，我们再试下第一个控件\n![Kettle-handbook-10-13.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-13.png-blog.photo)\n使用这个“数据库查询”控件的话，可以通过将1-N关系汇总，将N的一方，放在前面\n![Kettle-handbook-10-14.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-14.png-blog.photo)\n![Kettle-handbook-10-15.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-15.png-blog.photo)\n最后的结果也是可以的\n![Kettle-handbook-10-16.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-16.png-blog.photo)\n\n","slug":"Kettle-handbook-10","published":1,"updated":"2017-08-27T14:18:29.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1cf000u88inwglz8ecr","content":"<p>Kettle整体使用起来，还是很方便的，熟悉应用了之后，就是对控件的熟悉和使用了，只要思路有了，就是整合下Kettle中各个控件的使用就行。<br>这里，简单介绍下一个“跨库查询”的控件。<br>有的时候，我们一个脚本，可能只是临时性的，或者需要实时的去查一下，同步到数仓的话，可能不太方便，我们就可以使用跨库查询的控件<br>用到的表信息<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-01.png-blog.photo\" alt=\"Kettle-handbook-10-01.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-02.png-blog.photo\" alt=\"Kettle-handbook-10-02.png\"></p>\n<a id=\"more\"></a>\n<h1 id=\"1-数据库连接-Database-Join\"><a href=\"#1-数据库连接-Database-Join\" class=\"headerlink\" title=\"1. 数据库连接(Database Join)\"></a>1. 数据库连接(Database Join)</h1><p>我们先用这个控件来实现一下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-03.png-blog.photo\" alt=\"Kettle-handbook-10-03.png\"><br>用起来也很简单<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-04.png-blog.photo\" alt=\"Kettle-handbook-10-04.png\"><br>表输入：是我们第一个库中的SQL<br>数据库连接：是我们另一个库的SQL<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-05.png-blog.photo\" alt=\"Kettle-handbook-10-05.png\"><br>我们用关联的字段放在where条件后，使用“?”来占位，并在下面，选择要传入的参数<br>默认的话，是JOIN，我们也可以勾选Outer Join，<br>然后，我们看下，输出就行<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-06.png-blog.photo\" alt=\"Kettle-handbook-10-06.png\"><br>这是后面导出的文件，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-07.png-blog.photo\" alt=\"Kettle-handbook-10-07.png\"><br>这里，我们就简单实现了跨库的查询</p>\n<h1 id=\"2-数据库查询\"><a href=\"#2-数据库查询\" class=\"headerlink\" title=\"2. 数据库查询\"></a>2. 数据库查询</h1><p>我们再来看另一个控件，“数据库查询”，这个控件同样可以实现跨库，但是有一个小问题<br>首先，我们使用上一次的数据来看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-08.png-blog.photo\" alt=\"Kettle-handbook-10-08.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-09.png-blog.photo\" alt=\"Kettle-handbook-10-09.png\"><br>我们执行下，结果看上去是一样的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-10.png-blog.photo\" alt=\"Kettle-handbook-10-10.png\"><br>这其实有个隐藏的问题，我们再增加几条记录看看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-11.png-blog.photo\" alt=\"Kettle-handbook-10-11.png\"><br>比如：现在1号有2条记录，正常的话，我们导出也是要有2条的<br>我们执行下看看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-12.png-blog.photo\" alt=\"Kettle-handbook-10-12.png\"><br>我们会看到，数据并没有增加，这是控件导致的，<br>先获取左边的结果集，然后一条一条去右边匹配；匹配到第一条记录后，就会跳出，直接去匹配下一个，所以，我们有2条记录，也只会找到第一个。<br>这并不是我们想要的，我们再试下第一个控件<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-13.png-blog.photo\" alt=\"Kettle-handbook-10-13.png\"><br>使用这个“数据库查询”控件的话，可以通过将1-N关系汇总，将N的一方，放在前面<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-14.png-blog.photo\" alt=\"Kettle-handbook-10-14.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-15.png-blog.photo\" alt=\"Kettle-handbook-10-15.png\"><br>最后的结果也是可以的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-16.png-blog.photo\" alt=\"Kettle-handbook-10-16.png\"></p>\n","site":{"data":{}},"excerpt":"<p>Kettle整体使用起来，还是很方便的，熟悉应用了之后，就是对控件的熟悉和使用了，只要思路有了，就是整合下Kettle中各个控件的使用就行。<br>这里，简单介绍下一个“跨库查询”的控件。<br>有的时候，我们一个脚本，可能只是临时性的，或者需要实时的去查一下，同步到数仓的话，可能不太方便，我们就可以使用跨库查询的控件<br>用到的表信息<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-01.png-blog.photo\" alt=\"Kettle-handbook-10-01.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-02.png-blog.photo\" alt=\"Kettle-handbook-10-02.png\"></p>","more":"<h1 id=\"1-数据库连接-Database-Join\"><a href=\"#1-数据库连接-Database-Join\" class=\"headerlink\" title=\"1. 数据库连接(Database Join)\"></a>1. 数据库连接(Database Join)</h1><p>我们先用这个控件来实现一下<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-03.png-blog.photo\" alt=\"Kettle-handbook-10-03.png\"><br>用起来也很简单<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-04.png-blog.photo\" alt=\"Kettle-handbook-10-04.png\"><br>表输入：是我们第一个库中的SQL<br>数据库连接：是我们另一个库的SQL<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-05.png-blog.photo\" alt=\"Kettle-handbook-10-05.png\"><br>我们用关联的字段放在where条件后，使用“?”来占位，并在下面，选择要传入的参数<br>默认的话，是JOIN，我们也可以勾选Outer Join，<br>然后，我们看下，输出就行<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-06.png-blog.photo\" alt=\"Kettle-handbook-10-06.png\"><br>这是后面导出的文件，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-07.png-blog.photo\" alt=\"Kettle-handbook-10-07.png\"><br>这里，我们就简单实现了跨库的查询</p>\n<h1 id=\"2-数据库查询\"><a href=\"#2-数据库查询\" class=\"headerlink\" title=\"2. 数据库查询\"></a>2. 数据库查询</h1><p>我们再来看另一个控件，“数据库查询”，这个控件同样可以实现跨库，但是有一个小问题<br>首先，我们使用上一次的数据来看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-08.png-blog.photo\" alt=\"Kettle-handbook-10-08.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-09.png-blog.photo\" alt=\"Kettle-handbook-10-09.png\"><br>我们执行下，结果看上去是一样的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-10.png-blog.photo\" alt=\"Kettle-handbook-10-10.png\"><br>这其实有个隐藏的问题，我们再增加几条记录看看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-11.png-blog.photo\" alt=\"Kettle-handbook-10-11.png\"><br>比如：现在1号有2条记录，正常的话，我们导出也是要有2条的<br>我们执行下看看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-12.png-blog.photo\" alt=\"Kettle-handbook-10-12.png\"><br>我们会看到，数据并没有增加，这是控件导致的，<br>先获取左边的结果集，然后一条一条去右边匹配；匹配到第一条记录后，就会跳出，直接去匹配下一个，所以，我们有2条记录，也只会找到第一个。<br>这并不是我们想要的，我们再试下第一个控件<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-13.png-blog.photo\" alt=\"Kettle-handbook-10-13.png\"><br>使用这个“数据库查询”控件的话，可以通过将1-N关系汇总，将N的一方，放在前面<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-14.png-blog.photo\" alt=\"Kettle-handbook-10-14.png\"><br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-15.png-blog.photo\" alt=\"Kettle-handbook-10-15.png\"><br>最后的结果也是可以的<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-10-16.png-blog.photo\" alt=\"Kettle-handbook-10-16.png\"></p>"},{"title":"Kettle手册（十二）- 控件使用-从步骤插入数据","date":"2017-04-14T03:24:44.000Z","_content":"\n这里介绍一个控件的小功能，也是最近才发现的，之前在“表输入”中要使用参数的话，一般都是使用变量，\n其实，还有个功能也可以尝试使用\n![Kettle-handbook-12-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-01.png-blog.photo)\n整体流程就是这样，我们第一个 query_paramter，就是查询了我们想设置的参数\n![Kettle-handbook-12-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-02.png-blog.photo)\n然后，就是我们真正需要的，我们再表输入中，使用 “?”来占位，然后“从步骤插入数据”，选择上一个步骤，然后会将数据替换占位符\n![Kettle-handbook-12-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-03.png-blog.photo)\n最后，我们将文件导出即可，奥对了，我们可以改成日志控件，直接输出查看\n![Kettle-handbook-12-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-04.png-blog.photo)\n刚刚，上面还有一个“执行每一行”，这个就是，如果我们有多个参数，\n![Kettle-handbook-12-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-05.png-blog.photo)\n就可以使用这个参数了，很方便，好了，就介绍到这里先。\n![Kettle-handbook-12-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-06.png-blog.photo)","source":"_posts/2017-04-14-Kettle-handbook-12.md","raw":"---\ntitle: Kettle手册（十二）- 控件使用-从步骤插入数据\ndate: 2017-04-14 11:24:44\ncategories:\n- \"ETL-Kettle\"\ntags:\n- \"Kettle\"\n---\n\n这里介绍一个控件的小功能，也是最近才发现的，之前在“表输入”中要使用参数的话，一般都是使用变量，\n其实，还有个功能也可以尝试使用\n![Kettle-handbook-12-01.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-01.png-blog.photo)\n整体流程就是这样，我们第一个 query_paramter，就是查询了我们想设置的参数\n![Kettle-handbook-12-02.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-02.png-blog.photo)\n然后，就是我们真正需要的，我们再表输入中，使用 “?”来占位，然后“从步骤插入数据”，选择上一个步骤，然后会将数据替换占位符\n![Kettle-handbook-12-03.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-03.png-blog.photo)\n最后，我们将文件导出即可，奥对了，我们可以改成日志控件，直接输出查看\n![Kettle-handbook-12-04.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-04.png-blog.photo)\n刚刚，上面还有一个“执行每一行”，这个就是，如果我们有多个参数，\n![Kettle-handbook-12-05.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-05.png-blog.photo)\n就可以使用这个参数了，很方便，好了，就介绍到这里先。\n![Kettle-handbook-12-06.png](http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-06.png-blog.photo)","slug":"Kettle-handbook-12","published":1,"updated":"2017-08-27T14:36:07.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1cj000x88in47hrvdat","content":"<p>这里介绍一个控件的小功能，也是最近才发现的，之前在“表输入”中要使用参数的话，一般都是使用变量，<br>其实，还有个功能也可以尝试使用<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-01.png-blog.photo\" alt=\"Kettle-handbook-12-01.png\"><br>整体流程就是这样，我们第一个 query_paramter，就是查询了我们想设置的参数<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-02.png-blog.photo\" alt=\"Kettle-handbook-12-02.png\"><br>然后，就是我们真正需要的，我们再表输入中，使用 “?”来占位，然后“从步骤插入数据”，选择上一个步骤，然后会将数据替换占位符<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-03.png-blog.photo\" alt=\"Kettle-handbook-12-03.png\"><br>最后，我们将文件导出即可，奥对了，我们可以改成日志控件，直接输出查看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-04.png-blog.photo\" alt=\"Kettle-handbook-12-04.png\"><br>刚刚，上面还有一个“执行每一行”，这个就是，如果我们有多个参数，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-05.png-blog.photo\" alt=\"Kettle-handbook-12-05.png\"><br>就可以使用这个参数了，很方便，好了，就介绍到这里先。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-06.png-blog.photo\" alt=\"Kettle-handbook-12-06.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里介绍一个控件的小功能，也是最近才发现的，之前在“表输入”中要使用参数的话，一般都是使用变量，<br>其实，还有个功能也可以尝试使用<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-01.png-blog.photo\" alt=\"Kettle-handbook-12-01.png\"><br>整体流程就是这样，我们第一个 query_paramter，就是查询了我们想设置的参数<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-02.png-blog.photo\" alt=\"Kettle-handbook-12-02.png\"><br>然后，就是我们真正需要的，我们再表输入中，使用 “?”来占位，然后“从步骤插入数据”，选择上一个步骤，然后会将数据替换占位符<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-03.png-blog.photo\" alt=\"Kettle-handbook-12-03.png\"><br>最后，我们将文件导出即可，奥对了，我们可以改成日志控件，直接输出查看<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-04.png-blog.photo\" alt=\"Kettle-handbook-12-04.png\"><br>刚刚，上面还有一个“执行每一行”，这个就是，如果我们有多个参数，<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-05.png-blog.photo\" alt=\"Kettle-handbook-12-05.png\"><br>就可以使用这个参数了，很方便，好了，就介绍到这里先。<br><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/Kettle-handbook-12-06.png-blog.photo\" alt=\"Kettle-handbook-12-06.png\"></p>\n"},{"title":"Cognos资料汇总贴","date":"2017-08-01T13:59:00.000Z","_content":"以前搞过Cognos，写过很多基础的教程，应该是14年的样子，都在CSDN上，这里贴个汇总贴吧，想要看的同学可以去看看，希望有帮助。\n\nReportStudio入门教程：[http://blog.csdn.net/column/details/ygy-reportstudio.html](http://blog.csdn.net/column/details/ygy-reportstudio.html)\n\nFramework Manage入门教程：[http://blog.csdn.net/column/details/ygy-frameworkmanager.html](http://blog.csdn.net/column/details/ygy-frameworkmanager.html)\n\nCognos函数手册：[http://blog.csdn.net/column/details/ygy-cognos-function.html](http://blog.csdn.net/column/details/ygy-cognos-function.html)\n\nCognos相关的其他资料（主页不同的类别下看看）：[http://blog.csdn.net/yuguiyang1990](http://blog.csdn.net/yuguiyang1990)\n\n![cognos-doc-main.png](http://7xl61k.com1.z0.glb.clouddn.com/cognos-doc-main.png-blog.photo)\n\n好了，感兴趣的同学，可以自行去看看，好久不搞了，估计有疑问也解决不了了...","source":"_posts/2017-08-01-cognos-doc-main.md","raw":"---\ntitle: Cognos资料汇总贴\ndate: 2017-08-01 21:59:00\ncategories:\n- \"数据可视化-Cognos\"\ntags:\n- \"Cognos\"\n- \"数据可视化\"\n---\n以前搞过Cognos，写过很多基础的教程，应该是14年的样子，都在CSDN上，这里贴个汇总贴吧，想要看的同学可以去看看，希望有帮助。\n\nReportStudio入门教程：[http://blog.csdn.net/column/details/ygy-reportstudio.html](http://blog.csdn.net/column/details/ygy-reportstudio.html)\n\nFramework Manage入门教程：[http://blog.csdn.net/column/details/ygy-frameworkmanager.html](http://blog.csdn.net/column/details/ygy-frameworkmanager.html)\n\nCognos函数手册：[http://blog.csdn.net/column/details/ygy-cognos-function.html](http://blog.csdn.net/column/details/ygy-cognos-function.html)\n\nCognos相关的其他资料（主页不同的类别下看看）：[http://blog.csdn.net/yuguiyang1990](http://blog.csdn.net/yuguiyang1990)\n\n![cognos-doc-main.png](http://7xl61k.com1.z0.glb.clouddn.com/cognos-doc-main.png-blog.photo)\n\n好了，感兴趣的同学，可以自行去看看，好久不搞了，估计有疑问也解决不了了...","slug":"cognos-doc-main","published":1,"updated":"2017-08-27T14:52:03.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1cm001088inpe6bswmc","content":"<p>以前搞过Cognos，写过很多基础的教程，应该是14年的样子，都在CSDN上，这里贴个汇总贴吧，想要看的同学可以去看看，希望有帮助。</p>\n<p>ReportStudio入门教程：<a href=\"http://blog.csdn.net/column/details/ygy-reportstudio.html\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/column/details/ygy-reportstudio.html</a></p>\n<p>Framework Manage入门教程：<a href=\"http://blog.csdn.net/column/details/ygy-frameworkmanager.html\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/column/details/ygy-frameworkmanager.html</a></p>\n<p>Cognos函数手册：<a href=\"http://blog.csdn.net/column/details/ygy-cognos-function.html\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/column/details/ygy-cognos-function.html</a></p>\n<p>Cognos相关的其他资料（主页不同的类别下看看）：<a href=\"http://blog.csdn.net/yuguiyang1990\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/yuguiyang1990</a></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/cognos-doc-main.png-blog.photo\" alt=\"cognos-doc-main.png\"></p>\n<p>好了，感兴趣的同学，可以自行去看看，好久不搞了，估计有疑问也解决不了了…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以前搞过Cognos，写过很多基础的教程，应该是14年的样子，都在CSDN上，这里贴个汇总贴吧，想要看的同学可以去看看，希望有帮助。</p>\n<p>ReportStudio入门教程：<a href=\"http://blog.csdn.net/column/details/ygy-reportstudio.html\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/column/details/ygy-reportstudio.html</a></p>\n<p>Framework Manage入门教程：<a href=\"http://blog.csdn.net/column/details/ygy-frameworkmanager.html\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/column/details/ygy-frameworkmanager.html</a></p>\n<p>Cognos函数手册：<a href=\"http://blog.csdn.net/column/details/ygy-cognos-function.html\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/column/details/ygy-cognos-function.html</a></p>\n<p>Cognos相关的其他资料（主页不同的类别下看看）：<a href=\"http://blog.csdn.net/yuguiyang1990\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/yuguiyang1990</a></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/cognos-doc-main.png-blog.photo\" alt=\"cognos-doc-main.png\"></p>\n<p>好了，感兴趣的同学，可以自行去看看，好久不搞了，估计有疑问也解决不了了…</p>\n"},{"title":"numpy手册(1)-ndarray","date":"2017-08-02T13:59:00.000Z","_content":"前面我们算是简单入门了Pandas，numpy也是数据分析中常用的，这里我们也来简单学习下。\n\n# 1.numpy基本介绍\n<blockquote class=\"blockquote-center\">\nnumpy是Python的一种开源数值计算扩展，这种工具可以用来存储和处理大型矩阵。一个用Python实现的科学计算包。\n（--百度百科）\n</blockquote>\n\nnumpy有2种基本对象，\n``` python\nndarray（N-dimensional array object）和 ufunc（universal function object）\n```\n\nndarray是存储单一数据类型的多维数组，ufunc是能够对数组进行处理的函数。\n\n# 2.ndarray\n我们先来看看这个数组\n首先，我们得引入numpy\n``` python\nimport numpy as np\n```\n\n## 2.1 创建\n数组初始化的话有很多方式：Array creation routines\n我们可以直接使用list来初始化，array有很多的属性，比如大小，维度，元素个数\n``` python\nimport numpy as np\n\na = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\nprint(a,type(a),',shape:',a.shape,',ndim:',a.ndim,',size:',a.size)\nprint(b,type(b),',shape:',b.shape,',ndim:',b.ndim,',size:',b.size)\nprint(c,type(c),',shape:',c.shape,',ndim:',c.ndim,',size:',c.size)\n```\n\n![numpy-handbook-01-01](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-01.png-blog.photo)\n\n这里呢，我们定义了一维数组和二维数组，比如c，是3行3列的2维数组，元素个数是9个\n``` python\nnumpy.array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)\n```\n\n这里，我们再说下这个shape，这个属性可以修改\n``` python\n#原来是4行3列\nc = np.array([[1,2,3],[4,5,6],[7,8,9],[0,0,7]])\nprint(c)\n#我们改为3行4列\nc.shape=(3,4)\nprint(c)\n#改为2行6列\nc.shape=(2,6)\nprint(c)\n```\n\n![numpy-handbook-01-02](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-02.png-blog.photo)\n\n这里需要注意下，如果某个轴的元素为-1，将根据数组元素的个数，自动计算长度\n``` python\nc.shape=(1,-1)\nprint(c)\nc.shape=(-1,1)\nprint(c)\n```\n![numpy-handbook-01-03](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-03.png-blog.photo)\n\n这里的shape是改变原来的数组，另一个method，可以创建一个改变shape的新数组，而原数组保持不变\n``` python\nc = np.array([[1,2,3],[4,5,6],[7,8,9],[0,0,7]])\nprint('c:',c)\nd = c.reshape(2,6)\nprint('c:',c)\nprint('d:',d)\n```\n![numpy-handbook-01-04](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-04.png-blog.photo)\n\n这里要注意的是，c和d共享内存数据存储内存区域，c变了，d也会变\n``` python\nprint(c[0])\n#修改c[0]\nc[0]=[-9,-8,-3]\nprint('c:',c)\nprint('d:',d)\n```\n![numpy-handbook-01-05](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-05.png-blog.photo)\n\n我们可以通过dtype来获取元素的类型，我们可以在初始化的时候，指定dtype\n``` python\nc = np.array([1,2,3])\nprint(c.dtype) #int32\n\nd = np.array([1.1,3.3])\nprint(d.dtype) #float64\n```\n\n下面，我们来看看常用的初始化方法\n\n### arange\n通过指定开始值，结束值和步长来创建一维数组，这里不包过终值\n``` python\narange([start,] stop[, step,], dtype=None)\n\nnp.arange(3)\nOut[51]: array([0, 1, 2])\n\nnp.arange(1,10,3)\nOut[52]: array([1, 4, 7])\n```\n\n### linspace\n通过指定开始值，终值和元素个数，来创建数组，这里包括终值\n``` python\nnp.linspace(1,10,5)\nOut[53]: array([  1.  ,   3.25,   5.5 ,   7.75,  10.  ])\n\nnp.linspace(1,2,3)\nOut[54]: array([ 1. ,  1.5,  2. ])\n```\n\n### np.zeros,np.ones\n\n这2个函数可以初始化指定长度或形状的全0或全1的数组\n``` python \nnp.ones(3)\nOut[202]: array([ 1.,  1.,  1.])\n\nnp.ones([2,2])\nOut[203]: \narray([[ 1.,  1.],\n       [ 1.,  1.]])\n\nnp.zeros(5)\nOut[204]: array([ 0.,  0.,  0.,  0.,  0.])\n\nnp.zeros([4,3])\nOut[205]: \narray([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\n```\n\n### np.empty\n\n可以创建一个没有任何具体值得数组\n``` python\nnp.empty(2)\nOut[211]: array([  7.74860419e-304,   7.74860419e-304])\n\nnp.empty(2,dtype=int)\nOut[214]: array([        -1, 2147483647])\n\nnp.empty((3,3),dtype=np.float64)\nOut[215]: \narray([[  4.94065646e-324,   9.88131292e-324,   1.48219694e-323],\n       [  1.97626258e-323,   2.47032823e-323,   2.96439388e-323],\n       [  3.45845952e-323,   3.95252517e-323,   4.44659081e-323]])\n\n```\n这要注意下，empty初始化的都是没有意思的值，不一定会初始化为0\n\n![numpy-handbook-01-06](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-06.png-blog.photo)\n\n## 2.2 存取元素\n这里直接粘贴一个例子，原始教程在这：http://old.sebug.net/paper/books/scipydoc/numpy_intro.html\n``` python\n>>> a = np.arange(10)\n>>> a[5]    # 用整数作为下标可以获取数组中的某个元素\n5\n>>> a[3:5]  # 用范围作为下标获取数组的一个切片，包括a[3]不包括a[5]\narray([3, 4])\n>>> a[:5]   # 省略开始下标，表示从a[0]开始\narray([0, 1, 2, 3, 4])\n>>> a[:-1]  # 下标可以使用负数，表示从数组后往前数\narray([0, 1, 2, 3, 4, 5, 6, 7, 8])\n>>> a[2:4] = 100,101    # 下标还可以用来修改元素的值\n>>> a\narray([  0,   1, 100, 101,   4,   5,   6,   7,   8,   9])\n>>> a[1:-1:2]   # 范围中的第三个参数表示步长，2表示隔一个元素取一个元素\narray([  1, 101,   5,   7])\n>>> a[::-1] # 省略范围的开始下标和结束下标，步长为-1，整个数组头尾颠倒\narray([  9,   8,   7,   6,   5,   4, 101, 100,   1,   0])\n>>> a[5:1:-2] # 步长为负数时，开始下标必须大于结束下标\narray([  5, 101])\n```\n\n就2维数组来说\n\n![numpy-handbook-01-07](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-07.png-blog.photo)\n\n这是基本的获取方式，还有些高级的方法\n\n### 使用整数序列\n\n这里简单来2个练习，原文例子很多，就是通过下标来筛选数据\n``` python\na = np.arange(-5,5,1)\n\na\nOut[68]: array([-5, -4, -3, -2, -1,  0,  1,  2,  3,  4])\n\na[[1,3,5]]\nOut[69]: array([-4, -2,  0])\n\n### 使用布尔数组\n\n按照传入的布尔数组，只有为True的才返回，也叫布尔型索引\n``` python\na=np.array([-3,1,5])\n\na\nOut[72]: array([-3,  1,  5])\n\na[[False,True,False]]\nOut[73]: array([1])\n\na[[True,False,True]]\nOut[74]: array([-3,  5])\n```\n\n# 3.附录（参考资料）\n文档：\n[https://docs.scipy.org/doc/numpy-dev/reference/index.html#reference](https://docs.scipy.org/doc/numpy-dev/reference/index.html#reference)\n\n[numpy快速处理数据](http://old.sebug.net/paper/books/scipydoc/numpy_intro.html)","source":"_posts/2017-08-02-numpy-handbook-01.md","raw":"---\ntitle: numpy手册(1)-ndarray\ndate: 2017-08-02 21:59:00\ncategories:\n- \"Python-Numpy\"\ntags:\n- Python\n- Numpy\n---\n前面我们算是简单入门了Pandas，numpy也是数据分析中常用的，这里我们也来简单学习下。\n\n# 1.numpy基本介绍\n<blockquote class=\"blockquote-center\">\nnumpy是Python的一种开源数值计算扩展，这种工具可以用来存储和处理大型矩阵。一个用Python实现的科学计算包。\n（--百度百科）\n</blockquote>\n\nnumpy有2种基本对象，\n``` python\nndarray（N-dimensional array object）和 ufunc（universal function object）\n```\n\nndarray是存储单一数据类型的多维数组，ufunc是能够对数组进行处理的函数。\n\n# 2.ndarray\n我们先来看看这个数组\n首先，我们得引入numpy\n``` python\nimport numpy as np\n```\n\n## 2.1 创建\n数组初始化的话有很多方式：Array creation routines\n我们可以直接使用list来初始化，array有很多的属性，比如大小，维度，元素个数\n``` python\nimport numpy as np\n\na = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\nprint(a,type(a),',shape:',a.shape,',ndim:',a.ndim,',size:',a.size)\nprint(b,type(b),',shape:',b.shape,',ndim:',b.ndim,',size:',b.size)\nprint(c,type(c),',shape:',c.shape,',ndim:',c.ndim,',size:',c.size)\n```\n\n![numpy-handbook-01-01](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-01.png-blog.photo)\n\n这里呢，我们定义了一维数组和二维数组，比如c，是3行3列的2维数组，元素个数是9个\n``` python\nnumpy.array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)\n```\n\n这里，我们再说下这个shape，这个属性可以修改\n``` python\n#原来是4行3列\nc = np.array([[1,2,3],[4,5,6],[7,8,9],[0,0,7]])\nprint(c)\n#我们改为3行4列\nc.shape=(3,4)\nprint(c)\n#改为2行6列\nc.shape=(2,6)\nprint(c)\n```\n\n![numpy-handbook-01-02](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-02.png-blog.photo)\n\n这里需要注意下，如果某个轴的元素为-1，将根据数组元素的个数，自动计算长度\n``` python\nc.shape=(1,-1)\nprint(c)\nc.shape=(-1,1)\nprint(c)\n```\n![numpy-handbook-01-03](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-03.png-blog.photo)\n\n这里的shape是改变原来的数组，另一个method，可以创建一个改变shape的新数组，而原数组保持不变\n``` python\nc = np.array([[1,2,3],[4,5,6],[7,8,9],[0,0,7]])\nprint('c:',c)\nd = c.reshape(2,6)\nprint('c:',c)\nprint('d:',d)\n```\n![numpy-handbook-01-04](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-04.png-blog.photo)\n\n这里要注意的是，c和d共享内存数据存储内存区域，c变了，d也会变\n``` python\nprint(c[0])\n#修改c[0]\nc[0]=[-9,-8,-3]\nprint('c:',c)\nprint('d:',d)\n```\n![numpy-handbook-01-05](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-05.png-blog.photo)\n\n我们可以通过dtype来获取元素的类型，我们可以在初始化的时候，指定dtype\n``` python\nc = np.array([1,2,3])\nprint(c.dtype) #int32\n\nd = np.array([1.1,3.3])\nprint(d.dtype) #float64\n```\n\n下面，我们来看看常用的初始化方法\n\n### arange\n通过指定开始值，结束值和步长来创建一维数组，这里不包过终值\n``` python\narange([start,] stop[, step,], dtype=None)\n\nnp.arange(3)\nOut[51]: array([0, 1, 2])\n\nnp.arange(1,10,3)\nOut[52]: array([1, 4, 7])\n```\n\n### linspace\n通过指定开始值，终值和元素个数，来创建数组，这里包括终值\n``` python\nnp.linspace(1,10,5)\nOut[53]: array([  1.  ,   3.25,   5.5 ,   7.75,  10.  ])\n\nnp.linspace(1,2,3)\nOut[54]: array([ 1. ,  1.5,  2. ])\n```\n\n### np.zeros,np.ones\n\n这2个函数可以初始化指定长度或形状的全0或全1的数组\n``` python \nnp.ones(3)\nOut[202]: array([ 1.,  1.,  1.])\n\nnp.ones([2,2])\nOut[203]: \narray([[ 1.,  1.],\n       [ 1.,  1.]])\n\nnp.zeros(5)\nOut[204]: array([ 0.,  0.,  0.,  0.,  0.])\n\nnp.zeros([4,3])\nOut[205]: \narray([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\n```\n\n### np.empty\n\n可以创建一个没有任何具体值得数组\n``` python\nnp.empty(2)\nOut[211]: array([  7.74860419e-304,   7.74860419e-304])\n\nnp.empty(2,dtype=int)\nOut[214]: array([        -1, 2147483647])\n\nnp.empty((3,3),dtype=np.float64)\nOut[215]: \narray([[  4.94065646e-324,   9.88131292e-324,   1.48219694e-323],\n       [  1.97626258e-323,   2.47032823e-323,   2.96439388e-323],\n       [  3.45845952e-323,   3.95252517e-323,   4.44659081e-323]])\n\n```\n这要注意下，empty初始化的都是没有意思的值，不一定会初始化为0\n\n![numpy-handbook-01-06](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-06.png-blog.photo)\n\n## 2.2 存取元素\n这里直接粘贴一个例子，原始教程在这：http://old.sebug.net/paper/books/scipydoc/numpy_intro.html\n``` python\n>>> a = np.arange(10)\n>>> a[5]    # 用整数作为下标可以获取数组中的某个元素\n5\n>>> a[3:5]  # 用范围作为下标获取数组的一个切片，包括a[3]不包括a[5]\narray([3, 4])\n>>> a[:5]   # 省略开始下标，表示从a[0]开始\narray([0, 1, 2, 3, 4])\n>>> a[:-1]  # 下标可以使用负数，表示从数组后往前数\narray([0, 1, 2, 3, 4, 5, 6, 7, 8])\n>>> a[2:4] = 100,101    # 下标还可以用来修改元素的值\n>>> a\narray([  0,   1, 100, 101,   4,   5,   6,   7,   8,   9])\n>>> a[1:-1:2]   # 范围中的第三个参数表示步长，2表示隔一个元素取一个元素\narray([  1, 101,   5,   7])\n>>> a[::-1] # 省略范围的开始下标和结束下标，步长为-1，整个数组头尾颠倒\narray([  9,   8,   7,   6,   5,   4, 101, 100,   1,   0])\n>>> a[5:1:-2] # 步长为负数时，开始下标必须大于结束下标\narray([  5, 101])\n```\n\n就2维数组来说\n\n![numpy-handbook-01-07](http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-07.png-blog.photo)\n\n这是基本的获取方式，还有些高级的方法\n\n### 使用整数序列\n\n这里简单来2个练习，原文例子很多，就是通过下标来筛选数据\n``` python\na = np.arange(-5,5,1)\n\na\nOut[68]: array([-5, -4, -3, -2, -1,  0,  1,  2,  3,  4])\n\na[[1,3,5]]\nOut[69]: array([-4, -2,  0])\n\n### 使用布尔数组\n\n按照传入的布尔数组，只有为True的才返回，也叫布尔型索引\n``` python\na=np.array([-3,1,5])\n\na\nOut[72]: array([-3,  1,  5])\n\na[[False,True,False]]\nOut[73]: array([1])\n\na[[True,False,True]]\nOut[74]: array([-3,  5])\n```\n\n# 3.附录（参考资料）\n文档：\n[https://docs.scipy.org/doc/numpy-dev/reference/index.html#reference](https://docs.scipy.org/doc/numpy-dev/reference/index.html#reference)\n\n[numpy快速处理数据](http://old.sebug.net/paper/books/scipydoc/numpy_intro.html)","slug":"numpy-handbook-01","published":1,"updated":"2017-08-27T15:14:31.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6uvm1co001388in4vq006ir","content":"<p>前面我们算是简单入门了Pandas，numpy也是数据分析中常用的，这里我们也来简单学习下。</p>\n<h1 id=\"1-numpy基本介绍\"><a href=\"#1-numpy基本介绍\" class=\"headerlink\" title=\"1.numpy基本介绍\"></a>1.numpy基本介绍</h1><blockquote class=\"blockquote-center\"><br>numpy是Python的一种开源数值计算扩展，这种工具可以用来存储和处理大型矩阵。一个用Python实现的科学计算包。<br>（–百度百科）<br></blockquote>\n\n<p>numpy有2种基本对象，<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ndarray（N-dimensional array object）和 ufunc（universal function object）</div></pre></td></tr></table></figure></p>\n<p>ndarray是存储单一数据类型的多维数组，ufunc是能够对数组进行处理的函数。</p>\n<h1 id=\"2-ndarray\"><a href=\"#2-ndarray\" class=\"headerlink\" title=\"2.ndarray\"></a>2.ndarray</h1><p>我们先来看看这个数组<br>首先，我们得引入numpy<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-1-创建\"><a href=\"#2-1-创建\" class=\"headerlink\" title=\"2.1 创建\"></a>2.1 创建</h2><p>数组初始化的话有很多方式：Array creation routines<br>我们可以直接使用list来初始化，array有很多的属性，比如大小，维度，元素个数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\">a = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">b = np.array([<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</div><div class=\"line\">c = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]])</div><div class=\"line\"></div><div class=\"line\">print(a,type(a),<span class=\"string\">',shape:'</span>,a.shape,<span class=\"string\">',ndim:'</span>,a.ndim,<span class=\"string\">',size:'</span>,a.size)</div><div class=\"line\">print(b,type(b),<span class=\"string\">',shape:'</span>,b.shape,<span class=\"string\">',ndim:'</span>,b.ndim,<span class=\"string\">',size:'</span>,b.size)</div><div class=\"line\">print(c,type(c),<span class=\"string\">',shape:'</span>,c.shape,<span class=\"string\">',ndim:'</span>,c.ndim,<span class=\"string\">',size:'</span>,c.size)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-01.png-blog.photo\" alt=\"numpy-handbook-01-01\"></p>\n<p>这里呢，我们定义了一维数组和二维数组，比如c，是3行3列的2维数组，元素个数是9个<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">numpy.array(object, dtype=<span class=\"keyword\">None</span>, copy=<span class=\"keyword\">True</span>, order=<span class=\"string\">'K'</span>, subok=<span class=\"keyword\">False</span>, ndmin=<span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>这里，我们再说下这个shape，这个属性可以修改<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#原来是4行3列</span></div><div class=\"line\">c = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>],[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>]])</div><div class=\"line\">print(c)</div><div class=\"line\"><span class=\"comment\">#我们改为3行4列</span></div><div class=\"line\">c.shape=(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div><div class=\"line\">print(c)</div><div class=\"line\"><span class=\"comment\">#改为2行6列</span></div><div class=\"line\">c.shape=(<span class=\"number\">2</span>,<span class=\"number\">6</span>)</div><div class=\"line\">print(c)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-02.png-blog.photo\" alt=\"numpy-handbook-01-02\"></p>\n<p>这里需要注意下，如果某个轴的元素为-1，将根据数组元素的个数，自动计算长度<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">c.shape=(<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</div><div class=\"line\">print(c)</div><div class=\"line\">c.shape=(<span class=\"number\">-1</span>,<span class=\"number\">1</span>)</div><div class=\"line\">print(c)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-03.png-blog.photo\" alt=\"numpy-handbook-01-03\"></p>\n<p>这里的shape是改变原来的数组，另一个method，可以创建一个改变shape的新数组，而原数组保持不变<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">c = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>],[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>]])</div><div class=\"line\">print(<span class=\"string\">'c:'</span>,c)</div><div class=\"line\">d = c.reshape(<span class=\"number\">2</span>,<span class=\"number\">6</span>)</div><div class=\"line\">print(<span class=\"string\">'c:'</span>,c)</div><div class=\"line\">print(<span class=\"string\">'d:'</span>,d)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-04.png-blog.photo\" alt=\"numpy-handbook-01-04\"></p>\n<p>这里要注意的是，c和d共享内存数据存储内存区域，c变了，d也会变<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(c[<span class=\"number\">0</span>])</div><div class=\"line\"><span class=\"comment\">#修改c[0]</span></div><div class=\"line\">c[<span class=\"number\">0</span>]=[<span class=\"number\">-9</span>,<span class=\"number\">-8</span>,<span class=\"number\">-3</span>]</div><div class=\"line\">print(<span class=\"string\">'c:'</span>,c)</div><div class=\"line\">print(<span class=\"string\">'d:'</span>,d)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-05.png-blog.photo\" alt=\"numpy-handbook-01-05\"></p>\n<p>我们可以通过dtype来获取元素的类型，我们可以在初始化的时候，指定dtype<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">c = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">print(c.dtype) <span class=\"comment\">#int32</span></div><div class=\"line\"></div><div class=\"line\">d = np.array([<span class=\"number\">1.1</span>,<span class=\"number\">3.3</span>])</div><div class=\"line\">print(d.dtype) <span class=\"comment\">#float64</span></div></pre></td></tr></table></figure></p>\n<p>下面，我们来看看常用的初始化方法</p>\n<h3 id=\"arange\"><a href=\"#arange\" class=\"headerlink\" title=\"arange\"></a>arange</h3><p>通过指定开始值，结束值和步长来创建一维数组，这里不包过终值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">arange([start,] stop[, step,], dtype=<span class=\"keyword\">None</span>)</div><div class=\"line\"></div><div class=\"line\">np.arange(<span class=\"number\">3</span>)</div><div class=\"line\">Out[<span class=\"number\">51</span>]: array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</div><div class=\"line\"></div><div class=\"line\">np.arange(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">3</span>)</div><div class=\"line\">Out[<span class=\"number\">52</span>]: array([<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>])</div></pre></td></tr></table></figure></p>\n<h3 id=\"linspace\"><a href=\"#linspace\" class=\"headerlink\" title=\"linspace\"></a>linspace</h3><p>通过指定开始值，终值和元素个数，来创建数组，这里包括终值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">np.linspace(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>)</div><div class=\"line\">Out[<span class=\"number\">53</span>]: array([  <span class=\"number\">1.</span>  ,   <span class=\"number\">3.25</span>,   <span class=\"number\">5.5</span> ,   <span class=\"number\">7.75</span>,  <span class=\"number\">10.</span>  ])</div><div class=\"line\"></div><div class=\"line\">np.linspace(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</div><div class=\"line\">Out[<span class=\"number\">54</span>]: array([ <span class=\"number\">1.</span> ,  <span class=\"number\">1.5</span>,  <span class=\"number\">2.</span> ])</div></pre></td></tr></table></figure></p>\n<h3 id=\"np-zeros-np-ones\"><a href=\"#np-zeros-np-ones\" class=\"headerlink\" title=\"np.zeros,np.ones\"></a>np.zeros,np.ones</h3><p>这2个函数可以初始化指定长度或形状的全0或全1的数组<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">np.ones(<span class=\"number\">3</span>)</div><div class=\"line\">Out[<span class=\"number\">202</span>]: array([ <span class=\"number\">1.</span>,  <span class=\"number\">1.</span>,  <span class=\"number\">1.</span>])</div><div class=\"line\"></div><div class=\"line\">np.ones([<span class=\"number\">2</span>,<span class=\"number\">2</span>])</div><div class=\"line\">Out[<span class=\"number\">203</span>]: </div><div class=\"line\">array([[ <span class=\"number\">1.</span>,  <span class=\"number\">1.</span>],</div><div class=\"line\">       [ <span class=\"number\">1.</span>,  <span class=\"number\">1.</span>]])</div><div class=\"line\"></div><div class=\"line\">np.zeros(<span class=\"number\">5</span>)</div><div class=\"line\">Out[<span class=\"number\">204</span>]: array([ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>])</div><div class=\"line\"></div><div class=\"line\">np.zeros([<span class=\"number\">4</span>,<span class=\"number\">3</span>])</div><div class=\"line\">Out[<span class=\"number\">205</span>]: </div><div class=\"line\">array([[ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>],</div><div class=\"line\">       [ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>],</div><div class=\"line\">       [ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>],</div><div class=\"line\">       [ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>]])</div></pre></td></tr></table></figure></p>\n<h3 id=\"np-empty\"><a href=\"#np-empty\" class=\"headerlink\" title=\"np.empty\"></a>np.empty</h3><p>可以创建一个没有任何具体值得数组<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">np.empty(<span class=\"number\">2</span>)</div><div class=\"line\">Out[<span class=\"number\">211</span>]: array([  <span class=\"number\">7.74860419e-304</span>,   <span class=\"number\">7.74860419e-304</span>])</div><div class=\"line\"></div><div class=\"line\">np.empty(<span class=\"number\">2</span>,dtype=int)</div><div class=\"line\">Out[<span class=\"number\">214</span>]: array([        <span class=\"number\">-1</span>, <span class=\"number\">2147483647</span>])</div><div class=\"line\"></div><div class=\"line\">np.empty((<span class=\"number\">3</span>,<span class=\"number\">3</span>),dtype=np.float64)</div><div class=\"line\">Out[<span class=\"number\">215</span>]: </div><div class=\"line\">array([[  <span class=\"number\">4.94065646e-324</span>,   <span class=\"number\">9.88131292e-324</span>,   <span class=\"number\">1.48219694e-323</span>],</div><div class=\"line\">       [  <span class=\"number\">1.97626258e-323</span>,   <span class=\"number\">2.47032823e-323</span>,   <span class=\"number\">2.96439388e-323</span>],</div><div class=\"line\">       [  <span class=\"number\">3.45845952e-323</span>,   <span class=\"number\">3.95252517e-323</span>,   <span class=\"number\">4.44659081e-323</span>]])</div></pre></td></tr></table></figure></p>\n<p>这要注意下，empty初始化的都是没有意思的值，不一定会初始化为0</p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-06.png-blog.photo\" alt=\"numpy-handbook-01-06\"></p>\n<h2 id=\"2-2-存取元素\"><a href=\"#2-2-存取元素\" class=\"headerlink\" title=\"2.2 存取元素\"></a>2.2 存取元素</h2><p>这里直接粘贴一个例子，原始教程在这：<a href=\"http://old.sebug.net/paper/books/scipydoc/numpy_intro.html\" target=\"_blank\" rel=\"external\">http://old.sebug.net/paper/books/scipydoc/numpy_intro.html</a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.arange(<span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">5</span>]    <span class=\"comment\"># 用整数作为下标可以获取数组中的某个元素</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">3</span>:<span class=\"number\">5</span>]  <span class=\"comment\"># 用范围作为下标获取数组的一个切片，包括a[3]不包括a[5]</span></div><div class=\"line\">array([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[:<span class=\"number\">5</span>]   <span class=\"comment\"># 省略开始下标，表示从a[0]开始</span></div><div class=\"line\">array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[:<span class=\"number\">-1</span>]  <span class=\"comment\"># 下标可以使用负数，表示从数组后往前数</span></div><div class=\"line\">array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">2</span>:<span class=\"number\">4</span>] = <span class=\"number\">100</span>,<span class=\"number\">101</span>    <span class=\"comment\"># 下标还可以用来修改元素的值</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">array([  <span class=\"number\">0</span>,   <span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">101</span>,   <span class=\"number\">4</span>,   <span class=\"number\">5</span>,   <span class=\"number\">6</span>,   <span class=\"number\">7</span>,   <span class=\"number\">8</span>,   <span class=\"number\">9</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">1</span>:<span class=\"number\">-1</span>:<span class=\"number\">2</span>]   <span class=\"comment\"># 范围中的第三个参数表示步长，2表示隔一个元素取一个元素</span></div><div class=\"line\">array([  <span class=\"number\">1</span>, <span class=\"number\">101</span>,   <span class=\"number\">5</span>,   <span class=\"number\">7</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[::<span class=\"number\">-1</span>] <span class=\"comment\"># 省略范围的开始下标和结束下标，步长为-1，整个数组头尾颠倒</span></div><div class=\"line\">array([  <span class=\"number\">9</span>,   <span class=\"number\">8</span>,   <span class=\"number\">7</span>,   <span class=\"number\">6</span>,   <span class=\"number\">5</span>,   <span class=\"number\">4</span>, <span class=\"number\">101</span>, <span class=\"number\">100</span>,   <span class=\"number\">1</span>,   <span class=\"number\">0</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">5</span>:<span class=\"number\">1</span>:<span class=\"number\">-2</span>] <span class=\"comment\"># 步长为负数时，开始下标必须大于结束下标</span></div><div class=\"line\">array([  <span class=\"number\">5</span>, <span class=\"number\">101</span>])</div></pre></td></tr></table></figure></p>\n<p>就2维数组来说</p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-07.png-blog.photo\" alt=\"numpy-handbook-01-07\"></p>\n<p>这是基本的获取方式，还有些高级的方法</p>\n<h3 id=\"使用整数序列\"><a href=\"#使用整数序列\" class=\"headerlink\" title=\"使用整数序列\"></a>使用整数序列</h3><p>这里简单来2个练习，原文例子很多，就是通过下标来筛选数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = np.arange(<span class=\"number\">-5</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">a</div><div class=\"line\">Out[<span class=\"number\">68</span>]: array([<span class=\"number\">-5</span>, <span class=\"number\">-4</span>, <span class=\"number\">-3</span>, <span class=\"number\">-2</span>, <span class=\"number\">-1</span>,  <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>])</div><div class=\"line\"></div><div class=\"line\">a[[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]]</div><div class=\"line\">Out[<span class=\"number\">69</span>]: array([<span class=\"number\">-4</span>, <span class=\"number\">-2</span>,  <span class=\"number\">0</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">### 使用布尔数组</span></div><div class=\"line\"></div><div class=\"line\">按照传入的布尔数组，只有为<span class=\"keyword\">True</span>的才返回，也叫布尔型索引</div><div class=\"line\">``` python</div><div class=\"line\">a=np.array([<span class=\"number\">-3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>])</div><div class=\"line\"></div><div class=\"line\">a</div><div class=\"line\">Out[<span class=\"number\">72</span>]: array([<span class=\"number\">-3</span>,  <span class=\"number\">1</span>,  <span class=\"number\">5</span>])</div><div class=\"line\"></div><div class=\"line\">a[[<span class=\"keyword\">False</span>,<span class=\"keyword\">True</span>,<span class=\"keyword\">False</span>]]</div><div class=\"line\">Out[<span class=\"number\">73</span>]: array([<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\">a[[<span class=\"keyword\">True</span>,<span class=\"keyword\">False</span>,<span class=\"keyword\">True</span>]]</div><div class=\"line\">Out[<span class=\"number\">74</span>]: array([<span class=\"number\">-3</span>,  <span class=\"number\">5</span>])</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-附录（参考资料）\"><a href=\"#3-附录（参考资料）\" class=\"headerlink\" title=\"3.附录（参考资料）\"></a>3.附录（参考资料）</h1><p>文档：<br><a href=\"https://docs.scipy.org/doc/numpy-dev/reference/index.html#reference\" target=\"_blank\" rel=\"external\">https://docs.scipy.org/doc/numpy-dev/reference/index.html#reference</a></p>\n<p><a href=\"http://old.sebug.net/paper/books/scipydoc/numpy_intro.html\" target=\"_blank\" rel=\"external\">numpy快速处理数据</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前面我们算是简单入门了Pandas，numpy也是数据分析中常用的，这里我们也来简单学习下。</p>\n<h1 id=\"1-numpy基本介绍\"><a href=\"#1-numpy基本介绍\" class=\"headerlink\" title=\"1.numpy基本介绍\"></a>1.numpy基本介绍</h1><blockquote class=\"blockquote-center\"><br>numpy是Python的一种开源数值计算扩展，这种工具可以用来存储和处理大型矩阵。一个用Python实现的科学计算包。<br>（–百度百科）<br></blockquote>\n\n<p>numpy有2种基本对象，<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ndarray（N-dimensional array object）和 ufunc（universal function object）</div></pre></td></tr></table></figure></p>\n<p>ndarray是存储单一数据类型的多维数组，ufunc是能够对数组进行处理的函数。</p>\n<h1 id=\"2-ndarray\"><a href=\"#2-ndarray\" class=\"headerlink\" title=\"2.ndarray\"></a>2.ndarray</h1><p>我们先来看看这个数组<br>首先，我们得引入numpy<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-1-创建\"><a href=\"#2-1-创建\" class=\"headerlink\" title=\"2.1 创建\"></a>2.1 创建</h2><p>数组初始化的话有很多方式：Array creation routines<br>我们可以直接使用list来初始化，array有很多的属性，比如大小，维度，元素个数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\">a = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">b = np.array([<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</div><div class=\"line\">c = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]])</div><div class=\"line\"></div><div class=\"line\">print(a,type(a),<span class=\"string\">',shape:'</span>,a.shape,<span class=\"string\">',ndim:'</span>,a.ndim,<span class=\"string\">',size:'</span>,a.size)</div><div class=\"line\">print(b,type(b),<span class=\"string\">',shape:'</span>,b.shape,<span class=\"string\">',ndim:'</span>,b.ndim,<span class=\"string\">',size:'</span>,b.size)</div><div class=\"line\">print(c,type(c),<span class=\"string\">',shape:'</span>,c.shape,<span class=\"string\">',ndim:'</span>,c.ndim,<span class=\"string\">',size:'</span>,c.size)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-01.png-blog.photo\" alt=\"numpy-handbook-01-01\"></p>\n<p>这里呢，我们定义了一维数组和二维数组，比如c，是3行3列的2维数组，元素个数是9个<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">numpy.array(object, dtype=<span class=\"keyword\">None</span>, copy=<span class=\"keyword\">True</span>, order=<span class=\"string\">'K'</span>, subok=<span class=\"keyword\">False</span>, ndmin=<span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>这里，我们再说下这个shape，这个属性可以修改<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#原来是4行3列</span></div><div class=\"line\">c = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>],[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>]])</div><div class=\"line\">print(c)</div><div class=\"line\"><span class=\"comment\">#我们改为3行4列</span></div><div class=\"line\">c.shape=(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div><div class=\"line\">print(c)</div><div class=\"line\"><span class=\"comment\">#改为2行6列</span></div><div class=\"line\">c.shape=(<span class=\"number\">2</span>,<span class=\"number\">6</span>)</div><div class=\"line\">print(c)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-02.png-blog.photo\" alt=\"numpy-handbook-01-02\"></p>\n<p>这里需要注意下，如果某个轴的元素为-1，将根据数组元素的个数，自动计算长度<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">c.shape=(<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</div><div class=\"line\">print(c)</div><div class=\"line\">c.shape=(<span class=\"number\">-1</span>,<span class=\"number\">1</span>)</div><div class=\"line\">print(c)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-03.png-blog.photo\" alt=\"numpy-handbook-01-03\"></p>\n<p>这里的shape是改变原来的数组，另一个method，可以创建一个改变shape的新数组，而原数组保持不变<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">c = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>],[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>]])</div><div class=\"line\">print(<span class=\"string\">'c:'</span>,c)</div><div class=\"line\">d = c.reshape(<span class=\"number\">2</span>,<span class=\"number\">6</span>)</div><div class=\"line\">print(<span class=\"string\">'c:'</span>,c)</div><div class=\"line\">print(<span class=\"string\">'d:'</span>,d)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-04.png-blog.photo\" alt=\"numpy-handbook-01-04\"></p>\n<p>这里要注意的是，c和d共享内存数据存储内存区域，c变了，d也会变<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(c[<span class=\"number\">0</span>])</div><div class=\"line\"><span class=\"comment\">#修改c[0]</span></div><div class=\"line\">c[<span class=\"number\">0</span>]=[<span class=\"number\">-9</span>,<span class=\"number\">-8</span>,<span class=\"number\">-3</span>]</div><div class=\"line\">print(<span class=\"string\">'c:'</span>,c)</div><div class=\"line\">print(<span class=\"string\">'d:'</span>,d)</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-05.png-blog.photo\" alt=\"numpy-handbook-01-05\"></p>\n<p>我们可以通过dtype来获取元素的类型，我们可以在初始化的时候，指定dtype<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">c = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\">print(c.dtype) <span class=\"comment\">#int32</span></div><div class=\"line\"></div><div class=\"line\">d = np.array([<span class=\"number\">1.1</span>,<span class=\"number\">3.3</span>])</div><div class=\"line\">print(d.dtype) <span class=\"comment\">#float64</span></div></pre></td></tr></table></figure></p>\n<p>下面，我们来看看常用的初始化方法</p>\n<h3 id=\"arange\"><a href=\"#arange\" class=\"headerlink\" title=\"arange\"></a>arange</h3><p>通过指定开始值，结束值和步长来创建一维数组，这里不包过终值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">arange([start,] stop[, step,], dtype=<span class=\"keyword\">None</span>)</div><div class=\"line\"></div><div class=\"line\">np.arange(<span class=\"number\">3</span>)</div><div class=\"line\">Out[<span class=\"number\">51</span>]: array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</div><div class=\"line\"></div><div class=\"line\">np.arange(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">3</span>)</div><div class=\"line\">Out[<span class=\"number\">52</span>]: array([<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>])</div></pre></td></tr></table></figure></p>\n<h3 id=\"linspace\"><a href=\"#linspace\" class=\"headerlink\" title=\"linspace\"></a>linspace</h3><p>通过指定开始值，终值和元素个数，来创建数组，这里包括终值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">np.linspace(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>)</div><div class=\"line\">Out[<span class=\"number\">53</span>]: array([  <span class=\"number\">1.</span>  ,   <span class=\"number\">3.25</span>,   <span class=\"number\">5.5</span> ,   <span class=\"number\">7.75</span>,  <span class=\"number\">10.</span>  ])</div><div class=\"line\"></div><div class=\"line\">np.linspace(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</div><div class=\"line\">Out[<span class=\"number\">54</span>]: array([ <span class=\"number\">1.</span> ,  <span class=\"number\">1.5</span>,  <span class=\"number\">2.</span> ])</div></pre></td></tr></table></figure></p>\n<h3 id=\"np-zeros-np-ones\"><a href=\"#np-zeros-np-ones\" class=\"headerlink\" title=\"np.zeros,np.ones\"></a>np.zeros,np.ones</h3><p>这2个函数可以初始化指定长度或形状的全0或全1的数组<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">np.ones(<span class=\"number\">3</span>)</div><div class=\"line\">Out[<span class=\"number\">202</span>]: array([ <span class=\"number\">1.</span>,  <span class=\"number\">1.</span>,  <span class=\"number\">1.</span>])</div><div class=\"line\"></div><div class=\"line\">np.ones([<span class=\"number\">2</span>,<span class=\"number\">2</span>])</div><div class=\"line\">Out[<span class=\"number\">203</span>]: </div><div class=\"line\">array([[ <span class=\"number\">1.</span>,  <span class=\"number\">1.</span>],</div><div class=\"line\">       [ <span class=\"number\">1.</span>,  <span class=\"number\">1.</span>]])</div><div class=\"line\"></div><div class=\"line\">np.zeros(<span class=\"number\">5</span>)</div><div class=\"line\">Out[<span class=\"number\">204</span>]: array([ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>])</div><div class=\"line\"></div><div class=\"line\">np.zeros([<span class=\"number\">4</span>,<span class=\"number\">3</span>])</div><div class=\"line\">Out[<span class=\"number\">205</span>]: </div><div class=\"line\">array([[ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>],</div><div class=\"line\">       [ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>],</div><div class=\"line\">       [ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>],</div><div class=\"line\">       [ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>]])</div></pre></td></tr></table></figure></p>\n<h3 id=\"np-empty\"><a href=\"#np-empty\" class=\"headerlink\" title=\"np.empty\"></a>np.empty</h3><p>可以创建一个没有任何具体值得数组<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">np.empty(<span class=\"number\">2</span>)</div><div class=\"line\">Out[<span class=\"number\">211</span>]: array([  <span class=\"number\">7.74860419e-304</span>,   <span class=\"number\">7.74860419e-304</span>])</div><div class=\"line\"></div><div class=\"line\">np.empty(<span class=\"number\">2</span>,dtype=int)</div><div class=\"line\">Out[<span class=\"number\">214</span>]: array([        <span class=\"number\">-1</span>, <span class=\"number\">2147483647</span>])</div><div class=\"line\"></div><div class=\"line\">np.empty((<span class=\"number\">3</span>,<span class=\"number\">3</span>),dtype=np.float64)</div><div class=\"line\">Out[<span class=\"number\">215</span>]: </div><div class=\"line\">array([[  <span class=\"number\">4.94065646e-324</span>,   <span class=\"number\">9.88131292e-324</span>,   <span class=\"number\">1.48219694e-323</span>],</div><div class=\"line\">       [  <span class=\"number\">1.97626258e-323</span>,   <span class=\"number\">2.47032823e-323</span>,   <span class=\"number\">2.96439388e-323</span>],</div><div class=\"line\">       [  <span class=\"number\">3.45845952e-323</span>,   <span class=\"number\">3.95252517e-323</span>,   <span class=\"number\">4.44659081e-323</span>]])</div></pre></td></tr></table></figure></p>\n<p>这要注意下，empty初始化的都是没有意思的值，不一定会初始化为0</p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-06.png-blog.photo\" alt=\"numpy-handbook-01-06\"></p>\n<h2 id=\"2-2-存取元素\"><a href=\"#2-2-存取元素\" class=\"headerlink\" title=\"2.2 存取元素\"></a>2.2 存取元素</h2><p>这里直接粘贴一个例子，原始教程在这：<a href=\"http://old.sebug.net/paper/books/scipydoc/numpy_intro.html\" target=\"_blank\" rel=\"external\">http://old.sebug.net/paper/books/scipydoc/numpy_intro.html</a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.arange(<span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">5</span>]    <span class=\"comment\"># 用整数作为下标可以获取数组中的某个元素</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">3</span>:<span class=\"number\">5</span>]  <span class=\"comment\"># 用范围作为下标获取数组的一个切片，包括a[3]不包括a[5]</span></div><div class=\"line\">array([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[:<span class=\"number\">5</span>]   <span class=\"comment\"># 省略开始下标，表示从a[0]开始</span></div><div class=\"line\">array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[:<span class=\"number\">-1</span>]  <span class=\"comment\"># 下标可以使用负数，表示从数组后往前数</span></div><div class=\"line\">array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">2</span>:<span class=\"number\">4</span>] = <span class=\"number\">100</span>,<span class=\"number\">101</span>    <span class=\"comment\"># 下标还可以用来修改元素的值</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">array([  <span class=\"number\">0</span>,   <span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">101</span>,   <span class=\"number\">4</span>,   <span class=\"number\">5</span>,   <span class=\"number\">6</span>,   <span class=\"number\">7</span>,   <span class=\"number\">8</span>,   <span class=\"number\">9</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">1</span>:<span class=\"number\">-1</span>:<span class=\"number\">2</span>]   <span class=\"comment\"># 范围中的第三个参数表示步长，2表示隔一个元素取一个元素</span></div><div class=\"line\">array([  <span class=\"number\">1</span>, <span class=\"number\">101</span>,   <span class=\"number\">5</span>,   <span class=\"number\">7</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[::<span class=\"number\">-1</span>] <span class=\"comment\"># 省略范围的开始下标和结束下标，步长为-1，整个数组头尾颠倒</span></div><div class=\"line\">array([  <span class=\"number\">9</span>,   <span class=\"number\">8</span>,   <span class=\"number\">7</span>,   <span class=\"number\">6</span>,   <span class=\"number\">5</span>,   <span class=\"number\">4</span>, <span class=\"number\">101</span>, <span class=\"number\">100</span>,   <span class=\"number\">1</span>,   <span class=\"number\">0</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">5</span>:<span class=\"number\">1</span>:<span class=\"number\">-2</span>] <span class=\"comment\"># 步长为负数时，开始下标必须大于结束下标</span></div><div class=\"line\">array([  <span class=\"number\">5</span>, <span class=\"number\">101</span>])</div></pre></td></tr></table></figure></p>\n<p>就2维数组来说</p>\n<p><img src=\"http://7xl61k.com1.z0.glb.clouddn.com/numpy-handbook-01-07.png-blog.photo\" alt=\"numpy-handbook-01-07\"></p>\n<p>这是基本的获取方式，还有些高级的方法</p>\n<h3 id=\"使用整数序列\"><a href=\"#使用整数序列\" class=\"headerlink\" title=\"使用整数序列\"></a>使用整数序列</h3><p>这里简单来2个练习，原文例子很多，就是通过下标来筛选数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = np.arange(<span class=\"number\">-5</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">a</div><div class=\"line\">Out[<span class=\"number\">68</span>]: array([<span class=\"number\">-5</span>, <span class=\"number\">-4</span>, <span class=\"number\">-3</span>, <span class=\"number\">-2</span>, <span class=\"number\">-1</span>,  <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>])</div><div class=\"line\"></div><div class=\"line\">a[[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]]</div><div class=\"line\">Out[<span class=\"number\">69</span>]: array([<span class=\"number\">-4</span>, <span class=\"number\">-2</span>,  <span class=\"number\">0</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">### 使用布尔数组</span></div><div class=\"line\"></div><div class=\"line\">按照传入的布尔数组，只有为<span class=\"keyword\">True</span>的才返回，也叫布尔型索引</div><div class=\"line\">``` python</div><div class=\"line\">a=np.array([<span class=\"number\">-3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>])</div><div class=\"line\"></div><div class=\"line\">a</div><div class=\"line\">Out[<span class=\"number\">72</span>]: array([<span class=\"number\">-3</span>,  <span class=\"number\">1</span>,  <span class=\"number\">5</span>])</div><div class=\"line\"></div><div class=\"line\">a[[<span class=\"keyword\">False</span>,<span class=\"keyword\">True</span>,<span class=\"keyword\">False</span>]]</div><div class=\"line\">Out[<span class=\"number\">73</span>]: array([<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\">a[[<span class=\"keyword\">True</span>,<span class=\"keyword\">False</span>,<span class=\"keyword\">True</span>]]</div><div class=\"line\">Out[<span class=\"number\">74</span>]: array([<span class=\"number\">-3</span>,  <span class=\"number\">5</span>])</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-附录（参考资料）\"><a href=\"#3-附录（参考资料）\" class=\"headerlink\" title=\"3.附录（参考资料）\"></a>3.附录（参考资料）</h1><p>文档：<br><a href=\"https://docs.scipy.org/doc/numpy-dev/reference/index.html#reference\" target=\"_blank\" rel=\"external\">https://docs.scipy.org/doc/numpy-dev/reference/index.html#reference</a></p>\n<p><a href=\"http://old.sebug.net/paper/books/scipydoc/numpy_intro.html\" target=\"_blank\" rel=\"external\">numpy快速处理数据</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj6uvm1bn000888inz6ozztz6","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1bx000e88inn6b6sp02"},{"post_id":"cj6uvm1an000088innv4v0rdg","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1c2000j88incv2m4mms"},{"post_id":"cj6uvm1br000988in662o5vce","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1c5000m88injh8wyc2x"},{"post_id":"cj6uvm1bw000d88inrxts21ra","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1c8000p88inublbe3nv"},{"post_id":"cj6uvm1b3000288inl3t8xbxw","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1cd000s88in7m6w3d1v"},{"post_id":"cj6uvm1by000g88inbte9jc1m","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1ci000v88ink3vh6mye"},{"post_id":"cj6uvm1c3000l88inpkhizn88","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1cl000y88ing2hqf56p"},{"post_id":"cj6uvm1bh000688indzeqzsav","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1co001188injc7i55wf"},{"post_id":"cj6uvm1c6000o88inr1gqltjd","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1cr001688in33kpme87"},{"post_id":"cj6uvm1c9000r88ind8fcqrr2","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1cu001888in9eh4vvwp"},{"post_id":"cj6uvm1cf000u88inwglz8ecr","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1cv001a88inmpgsyw46"},{"post_id":"cj6uvm1cj000x88in47hrvdat","category_id":"cj6uvm1ba000488inpm2bo7oi","_id":"cj6uvm1d2001e88inwu4enhdb"},{"post_id":"cj6uvm1cm001088inpe6bswmc","category_id":"cj6uvm1cq001488inmifb84av","_id":"cj6uvm1d3001f88in3x3vnark"},{"post_id":"cj6uvm1co001388in4vq006ir","category_id":"cj6uvm1cx001c88inzuno8ya3","_id":"cj6uvm1d5001i88inbmivt1xn"}],"PostTag":[{"post_id":"cj6uvm1bn000888inz6ozztz6","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1bv000c88inu5j246dn"},{"post_id":"cj6uvm1an000088innv4v0rdg","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1by000f88injnh7qdk4"},{"post_id":"cj6uvm1br000988in662o5vce","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1c3000k88inqusfegva"},{"post_id":"cj6uvm1bw000d88inrxts21ra","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1c5000n88ind1tyq1pu"},{"post_id":"cj6uvm1b3000288inl3t8xbxw","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1c9000q88in45yrs0fo"},{"post_id":"cj6uvm1by000g88inbte9jc1m","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1cd000t88inan0vo7t0"},{"post_id":"cj6uvm1c3000l88inpkhizn88","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1ci000w88in0rgxm6fn"},{"post_id":"cj6uvm1bh000688indzeqzsav","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1cl000z88inw14e94dk"},{"post_id":"cj6uvm1c6000o88inr1gqltjd","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1co001288inaeu2vr9h"},{"post_id":"cj6uvm1c9000r88ind8fcqrr2","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1cr001788inyl5ymx13"},{"post_id":"cj6uvm1cf000u88inwglz8ecr","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1cu001988inct0l9aca"},{"post_id":"cj6uvm1cj000x88in47hrvdat","tag_id":"cj6uvm1bf000588inau6exp1b","_id":"cj6uvm1cv001b88inokfroi44"},{"post_id":"cj6uvm1cm001088inpe6bswmc","tag_id":"cj6uvm1cq001588in6t1u4jwd","_id":"cj6uvm1d4001h88infdp81ovg"},{"post_id":"cj6uvm1cm001088inpe6bswmc","tag_id":"cj6uvm1cz001d88inm4n7zxxf","_id":"cj6uvm1d5001j88inu2ae0taj"},{"post_id":"cj6uvm1co001388in4vq006ir","tag_id":"cj6uvm1d3001g88in4bypccb7","_id":"cj6uvm1d7001l88insb3sg2l8"},{"post_id":"cj6uvm1co001388in4vq006ir","tag_id":"cj6uvm1d6001k88injrvgfkx0","_id":"cj6uvm1d7001m88ingr3xabrb"}],"Tag":[{"name":"Kettle","_id":"cj6uvm1bf000588inau6exp1b"},{"name":"Cognos","_id":"cj6uvm1cq001588in6t1u4jwd"},{"name":"数据可视化","_id":"cj6uvm1cz001d88inm4n7zxxf"},{"name":"Python","_id":"cj6uvm1d3001g88in4bypccb7"},{"name":"Numpy","_id":"cj6uvm1d6001k88injrvgfkx0"}]}}